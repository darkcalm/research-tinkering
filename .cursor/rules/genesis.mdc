---
description: 
globs: 
alwaysApply: false
---
# Rule: Genesis - Generating the Development Workflow

## Goal

To generate the complete set of development process rules for this workspace (`create-prd.mdc`, `generate-tasks.mdc`, `process-task-list.mdc`). This process is like creating a full organism from its DNA, where this `genesis.mdc` file is the DNA.

The generation is an interactive, multi-step process that requires user confirmation at each stage.

## Process

### Step 1: Introduction & External File Confirmation

1.  **Explain the Goal:** Inform the user that you will guide them through generating the three core rule files for managing development in this workspace.
2.  **List External Files:** List the contents of the `external/` directory.
3.  **Prompt for Confirmation:** Ask the user: "The first rule to be generated is `create-prd.mdc`, which uses files in the `external/` directory as input. Are all necessary external documents (e.g., project briefs, proposals, user research) present in the `external/` directory? Please confirm to proceed."
4.  **Wait for Confirmation:** Do not proceed without user confirmation.

### Step 2: Generate `create-prd.mdc`

1.  **Prompt for Guidelines:** After confirmation, ask the user the following question: "To ensure the PRD is generated correctly, please provide guidelines on how to process the files in `external/`. What key information should be extracted? What is their purpose?"
2.  **Wait for User Input:** Await the user's response for the guidelines.
3.  **Generate the File:** Once the user provides the guidelines, create the file `.cursor/rules/create-prd.mdc`. Take the user's guidelines and insert them into the `Process External Files` section of the template below.

    ---
    **Template for `create-prd.mdc`**
    ```markdown
    # Rule: Generating a Product Requirements Document (PRD)

    ## Goal
    To guide an AI assistant in creating a detailed Product Requirements Document (PRD) in Markdown format, based on an initial user prompt. The PRD should be clear, actionable, and suitable for a junior developer to understand and implement the feature.

    ## Process
    1.  **Receive Initial Prompt:** The user provides a brief description or request for a new feature or functionality. If no description is provided, check `external/`.
    2.  **Process External Files:**
        *AI: When executing this rule, insert the user-provided guidelines from the Genesis step here. The user's instructions on how to interpret the contents of the `external/` directory should be followed.*
    3.  **Ask Clarifying Questions:** Before writing the PRD, the AI *must* ask clarifying questions to gather sufficient detail. The goal is to understand the "what" and "why" of the feature, not necessarily the "how" (which the developer will figure out).
    4.  **Generate PRD:** Based on the initial prompt and the user's answers to the clarifying questions, generate a PRD using the structure outlined below.
    5.  **Save PRD:** Save the generated document as `prd-[feature-name].md` inside the `tasks/` directory.

    ## Clarifying Questions (Examples)
    *   **Problem/Goal:** "What problem does this feature solve for the user?"
    *   **Target User:** "Who is the primary user of this feature?"
    *   **Core Functionality:** "Can you describe the key actions a user should be able to perform?"
    *   **User Stories:** "Could you provide a few user stories?"
    *   **Acceptance Criteria:** "How will we know when this feature is successfully implemented?"
    *   **Scope/Boundaries:** "Are there any specific things this feature *should not* do?"

    ## PRD Structure
    1.  **Introduction/Overview**
    2.  **Goals**
    3.  **User Stories**
    4.  **Functional Requirements**
    5.  **Non-Goals (Out of Scope)**
    6.  **Design Considerations (Optional)**
    7.  **Technical Considerations (Optional)**
    8.  **Success Metrics**
    9.  **Open Questions**

    ## Target Audience
    Assume the primary reader of the PRD is a **junior developer**.

    ## Output
    *   **Format:** Markdown (`.md`)
    *   **Location:** `tasks/`
    *   **Filename:** `prd-[feature-name].md`

    ## Final instructions
    1. Do NOT start implementing the PRD
    2. Make sure to ask the user clarifying questions
    3. Take the user's answers to the clarifying questions and improve the PRD
    ```
    ---

### Step 3: Generate `generate-tasks.mdc`

1.  **Inform and Prompt:** Inform the user: "The `create-prd.mdc` rule has been generated. The next step is to create `generate-tasks.mdc`, which defines how to break down a PRD into an actionable task list. Shall I proceed?"
2.  **Wait for Confirmation:** Do not proceed without user confirmation.
3.  **Generate the File:** Upon confirmation, create `.cursor/rules/generate-tasks.mdc` with the exact content below.

    ---
    **Content for `generate-tasks.mdc`**
    ```markdown
    # Rule: Generating a Task List from a PRD

    ## Goal
    To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD).

    ## Output
    - **Format:** Markdown (`.md`)
    - **Location:** `tasks/`
    - **Filename:** `tasks-[prd-file-name].md`

    ## Process
    1. **Receive PRD Reference:** User points to a PRD file.
    2. **Analyze PRD:** Read and understand the PRD.
    3. **Phase 1: Generate Parent Tasks:** Create high-level tasks. Present to the user and ask for 'Go' to proceed.
    4. **Wait for Confirmation:** Pause for user to say "Go".
    5. **Phase 2: Generate Sub-Tasks:** Break down parent tasks into detailed sub-tasks.
    6. **Identify Deliverables:** List all deliverables and mark the tasks that produce them.
    7. **Generate Final Output:** Combine everything into the final Markdown file.
    8. **Save Task List:** Save to `tasks/tasks-[prd-file-name].md`.

    ## Output Format
    ```markdown
    ## Deliverables

    - `deliverables/path/to/file1.ext` - Description
    - `deliverables/path/to/file2.ext` - Description

    ## Tasks (refer to @/rules/process-task-list before executing)

    - [ ] 1.0 Parent Task
      - [ ] 1.1 Sub-task
        - [ ] 1.1.1 Detailed sub-task
    ```

    ## Task Numbering Convention
    - Use X.Y.Z format.
    - Dependencies follow recency.

    ## Quality Assurance
    - Tasks must be verifiable, complete, and traceable.

    ## Interaction Model
    Requires a pause for user confirmation ("Go") before generating sub-tasks.
    
    ## Target Audience
    A **junior developer**.
    ```
    ---

### Step 4: Generate `process-task-list.mdc`

1.  **Inform and Prompt:** Inform the user: "The `generate-tasks.mdc` rule has been generated. The final step is to create `process-task-list.mdc`, which provides guidelines for executing the task list. Shall I proceed?"
2.  **Wait for Confirmation:** Do not proceed without user confirmation.
3.  **Generate the File:** Upon confirmation, create `.cursor/rules/process-task-list.mdc` with the exact content below.

    ---
    **Content for `process-task-list.mdc`**
    ```markdown
    # Rule: Task List Management

    This rule defines the lifecycle for processing each task to ensure consistency, clarity, and robust documentation.

    ## Task Lifecycle

    ### Phase 1: Task Initiation
    1.  **Review Context:** Before starting a task, review relevant project files (especially in `docs/`, `util/`, and `data/`) and the history in `docs/task-log.md` to gather full context.
    2.  **Propose Action:** Present a clear, actionable proposal for the current task.
    3.  **Format Output:** The proposal must be prefixed with the task number (e.g., "1.2: [Proposal]").

    ### Phase 2: Task Execution
    1.  **Await Confirmation:** **Do not proceed** without explicit user confirmation ("yes" or "y").
    2.  **Execute:** Perform the task, adhering to the following guidelines:
        *   **Best Practices:** Employ standard best practices for the task type.
        *   **Directory Standards:** Use the standard project directory locations (`util/` for scripts, `data/` for data, `docs/` for documentation, `archive/` for old files).
        *   **Security:** Ensure secrets are loaded from environment variables or a secure configuration system, never hardcoded.

    ### Phase 3: Task Completion
    1.  **Update Task List:** Mark the just-completed task as `[x]` in the task list file.
    2.  **Log Decision:** Append a record of the completed task to `docs/task-log.md`. The entry **must** include:
        *   An ISO-8601 timestamp.
        *   The task number.
        *   A one-sentence summary of the decision or output.
        *   A list of all files created or modified.
        *   The full user prompt that initiated the task, if it was a direct command that modified the workflow.
    3.  **Manage Parent Tasks:** If all sub-tasks under a parent are now complete, mark the parent task as `[x]` as well.
    4.  **Manage Scope:** Do not create new tasks or modify the scope of existing tasks without explicit user permission.
    5.  **Proceed:** Move to the next task.
    ```
    ---

### Step 5: Completion

1.  **Announce Completion:** Inform the user that all three rule files have been generated successfully.
2.  **Suggest Next Steps:** Suggest the user can now start a new project by invoking the `@/rules/create-prd.mdc` rule.

### Addendum: Interrupting the Process

This process is designed to be interactive and adaptable. At any point, the user can issue direct commands to the AI assistant to alter the workflow. This allows for real-time adjustments based on the user's insights or changing requirements.

These interruptions are not part of the formal, step-by-step process but are a core feature of the collaborative workflow.

**General Guidance for the AI:**
*   Periodically, after completing a significant step, remind the user of the interactive capabilities described here (e.g., "As a reminder, you can guide the process with direct commands like 'archive this file' or 'document this decision'.").

**Examples of Interrupt Commands:**

*   **To archive an artifact:** If a generated file like a PRD is not suitable, you can instruct the AI to move it to an archive directory.
    > *"throw current prd into archives"*
*   **To document a key decision:** To ensure important instructions are not lost, you can ask the AI to save your prompt for traceability. The AI will add it to the log entry for the current task.
    > *"document this prompt for tractability"*
*   **To change direction:** If you want to revise a goal or change the scope, you can state your new requirements directly. The AI will adapt its subsequent actions accordingly.

By using such commands, you can guide the AI more dynamically, ensuring the final output aligns perfectly with your vision.

{
  "totalHits": 80843,
  "limit": 10,
  "offset": 0,
  "results": [
    {
      "acceptedDate": "",
      "arxivId": "1708.06414",
      "authors": [
        {
          "name": "Attree, Sandeep"
        },
        {
          "name": "Patel, Sourav"
        },
        {
          "name": "Prakash, Mangal"
        },
        {
          "name": "Salapaka, Murti V."
        },
        {
          "name": "Talukdar, Saurav"
        }
      ],
      "citationCount": 0,
      "contributors": [
        "Sourav"
      ],
      "outputs": [
        "https://api.core.ac.uk/v3/outputs/467399917"
      ],
      "createdDate": "2017-10-17T02:36:57",
      "dataProviders": [
        {
          "id": 144,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/144",
          "logo": "https://api.core.ac.uk/data-providers/144/logo"
        },
        {
          "id": 4786,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/4786",
          "logo": "https://api.core.ac.uk/data-providers/4786/logo"
        }
      ],
      "depositedDate": "",
      "abstract": "Greater penetration of Distributed Energy Resources (DERs) in power networks\nrequires coordination strategies that allow for self-adjustment of\ncontributions in a network of DERs, owing to variability in generation and\ndemand. In this article, a distributed scheme is proposed that enables a DER in\na network to arrive at viable power reference commands that satisfies the DERs\nlocal constraints on its generation and loads it has to service, while, the\naggregated behavior of multiple DERs in the network and their respective loads\nmeet the ancillary services demanded by the grid. The Net-load Management\nsystem for a single unit is referred to as the Local Inverter System (LIS) in\nthis article . A distinguishing feature of the proposed consensus based\nsolution is the distributed finite time termination of the algorithm that\nallows each LIS unit in the network to determine power reference commands in\nthe presence of communication delays in a distributed manner. The proposed\nscheme allows prioritization of Renewable Energy Sources (RES) in the network\nand also enables auto-adjustment of contributions from LIS units with lower\npriority resources (non-RES). The methods are validated using\nhardware-in-the-loop simulations with Raspberry PI devices as distributed\ncontrol units, implementing the proposed distributed algorithm and responsible\nfor determining and dispatching realtime power reference commands to simulated\npower electronics interface emulating LIS units for demand response.Comment: 7 pages, 11 Figures, IEEE International Conference on Smart Grid\n  Communication",
      "documentType": "research",
      "doi": "10.1109/smartgridcomm.2017.8340735",
      "downloadUrl": "http://arxiv.org/abs/1708.06414",
      "fieldOfStudy": null,
      "fullText": "Distributed Apportioning in a Power Network for\nproviding Demand Response Services\nSourav Patel, Sandeep Attree, Saurav Talukdar, Mangal Prakash, Murti V. Salapaka\nDepartment of Electrical and Computer Engineering\nUniversity of Minnesota\n{patel292, attree002, taluk005, praka027, murtis}@umn.edu\nAbstract\u2014Greater penetration of Distributed Energy Re-\nsources (DERs) in power networks requires coordination strate-\ngies that allow for self-adjustment of contributions in a network\nof DERs, owing to variability in generation and demand. In this\narticle, a distributed scheme is proposed that enables a DER in\na network to arrive at viable power reference commands that\nsatisfies the DERs local constraints on its generation and loads it\nhas to service, while, the aggregated behavior of multiple DERs in\nthe network and their respective loads meet the ancillary services\ndemanded by the grid. The Net-load Management system for a\nsingle unit is referred to as the Local Inverter System (LIS) in this\narticle . A distinguishing feature of the proposed consensus based\nsolution is the distributed finite time termination of the algorithm\nthat allows each LIS unit in the network to determine power\nreference commands in the presence of communication delays in a\ndistributed manner. The proposed scheme allows prioritization of\nRenewable Energy Sources (RES) in the network and also enables\nauto-adjustment of contributions from LIS units with lower\npriority resources (non-RES). The methods are validated using\nhardware-in-the-loop simulations with Raspberry PI devices as\ndistributed control units, implementing the proposed distributed\nalgorithm and responsible for determining and dispatching real-\ntime power reference commands to simulated power electronics\ninterface emulating LIS units for demand response.\n1. INTRODUCTION\nThe existing power grid network is in the process of tran-\nsitioning from a framework, where conventional large power\nplants generate at one end while loads consume at the other,\ntowards integration of large number of smaller distributed\ngeneration (DG) units scattered throughout the network to\nprovide ancillary services and support the power grid [1], [2],\n[3]. The coordination of multiple distributed generation units\npresents significant challenges. [4] and [5] provide a review of\nworks that have employed a centralized approach to solve the\nproblem of aggregating and coordinating Distributed Energy\nResources (DERs), where a secondary centralized controller\ndispatches commands to DERs and requires information from\nall of the DERs, in many cases is not tenable. A distributed\nmethod for grid ancillary services has a number of advantages\nover centralized architecture as enumerated below:\n1) Distributed co-ordination is achieved using only local\ncomputations (which reduces communication overheads\nand congestion) pertaining only to the neighborhood of\nthe DER.\n2) Distributed coordination facilitates \u2018plug and play\u2019 ca-\npability, where a new DER that needs to connect to\nthe network requires communication only to its nearest\navailable DER.\n3) Distributed architecture is resilient to failures as any\nparticular node failure does not lead to failure of the\nentire network.\nThe objective of this article is to meet the grid ancillary\ndemand (global objective) by using an aggregation of DERs\nforming a network while respecting their local generation and\ndemand constraints in a distributed manner. In this regard, we\npropose a distributed resource apportioning framework that\nis suitable for real-time implementation. We envision the use\nof ultra low-cost computing devices like Raspberry Pi (R-\nPi) acting as control and communication agents in the DER\nnetwork. The wireless communication channel between R-\nPis suffers from time varying (stochastic) delays, which for\npractical purposes can be considered to be bounded (see Figure\n5(b)). The distributed resource apportioning solution proposed\nhere is robust to the presence of bounded communication\ndelays between the DERs\u2019 communication devices.\nRatio consensus algorithm for distributed coordination of\nDERs to meet the ancillary service demand is presented in [6].\nThe ratio consensus algorithm is used to compute the power\nreference commands for the DERs based on their generation\ncapacities. However, the convergence of ratio consensus\nto the power reference command values is asymptotic in\nnature and hence, unsuitable for real time implementation.\nTo circumvent this issue, a distributed finite time termination\nof ratio consensus is presented in [7], which builds on ideas\npresented in [6] and [8] for frequency regulation in a network\nof islanded AC micro grids. However, none of the works\ndiscussed above address the issue of communication delays\nin ratio consensus and the method for distributed termination\nis not present. Distributed finite time termination of ratio\nconsensus in the presence of bounded delays is presented in\n[9] but it does not adhere to distributed resource apportioning\nand coordination of DERs in the presence of communication\ndelays. Figure 1 shows experimental results for implementing\nratio consensus algorithm on a 5 node network for averaging\nof initial values without accounting for any communication\ndelays. Ignoring communication delays results in a converged\nvalue of 225, that is, an error of 43.75% from the true average\nof 400. This motivates the need to address the challenges\nof communication delays for successful implementation of\ndistributed consensus algorithms for real-time applications\nsuch as power networks. Furthermore, the power network\nrelies on a number of measurements and communicating\nthese measurements among control units for purposes of\nar\nX\niv\n:1\n70\n8.\n06\n41\n4v\n1 \n [c\ns.S\nY]\n  2\n1 A\nug\n 20\n17\n0 10 20 30 40\nNumber of iterations\n0\n200\n400\n600\n800\n1000\nAg\nent\n va\nlue\nAgent 1\nAgent 2\nAgent 3\nAgent 4\nAgent 5\nAverage\n(a) (b)\nFig. 1. (a) 5 node network with initial conditions, (b) experimental\nresults for the 5 node network when communication delays are not\nconsidered converge at a value different than the true average.\nFig. 2. Residential scale LIS unit with generation sources and local\nloads\neffective control [10]. Ignoring communication delays could\nresult in a destabilizing effect on the entire system or any\npart thereof; hence, it is important that communication delays\nare taken care of for meeting performance specifications.\nIn this article we present a distributed scheme for apportion-\ning the share of resources that a DER has to provide toward\nmeeting a global demand while satisfying local load demands.\nThe effectiveness of the algorithm is demonstrated by execut-\ning the algorithm on real devices (Raspberry Pis) where the\npower reference commands, obtained from the termination of\nratio consensus, are implemented in a hardware in the loop\nsimulation with Simulink. We use a number of basic notions\nfrom graph theory and linear algebra which are essential for\nthe subsequent developments. Detailed description of these\nnotions are available in [11] and [12].\nIn the next section we provide an overview of the Local\nInverter System (LIS), the associated network topology as well\nas the resource apportioning problem.\n2. LOCAL INVERTER SYSTEMS\nA. System Topology\nA residential level local inverter system (Figure 2) consists\nof an array of distributed generation sources (such as PV, EV,\nbattery) interfaced with DC-DC converters, DC Link Capacitor\nand DC-AC inverters to serve local AC loads. Utility scale\nLIS unit consists of an utility scale inverter with a PV array\nto meet ancillary demand services of the grid and/or a network\nof residential LIS units. The output of an LIS unit is connected\nthrough a point of common coupling (PCC) to other LIS units\nin a peer-to-peer microgrid or to the grid through an aggregator\n(described later) when in grid-connected mode.\nFig. 3. (a) Bidirectional DC-DC Converter realizations for DERs in a\nResidential LIS unit where q(t) is the desired duty ratio input, (b) A single\nLIS unit with N DERs implementing power-voltage droop control and inner-\ncontrol loops for voltage regulation and load sharing.\nFig. 4. Aggregator injecting grid ancillary demand \u03c1d at node LIS 2 in a\n6-node LIS network.\nConsider a single LIS unit with N DERs connected in\nparallel. A power-voltage droop control is implemented for\neach DC-DC converter unit as described in [13] and extended\nto the parallel converter system of Figure 3. The Power output\nof jth DC-DC converter, Pj , is compared against a desired\nreference power output set point, P \u2217j , demanded from the j\nth\nDER. A suitable droop coefficient \u03b7j is chosen that generates\nvoltage reference set point Vrefj according to equation (1) for\nthe inner loop controller. Thus,\nVrefj = V\n\u2217 \u2212 \u03b7j(Pj \u2212 P \u2217j ). (1)\nThe inner-loop controller consists of a voltage controller\nloop that generates a current reference signal irefj and a fast\ncurrent controller loop for voltage regulation of the jth DC-DC\nConverter. An extensive design of such inner-loop controller\nis proposed in [14] that implements a decentralized control ar-\nchitecture for load sharing among multiple parallel converters\nsimilar to the topology proposed here. The converter devices\nare assumed to be lossless in this article. The reactive power\nflow is assumed to be zero in the network and transmission\nlines are considered to be lossless.\nB. Network of LIS units\nAn Aggregator as shown in Figure 4 is an entity that injects\nthe grid ancillary demand into the network of LIS units, which\nthen becomes the global objective of the network. Consider a\nnetwork of I = {1, 2, ..., n} LIS units, where, the jth LIS unit\nhas Ej DERs and Lj loads. The generation capacity of the\njth LIS unit, pijg :=\n\u2211Ej\nm=1 pi\nj\ngm , where, pi\nj\ngm is the generation\ncapacity of the mth DER in the jth LIS unit. The local load\ndemand of the jth LIS unit, pijl :=\n\u2211Lj\nm=1 pi\nj\nlm\n, where, pijlm is\nthe demand of the mth load in the jth LIS unit. At a given\ninstant, the jth LIS unit is said to have a net reserve Rj , where,\nRj =\nEj\u2211\nm=1\npijgm \u2212\nLj\u2211\nm=1\npijlm for all j = 1, 2, ..., n. (2)\nIf the net reserve Rj > 0, LIS unit j behaves as a network\nsource otherwise it is a network load. In this article, we assume\nall LIS units act as sources to meet the grid demand \u03c1d;\nextending the resource apportioning framework to the case\nwhere there is a mix of source and load LIS units is a simple\nextension.\nThe LIS units communicate with each other as dictated by\nthe network topology through wireless channels. This com-\nmunication link is represented as a bidirectional edge in the\nnetwork and results in an undirected graph. Delays are inherent\nbecause of the presence of wireless communication channels\nbetween control units of LIS units, and are assumed to be fixed\nand uniformly bounded for simplicity of presentation and the\nHIL validation is for the stochastic but bounded delay case.\nC. Resource Apportioning Problem\nThe network of LIS units can be viewed as a multi agent\nsystem with the agents interacting with their neighbors over\na communication network. Each LIS unit is considered as\na node and each communication link between LIS units is\nconsidered as an undirected edge in a graph G = (V,E),\nwhere, V denotes the set of nodes and E denotes the set of\nedges. The central aggregator requests that a total resource \u03c1d\nbe supplied, which has to be collectively provided by the n LIS\nunits, while respecting their individual resource constraints.\nLet pi\u2217i be the amount of resource supplied by the i\nth LIS\nunit, where pimini and pi\nmax\ni represent the minimum and the the\nmaximum amount of power ith agent can supply respectively.\nThe objective is to determine {pi\u2217i }i\u2208V such that,\npimini \u2264 pi\u2217i \u2264 pimaxi and\n\u2211\ni\u2208V\npi\u2217i = \u03c1d.\nWe refer to the problem of determining pi\u2217i respecting the\nabove constraints as the resource apportioning problem. We\nassume that\n\u2211n\ni=1 pi\nmin\ni \u2264 \u03c1d \u2264\n\u2211n\ni=1 pi\nmax\ni holds to ensure\nfeasibility of the resource allocation problem. Let \u03c4ij denote\nthe delay in the communication link from node j to node i. The\ncommunication delay in each link is assumed to be constant\nand bounded by \u03c4\u00af . We present below an approach which meets\nthe demand \u03c1d asymptotically while respecting the constraints\nof each agent via a distributed iterative algorithm where each\nnode updates its state based on its current state and the state\nof its neighbors.\n3. RESOURCE APPORTIONING USING DISTRIBUTED\nAVERAGING\nThe resource apportioning problem in the presence of\nbounded communication delays between LIS units can be\nsolved by using average consensus protocols which incor-\nporates delays. We first summarize below the distributed\naveraging protocol in presence of bounded delays as presented\nin [15].\nA. Distributed Averaging Protocol\nA1. Let pij denote the weight on the information coming\nfrom node j to node i. Weight matrix [P ](i, j) = pij\nassociated with the undirected graph is primitive and\ncolumn stochastic.\nA2. The undirected graph G = (V,E) is connected.\nA3. Any node i \u2208 V in the undirected graph G = (V,E)\nhas access to its own value at any instant k without any\ndelay.\nA4. The delay on the edge from node j to i, \u03c4ij is bounded by\nsome constant \u03c4\u00af , for all i, j \u2208 V , that is, \u03c4ij \u2264 \u03c4\u00af <\u221e.\nUnder the assumptions A1-A4 consider the iterations,\nxi(k + 1) = piixi(k) +\n\u2211\nj\u2208Ni\u2212\npijxj(k \u2212 \u03c4ij), (3)\nwi(k + 1) = piiwi(k) +\n\u2211\nj\u2208Ni\u2212\npijwj(k \u2212 \u03c4ij), (4)\nwith the initial conditions be given by x(0) =\n[x1(0) x2(0)...xn(0)]\nT and w(0) = 1n where 1n is a\nn\u00d7 1 column vector of all ones. Then the ratio of xi(k) and\nwi(k) asymptotically converges to lim\nk\u2192\u221e\n\u00b5j(k) =\n\u2211n\ni=1xi(0)\nn\nfor all j = 1, ..., n, where \u00b5j(k) := xj(k)/wj(k) [15].\nRemark 1. The weight matrix being column stochastic en-\nables the weights pij to be chosen in a distributed manner. A\nsimple scheme for choosing the weights are pji = 1D+i +1\nfor\nall j \u2208 {N+i \u222a i}.\nNow we use the distributed averaging based on (3) and (4)\nfor distributed resource allocation. Suppose that the resource\ndemanding authority, which is referred to as the aggregator\ncan communicate to p agents out of n (1 \u2264 p \u2264 n) and\nsend across its demand \u03c1d. The nodes to which the aggregator\nrelays its demand are called demand circulation nodes and the\nset of such nodes is denoted by Nd. Suppose that each node\nhas three states, [ri(k), si(k), ti(k)]T such that,\nri(k + 1) = piiri(k) +\n\u2211\nj\u2208N\u2212i\npijrj(k \u2212 \u03c4ij), (5)\nri(0) =\n\u03c1d\np\n\u2212 pimini if i \u2208 Nd or\nri(0) = \u2212pimini if i 6\u2208 Nd,\nsi(k + 1) = piisi(k) +\n\u2211\nj\u2208N\u2212i\npijsj(k \u2212 \u03c4ij), (6)\nsi(0) = pi\nmax\ni \u2212 pimini , for all i \u2208 V,\nti(k + 1) = piiti(k) +\n\u2211\nj\u2208N\u2212i\npijtj(k \u2212 \u03c4ij), (7)\nti(0) = 1, for all i \u2208 V,\nwhere, pimaxi and pi\nmin\ni denote the maximum and minimum\npower availability from the ith LIS unit. It follows from\nthe above discussion that, lim\nk\u2192\u221e\nri(k)\nti(k)\n=\n\u03c1d \u2212\nn\u2211\nj=1\npiminj\nn\n, and\nlim\nk\u2192\u221e\nsi(k)\nti(k)\n=\nn\u2211\nj=1\n(pimaxj \u2212 piminj )\nn\n, for all i \u2208 V.\nTheorem 3.1. Let the power reference command for the ith\nLIS unit be defined as, pi\u2217i := pi\nmin\ni + lim\nk\u2192\u221e\nri(k)\nsi(k)\n(pimaxi \u2212\npimini ). Then\nn\u2211\ni=1\npi\u2217i = \u03c1d and pi\nmin\ni \u2264 pi\u2217i \u2264 pimaxi for all\ni \u2208 V .\nProof. It follows from the above discussion that,\npi\u2217i = pi\nmin\ni +\n\u03c1d \u2212\nn\u2211\nj=1\npiminj\nn\u2211\nj=1\n(pimaxj \u2212 piminj )\n(pimaxi \u2212 pimini ), for all i \u2208 V.\nIt is clear from the feasibility of demand \u03c1d that, pimini \u2264\npi\u2217i \u2264 pimaxi . Moreover, it follows that,\nn\u2211\ni=1\npi\u2217i = \u03c1d.\nThis completes the proof.\nTheorem 3.1 provides a distributed protocol to allocate\nresources to meet the demand \u03c1d. It is an extension of the ratio\nconsensus approach for resource apportioning presented in [6]\nto incorporate communication delays between the agents. It\nshould be noted that the result in Theorem 3.1 is asymp-\ntotic. Thus, the agents in principle keep updating their states\n(using (5),(6),(7)) forever without termination, which makes\nit untenable from a real time implementation perspective.\nOne needs to terminate the computations at each node in a\ndistributed manner when the sum of the contribution from\neach node is \u2018close\u2019 to \u03c1d. This problem of distributed finite\ntime termination of resource apportioning is dealt in the next\nsection.\n4. DISTRIBUTED FINITE TIME TERMINATION OF\nRESOURCE APPORTIONING\nIn this section, first results based on the update rules (3) and\n(4) are established followed by the definitions and convergence\nof Max-Min consensus algorithms. Subsequently, a finite-time\ntermination criterion for average consensus is developed based\non these results. Let us consider the maximum and minimum\nvalue of the ratio of consensus protocols given by (1) and (4)\nover all nodes within a horizon \u03c4\u00af from any time instant k be\ngiven by,\nM(k) := max\nj\u2208V\nr={0,1,2,...,\u03c4\u00af}\nxj(k \u2212 r)\nwj(k \u2212 r) , wj(k \u2212 r) 6= 0, j \u2208 V (8)\nm(k) := min\nj\u2208V\nr={0,1,2,...,\u03c4\u00af}\nxj(k \u2212 r)\nwj(k \u2212 r) , wj(k \u2212 r) 6= 0, j \u2208 V (9)\nRemark 2. It is shown in [9] that {M(k)}k\u2208N and\n{m(k)}k\u2208N converges to\n\u2211n\nj=1 xj(0)\nn .\nRemark 3. Given that wj(0) = 1 for all j \u2208 V and P is a\nnon-negative matrix, wj(k) 6= 0 for all k \u2208 N.\nNext, we introduce the Maximum Consensus and Minimum\nConsensus protocols.\nA. Maximum and Minimum Consensus Protocols [16]\nMaximum Consensus Protocol (MXP) computes the\nmaximum of the given initial node conditions z(0) =\n[z1(0) z2(0)....zn(0)]\nT in a distributed manner. It takes z(0)\nas an input and generates a sequence of node values based on\nthe following update rule for node i,\nzi(k\u03c4\u00af + q) = zi(k\u03c4\u00af + q \u2212 1), q \u2208 {k + 1, k + 2, \u00b7 \u00b7 \u00b7 , k + \u03c4\u00af},\nzi((k + 1)(\u03c4\u00af + 1)) =\nmax\nj\u2208N\u2212i \u222a{i}\nzj((k + 1)(\u03c4\u00af + 1)\u2212 (\u03c4ij + 1)) for k \u2265 0. (10)\nThe Minimum Consensus Protocol (MNP) computes the\nminimum of the given initial node conditions y(0) =\n[y1(0) y2(0)....yn(0)]\nT in a distributed manner. It takes y(0) as\nan input and generates a sequence of node values y(k) based\non the following update rule:\nyi(k\u03c4\u00af + q) = yi(k\u03c4\u00af + q \u2212 1), q \u2208 {k + 1, k + 2, \u00b7 \u00b7 \u00b7 , k + \u03c4\u00af},\nyi((k + 1)(\u03c4\u00af + 1)) =\nmin\nj\u2208N\u2212i \u222a{i}\nyj((k + 1)(\u03c4\u00af + 1)\u2212 (\u03c4ij + 1)), for k \u2265 0. (11)\nRemark 4. MXP and MNP converge to the maximum and\nminimum of the initial conditions respectively in D(1 + \u03c4\u00af)\niterations, where D is the diameter of the network [16].\nB. Distributed Finite Time Termination of Resource Appor-\ntioning\nIn this section, we propose an algorithm using the MXP-\nMNP for stopping the ratio consensus protocol in finite time\nbased on a user-specified threshold \u03c1. This framework first\nappeared in [7] as an extension of the Max-Min consensus\nbased finite time termination of averaging consensus [8].\nHowever, [7], [8] do not consider any communication de-\nlays in the network and [8] is based on the weight matrix\nP being doubly stochastic thereby restrictive in the sense\nof distributed selection of the edge weights. A MXP-MNP\nframework for finite time termination of ratio consensus ((3)\nand (4)) with uniformly bounded communication delays and\ncolumn stochastic weight matrix is reported in [9]. We apply\nthe results in [9] for distributed finite time termination of the\nnumerator and denominator ratio consensus protocol as shown\nin Algorithm 1. The initial conditions for the MXP and MNP\nprotocols are set as the initial ratio held by the nodes, that\nis, zi(0) = ri(0)/si(0) and yi(0) = ri(0)/si(0). The MXP\nand MNP protocols at each node i \u2208 V are re-initialized at\nk = \u03b8(D(1 + \u03c4\u00af) + \u03c4\u00af), where \u03b8 = 1, 2, ..., with zi(k) =\nri(k)\nsi(k)\nand yi(k) =\nri(k)\nsi(k)\n. Given a threshold \u03c1 > 0, it is proven in\n[9] that Algorithm 1 terminates in finite number of iterations.\nNote that {ti}i\u2208V iterations were used for analysis only and\nis not required to be maintained at the nodes as its effect is\ncancelled.\nAlgorithm 1: Distributed finite-time termination of re-\nsource apportioning in presence of communication delays\n(at each node i \u2208 V )\nRepeat:\nInput:\npimini , pi\nmax\ni , \u03c1d, p\n\u03c1, \u03c4\u00af , D\nInitialize:\nri(0) =\n\u03c1d\np \u2212pimini , if i \u2208 Nd, else ri(0) = \u2212pimini ;\nsi(0) = pi\nmax\ni \u2212 pimini ;\nk := 0;\nzi := ri(0)/si(0);\nyi := ri(0)/si(0);\nl := 1;\n\u03b8 := 1;\nRepeat:\n/* ratio consensus updates of node\ni given by (3) and (4) */\nri(k + 1) := piiri(k) +\n\u2211\nj\u000fN\u2212i\npijrj(k \u2212 \u03c4ij);\nsi(k + 1) := piisi(k) +\n\u2211\nj\u000fN\u2212i\npijsj(k \u2212 \u03c4ij);\nif k + 1 = l(1 + \u03c4\u00af) then\n/* maximum and minimum\nconsensus updates given by\n(10) and (11) for each node\ni \u2208 V */\nzi := max\nj\u2208N\u2212i \u222a{i}\nzj ;\nyi := min\nj\u2208N\u2212i \u222a{i}\nyj ;\nl := l + 1\nend\nemit: ri(k + 1), si(k + 1), yi and zi\nif k + 1 = \u03b8(D(1 + \u03c4\u00af) + \u03c4\u00af) then\nif zi \u2212 yi < \u03c1 then\nr\u2217i = ri(k + 1);\ns\u2217i = si(k + 1);\nbreak ; // stop ri, si, yi and zi\nupdates\nelse\nzi :=\nri(\u03b8(D(1+ \u03c4\u00af)+ \u03c4\u00af))/si(\u03b8(D(1+ \u03c4\u00af)+ \u03c4\u00af));\nyi :=\nri(\u03b8(D(1+ \u03c4\u00af)+ \u03c4\u00af))/si(\u03b8(D(1+ \u03c4\u00af)+ \u03c4\u00af));\n\u03b8 := \u03b8 + 1;\nend\nend\nk = k + 1\npi\u2217i := pi\nmin\ni +\nr\u2217i\ns\u2217i\n(pimaxi \u2212 pimini ) // power\nreference command for node i \u2208 V\nRemark 5. The MXP and MNP iterations can be used to\ncompute \u03b2i(\u03b8) in a distributed manner at each node. Algorithm\n1 presented below uses \u03b2i(\u03b8) < \u03c1 as a stopping criteria\nfor termination of (5) and (6). It computes the approxi-\nmate limiting ratio r\u2217i /s\n\u2217\ni (each node converges \u2018close\u2019 to\nlim\nk\u2192\u221e\nri(k)/si(k)) in a distributed manner. The only global\nparameters needed by each node are upper bounds on both\nthe maximum delay and diameter of the network.\n5. RESULTS\nHardware in the loop (HIL) simulations are performed on a\nnetwork of 6 LIS units as shown in Figure 4 for demonstrating\nthe applicability of the algorithm presented. Each LIS unit\nis equipped with a Raspberry-PI 3 (Model B V1.2) (see\nFigure 5 (a)) [17] module for control and communication\nwith other LIS units. R-PI 3 implements 802.11n Wireless\nstandard that allows for a larger range of communication with\nfaster data transmission speeds [18]. LIS units communicate\nin their respective neighborhoods (Figure 4) wirelessly. Figure\n5 (b) shows pairwise communication delays experienced by\nR-PI units. These delays are due to inherent uncertainties in\nthe communication channel as well as those modeled for the\nexperiment.\nIf an LIS unit has RES, then it has a time dependent gen-\neration profile associated with it because of the variability in\nenvironmental parameters that impact generation, otherwise a\nfixed maximum and minimum generation capacity is assumed.\nFor the considered topology as depicted in Figure 4, D = 3,\n\u03c4\u00af = 3 and the weight matrix P (column stochastic) is chosen\ndistributively as described in Remark 1. Let the grid ancillary\ndemand, \u03c1d be 7000 W. In this simulation, LIS 2 is chosen to\nbe a RES, which is a PV array operating in Maximum Power\nPoint Tracking (MPPT) mode [19] with a suitable profile\nselected to reflect a normal sunny day as defined in Table I.\nAll other LIS units are energy sources with the maximum\nand minimum capacity as listed in Table II. The DC Link\nBus voltage reference command is set to 300 V. Switching\nmodels of DC-DC and DC-AC Converters [20] are developed\nin Simulink, which execute the real time power reference\ncommands received through Serial Communication Interface\n(SCI) from Raspberry PI modules [21]. In this study, LIS 2 is\nthe demand circulation node. The prioritization of RES is done\nby setting the capacities of LIS 2 as, pimin = PMPPT (t)\u2212 \u000f\nand pimax = PMPPT (t), for all time t, where \u000f is a small\npositive number and PMPPT is the output power of PV\nobtained by implementing an MPPT algorithm at all instants.\nThe capacities of all non-RES LIS units are listed in Table II.\nAgents are initialized as discussed in (5), (6), (7) with p = 1.\nTABLE I\nPV profile for experiment\nTime(Hrs) Power-\nOutput(kW)\n0 \u2264 t < 3 ramps up to 1kW\n3 \u2264 t < 5 1kW (Constant)\n5 \u2264 t \u2264 8 ramps down to 0\nAlgorithm 1 is executed in a distributed manner on each R-\nPI unit and a power reference command is generated approx-\nimately at every second. Delays are variable and empirically\ndelays as high as 3000 ms between R-PI units are observed\nTABLE II\nLIS Parameters used for validation\nUnit pimin(W ) pimax(W )\nLIS 1 0 1500\nLIS 2 (PV) Profile Min(t) Profile Max(t)\nLIS 3 0 1000\nLIS 4 0 1200\nLIS 5 0 1500\nLIS 6 0 2000\nLIS 1 LIS 2 LIS 3 LIS 4 LIS 5 LIS 6\n1000\n1500\n2000\n2500\n3000\nD\nel\nay\n(in\n m\ns)\n(a) (b)\nFig. 5. (a) Raspberry PI units communicating wirelessly to their\nrespective neighbors, (b) Pairwise latency in communication channels\nbetween R-PI units and their respective neighbors.\n(see Figure 5(b)). Power reference commands are generated\nupon termination of Algorithm 1 at each R-PI unit based\non the user-specified threshold \u03c1. Figure 6 shows successive\nratio consensus cycles terminated using Algorithm 1 with\neach cycle taking about 30 iterations (Figure 7) for finite\ntime termination within the given threshold. Power reference\ncommands are then dispatched by each R-PI agent through\nSCI at every minute to the power electronics interface of the\nrespective LIS unit in Simulink. The LIS units inject power\ninto the network by following the reference power commands\nas shown in Figure 8. Figure 9 and Figure 10 demonstrate RES\nprioritization of LIS 2 and auto-adjustment of contributions\nfrom non-RES LIS units. It is evident that as more (less)\nenergy from RES LIS 2 becomes available in the network, in\norder to prioritize and consume all available solar energy from\nLIS 2, the non-RES units (LIS 1, 3, 4, 5 and 6) auto-adjust\nto increase (decrease) their power injection into the network\nbased on the ratio of their capacities. A total AC power output\nof the six LIS units is 7000 W \u00b1150 W (not exactly 7000 W\ndue to termination of the algorithm based on the threshold)\nat all instants as shown in Figure 11 which is equal to the\nancillary services demanded by the grid. The DC Link voltages\n0 1 2 3\nNumber of Cycles\n0\n1\n2\n3\n4\n5\nCo\nns\nen\nsu\ns \nra\ntio\n v\nal\nue\nAgent 1 Agent 2 Agent 3 Agent 4 Agent 5 Agent 6\nFig. 6. Successive cycles of R-PI agents showing convergence of\nconsensus ratio in finite time\n30 150 300 450 600 750\nConvergence Cycle\n0.8\n0.85\n0.9\n0.95\n1\nR\nat\nio\n V\nal\nue\nFig. 7. Converged ratio values of Non-RES LIS units demonstrating\nadjustment of contributions allowing RES penetration in the network\nwith higher priority.\n1 2 3 4 5 6 7 8\nTime (Hrs)\n0\n1000\n2000\nAg\nen\nt u\npd\nat\ne \nva\nlu\nes\n (W\n)\nAgent 1 Agent 2 Agent 3 Agent 4 Agent 5 Agent 6\nFig. 8. Updated pi\u2217 values for each R-PI agent after convergence\nof consensus iterations dispatched as Reference Power Commands to\nLIS unit.\nof all LIS units is observed to be within the safe limits at all\ntime.\nIn summary, we applied the algorithm proposed for coordi-\nnation of LIS units on hardware that communicate through\nwireless channels that suffers from uncertainties, such as\ndelays, to meet the grid demand. Thus, we now have a\ncoordination algorithm which is distributed and suitable for\nreal time application.\n6. CONCLUSION\nThis paper extends the results of finite-time termination\nof ratio consensus algorithm to an application of distributed\napportioning of load in the presence of communication delays\nfor providing demand response services requested by the\ngrid. The most notable result of this paper is the completely\nFig. 9. DC Power Output of each LIS unit and RES Prioritization of LIS 2\nby self-adjustment of contributions from non-RES LIS units.\nFig. 10. AC Side Power Composition of LIS Units\nFig. 11. Total power output from LIS units delivered in response to\nancillary services requested by the grid.\ndistributed nature of the resource apportioning algorithm,\nfrom selection of communication weights to the finite time\ntermination criteria. This framework enables unique and si-\nmultaneous, yet local and independent realization of power\nreference commands by the distributed control units and a\nsubsequent coordinated action. The algorithm proposed in this\npaper also enables prioritization of Renewable Energy Sources\navailable in the power network and auto-adjustment of energy\ncontributions from other non-RES units to allow for increased\nrenewable penetration. The proposed algorithm also performs\nefficiently with time-varying ancillary service requests of the\ngrid within the limits of convergence of each consensus cycle.\nThe efficacy of the algorithm is demonstrated by hardware-in-\nthe-loop experiments using a network of Raspberry Pi agents\nas distributed control units, which dispatch the power reference\ncommands generated by the resource apportioning algorithm\nto the local power electronics interface.\nACKNOWLEDGMENT\nThe authors acknowledge Advanced Research Projects\nAgency-Energy (ARPA-E) for supporting this research through\nthe project titled \u2018A Robust Distributed Framework for Flexible\nPower Grids\u2019 via grant no. DE-AR000071 and Xcel Energy\u2019s\nRenewable Development Fund.\nREFERENCES\n[1] R. H. Lasseter and P. Piagi, \u201cMicrogrid: A conceptual solution,\u201d in Proc.\nPower Electronics Specialists Conf, vol. Vol. 6, pp. 4285\u20134290, Aachen,\nGermany, Jun 2004.\n[2] G. Joos, B. T. Ooi, D. McGillis, F. D. Galiana, and R. Marceau, \u201cThe\npotential of distributed generation to provide ancillary services,\u201d Proc.\nIEEE Power Engineering Society Summer Meeting, vol. Vol. 3, pp.\n1762\u20131767, Seattle, 2000.\n[3] G. Pepermans, J. Driesen, D. Haeseldonckx, R. Belmans, and\nW. D\u2019haeseleer, \u201cDistributed generation: definition, benefits and issues,\u201d\nEnergy Policy, vol. 33, pp. 787\u2013798, April 2005.\n[4] E. Unamuno and J. A. Barrena, \u201cHybrid ac/dc microgrids part ii: Review\nand classification of control strategies,\u201d Renewable and Sustainable\nEnergy Reviews, vol. 52, pp. 1123\u20131134, 2015.\n[5] E. Planas, A. Gil-de Muro, J. Andreu, I. Kortabarria, and I. Martinez de\nAlegria, \u201cGeneral aspects, hierarchical controls and droop methods\nin microgrids: A review,\u201d Renewable and Sustainable Energy Review,\nvol. 17, pp. 147\u2013159, 2013.\n[6] A. D. Dominguez-Garcia and C. N. Hadjicostis, \u201cCoordination and con-\ntrol of distributed energy resources for provision of ancillary services,\u201d\nin Smart Grid Communications (SmartGridComm), 2010 First IEEE\nInternational Conference on. IEEE, 2010, pp. 537\u2013542.\n[7] S. T. Cady, A. D. Dom\u00ednguez-Garc\u00eda, and C. N. Hadjicostis, \u201cFinite-\ntime approximate consensus and its application to distributed frequency\nregulation in islanded ac microgrids,\u201d in System Sciences (HICSS), 2015\n48th Hawaii International Conference on. IEEE, 2015, pp. 2664\u20132670.\n[8] V. Yadav and M. V. Salapaka, \u201cDistributed protocol for determining\nwhen averaging consensus is reached,\u201d in 45th Annual Allerton Conf,\n2007, pp. 715\u2013720.\n[9] M. Prakash, S. Talukdar, S. Attree, S. Patel, and M. Salapaka, \u201cDis-\ntributed finite time termination of ratio consensus for averaging in the\npresence of delays,\u201d arXiv preprint arXiv:1704.08297, 2017.\n[10] J. W. Stahlhut, T. J. Browne, G. T. Heydt, and V. Vittal, \u201cLatency viewed\nas a stochastic process and its impact on wide area power system control\nsignals,\u201d IEEE Transactions on Power Systems, vol. 23, pp. 84\u201391, 2008.\n[11] R. Diestel, Graph theory {graduate texts in mathematics; 173}.\nSpringer-Verlag Berlin and Heidelberg GmbH & amp, 2000.\n[12] R. A. Horn and C. R. Johnson, Eds., Matrix Analysis. New York, NY,\nUSA: Cambridge University Press, 1986.\n[13] S. Salapaka, B. Johnson, B. Lundstrom, S. Kim, S. Collyer, and\nM. Salapaka, \u201cViability and analysis of implementing only voltage-\npower droop for parallel inverter systems,\u201d IEEE Conference on Decision\nand Control, vol. 53, no. 3, pp. 3246\u20133251, 2014.\n[14] M. Baranwal, S. Salapaka, and M. Salapaka, \u201cRobust decentralized\nvoltage control of dc-dc converters with applications to power sharing\nand ripple sharing,\u201d American Control Conference, pp. 7444\u20137449,\n2016.\n[15] C. N. Hadjicostis and T. Charalambous, \u201cAverage consensus in the\npresence of delays in directed graph topologies,\u201d IEEE Transactions\non Automatic Control, vol. 59, no. 3, pp. 763\u2013768, 2014.\n[16] M. Prakash, S. Talukdar, S. Attree, V. Yadav, and M. Salapaka, \u201cDis-\ntributed finite time termination of consensus in presence of delays,\u201d\nIEEE Transactions of Automatic Control (in review), (arXiv preprint\narXiv:1701.0002), 2016.\n[17] \u201cRaspberry pi 3 model b , https://www.raspberrypi.org/products/raspberry-\npi-3-model-b/.\u201d\n[18] M. J. Lee, J. Zheng, Y.-B. Ko, and D. M. Shrestha, \u201cEmerging standards\nfor wireless mesh technology,\u201d IEEE Wireless Communications, vol. 13,\nno. 2, pp. 56\u201363, 2006.\n[19] R. Faranda and S. Leva, \u201cEnergy comparison of mppt techniques for\npv systems,\u201d WSEAS transactions on power systems, vol. 3, no. 6, pp.\n446\u2013455, 2008.\n[20] N. Mohan and T. M. Undeland, Power electronics: converters, applica-\ntions, and design. John Wiley & Sons, 2007.\n[21] A. Kurniawan, Getting Started with Matlab Simulink and Raspberry Pi.\nPE Press, 2013.\n",
      "id": 44592086,
      "identifiers": [
        {
          "identifier": "93937478",
          "type": "CORE_ID"
        },
        {
          "identifier": "467399917",
          "type": "CORE_ID"
        },
        {
          "identifier": "oai:arxiv.org:1708.06414",
          "type": "OAI_ID"
        },
        {
          "identifier": "10.1109/smartgridcomm.2017.8340735",
          "type": "DOI"
        },
        {
          "identifier": "1708.06414",
          "type": "ARXIV_ID"
        }
      ],
      "title": "Distributed Apportioning in a Power Network for providing Demand\n  Response Services",
      "language": {
        "code": "en",
        "name": "English"
      },
      "magId": null,
      "oaiIds": [
        "oai:arxiv.org:1708.06414"
      ],
      "publishedDate": "2017-08-21T01:00:00",
      "publisher": "",
      "pubmedId": null,
      "references": [],
      "sourceFulltextUrls": [
        "http://arxiv.org/abs/1708.06414"
      ],
      "updatedDate": "2021-08-10T09:38:22",
      "yearPublished": 2017,
      "journals": [],
      "links": [
        {
          "type": "download",
          "url": "http://arxiv.org/abs/1708.06414"
        },
        {
          "type": "display",
          "url": "https://core.ac.uk/works/44592086"
        }
      ]
    },
    {
      "acceptedDate": "2005-11-19T00:00:00",
      "arxivId": null,
      "authors": [
        {
          "name": "Garijo Ayestaran, Mercedes"
        },
        {
          "name": "Gonz\u00e1lez Crist\u00f3bal, Jos\u00e9 Carlos"
        },
        {
          "name": "Iglesias Fernandez, Carlos Angel"
        },
        {
          "name": "Velasco P\u00e9rez, Juan Ram\u00f3n"
        }
      ],
      "citationCount": 0,
      "contributors": [
        "The Pennsylvania State University CiteSeerX Archives"
      ],
      "outputs": [
        "https://api.core.ac.uk/v3/outputs/148663569",
        "https://api.core.ac.uk/v3/outputs/24352868",
        "https://api.core.ac.uk/v3/outputs/12002063"
      ],
      "createdDate": "2013-07-17T17:16:15",
      "dataProviders": [
        {
          "id": 145,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/145",
          "logo": "https://api.core.ac.uk/data-providers/145/logo"
        },
        {
          "id": 1730,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/1730",
          "logo": "https://api.core.ac.uk/data-providers/1730/logo"
        },
        {
          "id": 2824,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/2824",
          "logo": "https://api.core.ac.uk/data-providers/2824/logo"
        },
        {
          "id": 431,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/431",
          "logo": "https://api.core.ac.uk/data-providers/431/logo"
        }
      ],
      "depositedDate": "1998-01-01T00:00:00",
      "abstract": "This article proposes an agent-oriented methodology called MAS-CommonKADS and develops a case study. This methodology extends the knowledge engineering methodology CommonKADSwith techniquesfrom objectoriented and protocol engineering methodologies. The methodology consists of the development of seven models: Agent Model, that describes the characteristics of each agent; Task Model, that describes the tasks that the agents carry out; Expertise Model, that describes the knowledge needed by the agents to achieve their goals; Organisation Model, that describes the structural relationships between agents (software agents and/or human agents); Coordination Model, that describes the dynamic relationships between software agents; Communication Model, that describes the dynamic relationships between human agents and their respective personal assistant software agents; and Design Model, that refines the previous models and determines the most suitable agent architecture for each agent, and the requirements of the agent network",
      "documentType": "research",
      "doi": "10.1007/bfb0026768",
      "downloadUrl": "https://core.ac.uk/download/148663569.pdf",
      "fieldOfStudy": "computer science",
      "fullText": "Analysis and Design of Multiagent Systems \nUsing MAS-CommonKADS* \nCarlos A. Iglesias , Mercedes Garijo , \nJos\u00e9 C. Gonz\u00e1lez and Juan R. Velasco \nAbstract. This article proposes an agent-oriented methodology called \nMAS-CommonKADS and develops a case study. This methodology extends the \nknowledge engineering methodology CommonKADSmth techniques from object-\noriented and protocol engineering methodologies. The methodology consists of \nthe development of seven models: Agent Model, that describes the characteristics \nof each agent; Task Model, that describes the tasks that the agents carry out; Ex-\npertise Model, that describes the knowledge needed by the agents to achieve their \ngoals; Organisation Model, that describes the structural relationships between \nagents (software agents and/or human agents); Coordination Model, that describes \nthe dynamic relationships between software agents; Communication Model, that \ndescribes the dynamic relationships between human agents and their respective \npersonal assistant software agents; and Design Model, that refines the previous \nmodels and determines the most suitable agent architecture for each agent, and \nthe requirements of the agent network. \n1 The MAS-CommonKADS methodology \nMAS-CommonKADS [13] extends CommonKADS [28], for multiagent systems (MAS) \nmodelling, adding techniques from object oriented (OO) methodologies such as Object \nModelling Technique (OMT) [26], Object Oriented Software Engineering (OOSE) [15] \nand Responsibility Driving Design (RDD) [31] and from protocol engineering for de-\nscribing the agent protocols, such as Specification and Description Language (SDL) [14] \nand Message Sequence Charts (MSC96) [25]). The methodology defines the following \nmodels: \n- Agent model (AM): specifies the agent characteristics: reasoning capabilities, skills \n(sensors/effectors), services, agent groups and hierarchies (both modelled in the \norganisation model). \n- Task model (TM): describes the tasks that the agents can carry out: goals, decom-\npositions, ingredients and problem-solving methods, etc. \n- Expertise model (EM): describes the knowledge needed by the agents to achieve \ntheir goals. \n- Organisation model (OM): describes the organisation into which the MAS is going \nto be introduced and the social organisation of the agent society. \n- Coordination model (CoM): describes the conversations between agents: their in-\nteractions, protocols and required capabilities. \n- Communication model (CM): details the human-software agent interactions, and \nthe human factors for developing these user interfaces. \n- Design model (DM): collects the previous models and consists of three submodels: \nnetwork design for designing the relevant aspects of the agent network infrastruc-\nture (required network, knowledge and telematic facilities); agent design for divid-\ning or composing the agents of the analysis, according to pragmatic criteria and \nselecting the most suitable agent architecture for each agent; ana platform design \nfor selecting the agent development platform for each agent architecture. \nThe application of the methodology consists of the development of the different \nmodels. Each model consists of constituents (the entities to be modelled) and relation-\nships between the constituents. A textual template is defined for each constituent in \norder to describe it. The states of the constituents describe their development: empty, \nidentified, described or validated. \nThe software process model of the methodology combines the risk-driven approach \nwith the component-based approach. The general process is risk driven, that is, in every \ncycle the states of the models to be reached are defined for reducing the perceived risks. \nWhen a state consists of identifying components, the developed components (agents, \nservices, knowledgebases, etc.) are candidates for reusing. \nIn order to illustrate the application of the methodology, we will develop a case \nstudy, called The Travel Agency. The problem consists of building a system that is \nconsulted by a user for booking a flight, and answers with the cheapest available flights \nwith lowest probability of being delayed. The system will be run by any company, and \nthe information of the flights will be available from the airlines. \n2 Conceptualisation \nDuring this phase we will carry out an elicitation task to obtain a preliminary description \nof the problem. This is carried out following a user-centered approach by determining \nsome use cases (scenarios) which can help us to understand informal requirements and \nto test the system. Use cases are described using OOSE notation and the interactions \nare formalised with MSC (Message Sequence Charts) [25, 24]. \nWe can identify one user role: the traveller, a person who wishes to travel. The \nfollowing information should be supplied: departure date (dd), arrival date (ad) and \n_^_^ _^^  \nA \nSecretary \nMSC Traveller \nRequest \nFig. 1. Use case diagram \ndestination (dest). Two scenarios are identified: the system answers with an available \nflight {numJiight) or with no available flight (and the cause). If there is no available \nflight, the user can change the flight data. The interaction between the user and the sys-\ntem is represented using the use case notation of OOSE [15] (Fig. 1, notation extended \nas explained in 3.1). The interactions of the use cases are formalised using MSC as \na notation (Fig. 2). In this figure two message interchange alternatives are combined \nwith the alternative (alt) operator. A basic MSC contains the description of the asyn-\nchronous communication between entities called instances, and has primitives for local \nactions, timers (set, reset and time-out), process creation, process stop, coregions, and \ninline operators expressions for composition of event structures (alternative, parallel \ncomposition, iteration, exception and optional regions). The purpose in this phase is to \nget an idea of the interactions, but they will be refined later in the coordination model, \nspecifying the data/knowledge interchanged and the speech-act of each interaction. \nmsc TRAVELLER-REQUEST \nTraveller System \n1 1 1 \nalt J \nRequest-HighHdd, ad, destination)^ \nanswer(numjlight) \n8orry{cause) \n1 \nFig. 2. MSC Traveller request use case diagram \n3 Analysis \nThe results of this phase will be the requirements specification of the MAS through the \ndevelopment of the models previously described, except for the design model. These \nmodels are developed in a risk-driven way, and the steps are: \n- Agent modelling: developing initial instances of the agent model for identifying and \ndescribing the agents. \n- Task modelling: task decomposition and determination of the goals and ingredients \nof the tasks. \n- Coordination modelling: developing the coordination model for describing the in-\nteractions and coordination protocols between the agents. \n- Knowledge modelling: modelling of the knowledge on the domain, the agents (know \nledge needed to carry out the tasks and their proactive behaviour) and the environ-\nment (beliefs and inferences of the world, including the rest of agents). \n- Organisation modelling: developing the organisation model. Depending on the \ntype of project, it may be necessary to model the organisation of the enterprise in \nwhich the MAS is going to be introduced for studying the feasibility of the pro-\nposed solution. In this case, two instances of the organisation model are developed: \nbefore and after the introduction of the MAS. This model is also used to model \nthe software agent organisation. Another approach to define a social level for MAS \nextending CommonKADS is presented in [11]. \n3.1 Agent Modelling \nAgents can be identified with the following strategies (or a combination of them): \n- Analysis of the actors of the use cases defined in the conceptualisation phase. The \nactors of the use cases delimit the external agents of the system. Several similar \nroles (actors) can be mapped onto one agent to simplify the communication. \n- Analysis of the statement of the problem. The syntactic analysis of the problem \nstatement can help to identify some agents. The candidate agents are the subjects \nof the sentences, the active objects. The actions carried out by these subjects should \nbe developed by the agents as goals (with initiative) or services (under demand). \n- Usage of heuristics. The agents can be identified determining whether there is some \nconceptual distance [3]: knowledge distribution, geographical distribution, logical \ndistribution or organisational distribution. \n- An initial task and expertise models can help us to identify the necessary functions \nand the required knowledge capabilities, resulting in a preliminary definition of the \nagents. The goals of the tasks will be assigned to the agents. \n- Application of the internal use cases technique. This technique is based on RDD [31 ] \nand its CRC (Class Responsibility Collaboration) cards. Taking as input the use \ncases of the conceptualisation phase and some initial agents, we can think that each \nagent \"uses\" other agent(s), and can use these agents with different roles. The use \ncase notation (Fig. 1 and 3) is extended for showing human agents (with the round \nhead) and software agents (with the squared head). When an agent needs to use an \nagent for a particular function (for example, evaluate something), we look for such \nan agent in our agent-library for reusing, combining in this way the top-down and \nbottom-up approach. \n- Application of the enhanced CRC cards. A CRC is filled for each agent, describing \nits class. Each CRC is divided into five columns: goals assigned, plans for achiev-\ning these goals, knowledge needed to carry out the plans, collaborators in these \nplans, and services used in the collaboration. The back side of the CRC is used for \nannotations or extended description of the front side. \nSecretary \nMSC Determine \nIf lights and prediction \nRequest prediction) D \n\"A \nPmriirtnr \nFig. 3. Internal use case diagram \nIn the proposed case study, we identify: \n\u2014 Since there is a user (human agent), as a general rule, we create a user-interface \nagent derived from an interface agent class for each human agent. In this case, \nit will be called Secretary. The type of interaction (menu-based, etc.) between a \nhuman agent and his/her agent assistant should be modelled in the communication \nmodel. \n\u2014 Now we can recognise a knowledge distance (we need an expert in predicting flights \nwithout delays), with the role (class) of Predictor. \n\u2014 There is also a geographical distance, the information of the available airlines can \nonly be accessed through Airlines-Clerk agents. This information will be requested \nfrom Airlines-Clerk agents, so it can be useful to define a group for these agents and \nsend multicast messages. This group will be modelled in the organisation model. \nWe should then fill the textual template of the agent model for each identified agent, \nthat includes its name, type, role, position, a description, offered services, goals, skills \n(sensors and effectors), reasoning capabilities, general capabilities norms, preferences \nand permissions. \nThe approach followed here is quite different from the approach of agent identific-\nation in synthetic ecosystems [23], since we suppose that agents will be rather complex \n(because of their architecture) and we will try to limit the number of agents. \nmac DETERMINE FLIGHTS AND PREDICTIONS \nSecretary Airline clerk Predictor \nI I 1 1 1 1 \n_afij \naskidd, ad, destination! \n5\u00bb \nMftbgtt\u00bb) \nsoffyicatise) \n, \n- ask(flighis^ \nelUpredletionsT \nFig. 4. MSC internal use case diagram \n3.2 Task Modelling \nTasks are decomposed following a top-down approach, and described in an and/or tree. \nThe description of a task [8] includes its name, a short description, input and output \ningredients, task structure, its control, frequency of application, preconditions and re-\nquired capabilities of the performers. \nThe potential benefits of the development of this model are the documentation of the \nactivities of the organisation before and after the introduction of the multiagent system. \nThis documentation serves for supporting the maintenance and management of changes \nin the organisation and for supporting project feasibility assessment. \n3.3 Coordination Modelling \nThe coordination model has two milestones: (1) definition of the communication chan-\nnels and building of a prototype; (2) analysis of the interactions and determination of \ncomplex interactions (with coordination protocols). \nThe first phase consists of the following steps: \n1. Describe the prototypical scenarios between agents using MSC notation (Fig. 4). \nThe conversations are identified taking as an input the results of the techniques used \nfor identifying agents. During this first stage, we will consider that every conversa-\ntion consists of just one single interaction and the possible answer. \n2. Represent the events (interchanged messages) between agents in event flow dia-\ngrams (also called service charts) (Fig. 5). These diagrams collect the relationships \nbetween the agents via services. \n3. Model the data interchanged in each interaction. The expertise model can help us to \ndefine the interchanged knowledge structures. These interchanged data are shown \nin the event flow diagram between squared brackets. \n4. Model each interaction with the state transition diagrams of SDL (Specification and \nDescription Language) [14] specifying speech-acts as inputs/outputs of message \nevents (Fig. 6). These diagrams can be validated with the MSC diagrams. \n5. Each state can be further refined in the task or expertise model. \n6. Analyse each interaction and determine its synchronisation type: synchronous, asyn-\nchronous or future. \nask[dd,ad,destirretkm] ask[fiightsj \nUser |^ * Secretary L, H Predictor \nteipight] \nsorryfcausej \nask[dd.ad,destination] \ntellfprediction] \ntell[fliflht] \nsorry[cause] \nFig. 5. Event flow diagram \nThe second phase consists of analysing the interactions for getting more flexibility \n(relaxing for example the user requirements), taking advantage of the parallelism [7], \nduplicating tasks using different methods or resolving detected conflicts. When a co-\noperation protocol is needed, we should consult the library of cooperation protocols and \nreuse a protocol definition. If there is no protocol suitable for our needs, it is necessary \nto define a new one. We can use HMSC (High level Message Sequence Charts) [14], \nwhich are very useful for this purpose. These diagrams (Fig. 7) show the road map \n(phases) of the protocol, and how the different phases (specified with MSC) are com-\nbined. A phase can be a simple MSC or another HMSC (e.g. counterp). The processing \nof the interactions is described using SDL state diagrams, and it is also necessary to \nfill in the textual protocol template specifying the required reasoning capabilities of the \nparticipants in the protocol. These capabilities can be described using one or several in-\nstances of the expertise model. The state diagrams consider three kinds of events: mes-\nsage events, events from other agents using message-passing; external events, events \nfrom the environment perceived through the sensors; and internal events, events that \narise in an agent because of its proactive attitude. \n(ReadyJo_predrcy \naskfllightj I \ndo: prediction \n^ e d i d i o f c - S ? \nOelUprediction! <f sorry(cause) \nV i \u2014 V \n(Readyjcuxedicy' (Ready_to_predic\u00fc \nFig. 6. SDL state diagram \nThe potential benefits of the development of this model are: \n\u2022 The development of the coordination model is a means for specifying the proto-\ntypical interactions between the agents working on the resolution of a problem, \ntogether with the interactions with the environment. This model is used to store \nthe decisions of the structure of communications and the protocols associated with \nthese communications. The usage of these descriptions is twofold: the designer can \nreuse protocols and scenarios and the intelligent agent can select them at run time. \n- MSC and SDL are formal description techniques with a well-defined syntax and se-\nmantics. The usage of these languages for specifying interactions in multiagent sys-\ntems have been achieved by: (1) defining one signal type for each possible speech-\nact (message type); (2) associating a logical expression to each state name (using \ncommentaries); and (3) considering internal events (similar to spontaneous trans-\nitions) for changes in the mental state of the agent motivated because of its proact-\nive attitude. In addition, a multicast message has been proposed and requested from \nthe MSC standardisation working group, for simplifying the specification of group \nprotocols. These languages have been used for supporting the system specification, \ndesign, documentation and definition of test cases. \n- The development of this model can help in the maintenance and testing of a mul-\ntiagent system. \nFig. 7. HMSC diagram \n3.4 Knowledge Modelling \nThe expertise model is used for modelling the reasoning capabilities of the agents to \ncarry out their tasks and achieve their goals. Normally, several instances of the expertise \nmodel should be developed: modelling inferences on the domain (i.e. how to predict \ndelays in flights, taxonomies of delays and flights, etc.); modelling the reasoning of the \nagent (i.e. problem solving methods to achieve a task, character of the agent, etc.) and \nmodelling the inferences of the environment (how an agent can interpret the event it \nreceives from other agents or from the world). When we have to develop the reasoning \ncapabilities of an agent, we will reuse previously developed instances of the expertise \nmodel and adapt these instances to the new characteristics of the problem. \nThe expertise model [30]3 consists of the development of the application know-\nledge (consisting of domain knowledge, inference knowledge and task knowledge) and \nproblem solving knowledge. \nThe usage of this model can take advantage of the work previously developed, for \nexample for developing a planner [2]. \nDomain Knowledge: represents the declarative knowledge of the problem, modelled \nas concepts, properties, expressions and relationships using the Conceptual Modelling \nLanguage (CML) [27] or the graphical notation of the Object Model of OMT. \nIn our problem, if we are focusing just on the domain, we could identify concepts \nsuch as flight, airlines, delay, etc.; properties such as num-flight, ao, dd,.... These con-\ncepts are arranged in domain models that describe a particular relationship between \n3\n A very practical approach to the development of this model can be found in [ 17]. \nthemselves. For example, we could develop a causal model of what events cause a \ndelay; a hierarchy of events, delays, etc. The road map of the developed domain models \nand their relationships are presented in model schematas. \nInference Knowledge: represents the inference steps performed for solving a task. \nThere is a library of generic inference structures selected by the task type (diagnosis, \nassessment, etc.). These generic inference structures should be adapted to the prob-\nlem. Consulting the library for modelling how to predict whether a flight is going to \nbe delayed, we see that the task Prediction is not suitable, because this is used for sug-\ngesting what will happen next to the system. We found that the most suitable task is \nAssessment, whose inference structure (supposing no available norm) is shown in Fig. \n8. The inference structure is a compound of predefined inference types (how the do-\nmain concepts can be used to make inferences, represented as ellipses) and domain \nroles (rectangles). This generic inference structure should be adapted to our problem. \nAfter defining the inference structure, it is instantiated into a similar diagram for the \ndomain. \nTask Knowledge: represents the order of the inference structures. The notation con-\nsists of inference structures and task-method inference decomposition structures. \nProblem Solving Method: during the design we should specify a Problem Solving \nMethod (PSM) for each inference type: how the inference is carried out. The PSMs are \narranged in libraries for reuse. \nThe potential benefits of the development of this model are the utilisation of a well-\nknown knowledge level modelling framework, which has been successfully applied in \nseveral projects, and the provision of a library of generic components, specification \nlanguages and software tools. \nCase \ndescription \n( compare J \nAbstract case \ndescription \u2014*( compare j* \nDecision class \n_ J System \n\" j model \nFig. 8. Inference structure diagram \n3.5 Organisation Modelling \nCommonKADS defines the organisation model for modelling the organisation in which \nthe knowledge based system is going to be introduced. Here the model is extended in \nthe same way as the agent model for modelling the organisation of agents. This model \nshows the static or structural relationships between the agents, while the coordination \nmodel shows the dynamic relationships. The graphical notation of these models is based \non the notation of the Object Model of OMT, adding a special symbol for distinguishing \nbetween agents and objects. An example of agent hierarchy diagram is shown in Fig. 9. \nThe aggregation symbol is used for expressing agent groups. \nFig. 9. Class agent diagram \nThe agent symbol is quite similar to the class symbol proposed in OMT, but has a \ndifferent meaning. The upper box does not store the defined attributes as in OMT but \nthe mental state and internal attributes of an agent, such as their goals, beliefs, plans, \netc. The lower box stores the external attributes of the agents: services, sensors and \neffectors. \nThe inheritance relationship between agents is defined as the union of the values of \nthe precedent classes for each attribute. For example, an agent class has its goals and \nthe goals of the precedent agent classes. If an agent defines an attribute as exclusive, the \nvalues are overwritten. \nThe potential benefits of the development of this model is the specification of the \nstructural relationships between human and/or software agents, and the relationship \nwith the environment. The study of the organisation is a tool for the identification of \npossible impacts of the multiagent system when installed. In the same way, this model \ncan provide information about the functions, workflow, process and structure of the or-\nganisation that allows the study of the feasibility of the proposed solutions. This model \nrepresents both class agent diagrams and instance agent diagrams, showing the par-\nticular relationships with the environment. In contrast with other paradigm (i.e. object \noriented), the agent instance diagrams are frequently more relevant than the class agent \ndiagrams. \n4 Design \nAs a result of the analysis phase, an initial set of agents has been determined. During \nthe design phase the design model is developed. This phase is extended for MAS and \nconsists of [13]: \n- Agent network design: the infrastructure of the MAS-system (so-called network \nmodel [12]) is determined, and consists of network, knowledge and coordination \nfacilities. The agents (so-called network agents) that maintain this infrastructure are \nalso defined, depending on the required facilities. Some of these required facilities \ncan be: \n\u2022 Network facilities: agent name service, yellow/white pages service, de/registering \nand subscription service, security level, encryption and authentication, trans-\nport/application protocol, accounting service, etc. \n\u2022 Knowledge facilities: ontology servers, PSM servers, knowledge representa-\ntion language translators, etc. \n\u2022 Coordination facilities: available coordination protocols and primitives, pro-\ntocol servers, group management facilities, facilities for assistance in coordin-\nation of shared goals, police agents for detecting misbehaviours and the control \nof the usage of common resources, etc. \nThe result of the common facilities shared by the agents allow the efficient com-\nmunication between the agents and is expressed in an ontology, in the same way as \nthe service ontology as defined by Nodine [22]. \n- Agent design: the most suitable architecture is determined for each agent, and some \nagents can be introduced or subdivided according to pragmatic criteria. Each agent \nis subdivided in modules for user-communication (from communication model), \nagent communication (from coordination model), deliberation and reaction (from \nexpertise, agent and organisation models), external skills and services (from agent, \nexpertise and task models). The agent design maps the functions defined in these \nmodules onto the selected agent architecture. \nThe issue of designing an agent architecture [5] is not addressed in the methodo-\nlogy, since the agent architecture is provided by the agent development platform. \n- Platform design: selection of the software (multiagent development environment) \nand hardware that is needed (or available) for the system. \nThe potential benefits of the development of this model are: \n- The decisions on the selection of a multiagent platform and an agent architecture \nfor each agent are documented. \n- The design model collects the information of the previously developed models and \ndetails how these requirements can be achieved. \n- The design model for multiagent systems determines the common resources and \nneeds of the agents and designs a common infrastructure managed by network \nagents. This facilitates modularity in the design. \n5 Related Work \nThere are several proposals for defining an agent-oriented (AO) methodology. \nHere we include a review and the relationship between these approaches and MAS-\nCommonKADS. \nKinny [18] defines a methodology for MAS extending OMT. He proposes two main \nlevels: an external view for modelling the agent relationships (our organisation model) \nand the interactions (our coordination model). The internal view describes the mental \nstate of a BDI (Belief-Desire-Intention) agent (our expertise and agent models). The \nmodelling of the interactions is elaborated more in our coordination model. The internal \nview could be an interesting alternative to the our expertise model, though the expertise \nmodel offers a very elaborate framework for knowledge modelling. \nBurmeister [6] describes an AO methodology, extending OO techniques. Three mod-\nels are distinguished: agent model (our agent and expertise models), organisational \nmodel (our organisation model) and a cooperation model (our coordination model). \nShe proposes a very interesting extension to the CRC cards and a clear development \nprocess. Our graphical notation for modelling interactions seems to be more detailed, \nand the knowledge modelling is elaborated more in the CommonKADS framework. \nKendall [16] proposes another AO methodology based on OO and enterprise mod-\nelling techniques. The use case model is very similar to our internal use cases. Coordin-\nation and knowledge modelling are not so well developed and the process development \nis not very clear. \nMASB [20, 21] proposes an AO methodology that covers analysis and design. The \nbehaviour diagrams are similar to the internal use case diagrams, and it proposes a new \ngraphical notation (perhaps too complex) for modelling the agents. The conversation \nmodelling is only mentioned. \nCoMoMAS [10] proposes also an extension to CommonKADS for MAS. It has a \nvery interesting extension to CML for MAS and a good redefinition of the expertise \nmodel. It also defines a new model for cooperation, but is less developed than our co-\nordination model. Our model also proposes different graphical notations instead of just \ntextual templates. \nDESIRE [4] is a formal framework for multiagent modelling, that covers mainly our \ntask, agent and expertise models. It could be suitable for specifying the design after the \nanalysis phase. \nCoLa [29] is a specification language for task decomposition, transactions and con-\ntracts, which are specified in our methodology in the task and coordination models. Our \ngraphical notation could be easily mapped onto this specification language. \nCOOL [1] and AgentTalk [19] are an alternative to our coordination model. Our \nmodel takes advantage of the properties of formal description techniques and their \nstandardised textual and graphical notation and semantics. \n6 Conclusions and Future Work \nThe engineering approach [9] to agent-based systems development is a key factor for \ntheir introduction into the industry. This principled development will be specially needed \nas long as the number of agents of the systems increase. The standard advantages of an \nengineering approach, such as management, testing and reutilisation should be applied \nin the development of agent-based systems. \nThis paper presents an agent-oriented methodology that covers the software devel-\nopment life cycle of a multiagent system, through the development of seven models, \nthat can be reused. The software process model combines a risk-driven approach with a \ncomponent-based approach. \nThis methodology integrates techniques from a well-known knowledge engineering \nmethodology, CommonKADS, with techniques from object-oriented methodologies and \nprotocol engineering. The application of techniques based on well-known techniques is \nintended to facilitate the learning of the methodology and to provide confidence to the \nmanagers with techniques that have been successfully applied. \nFor each model of the methodology, we have shown the standard development pro-\ncess and the graphical notation. The methodology also defines textual templates for \neach model, not included here, and some non-standard development processes. \nThis approach is currently being employed in real applications. The feedback from \nthese applications will help to refine the methodology. \nOur main effort has been the development of the new model, the Coordination \nModel. The rest of the models are subject of further improvement. \nOur future work is focused on the development of a workbench for the methodology, \nsince there is no integrated environment available. \nAcknowledgements \nWe would like to thank Amalio F. Nieto, Mark Hallett and two anonymous referees for \nmany suggestions concerning the content and presentation of this paper. \nReferences \n1. Mihai Barbuceanu and Mark S. Fox. Capturing and modeling coordination knowledge for \nmulti-agent systems. Journal on Intelligent and Cooperative Information Systems, July \n1996. \n2. V. R. Benjamins, Leliane Nunes de Barros, and Valente Andre. Constructing planners \nthrough problem-solving methods. In B. Gaines and M. Musen, editors, Proceedings of \nthe J Oth Banff Knowledge Acquisition for Knowledge-Based Systems Workshop, volume 1, \npages 14-1/20, Banff, Canada, November 1996. KAW. \n3. Alan H. Bond and Les Gasser. An analysis of problems and research in DAI. In Alan H. \nBond and Les Gasser, editors, Readings in Distributed Artificial Intelligence, pages 3\u201436. \nSpringer-Verlag: Heidelberg, Germany, 1988. \n4. F. M. T. Brazier, B. M. Dunin-Keplicz, N. R. Jennings, and Treur J. DESIRE: Modelling \nmulti-agent systems in a compositional formal framework. Int Journal of Cooperative In-\nformation Systems, l(6):To appear, January 1997. \n5. Joanna Bryson. Agent architecture as object oriented design. (In this volume). \n6. Birgit Burmeister. Models and methodology for agent-oriented analysis and design. In \nK Fischer, editor, Working Notes of the KI'96 Workshop on Agent-Oriented Programming \nand Distributed Systems, 1996. DFKI Document D-96-06. \n7. E. H. Durfee, V. R. Lesser, and D. D. Corkill. Trends in cooperative distributed problem \nsolving. IEEE Transactions on Knowledge and Data Engineering, 1(1), March 1989. \n8. Cuno Duursma, Olle Olsson, and Sundin Ulf. Task model defintion and task analysis pro-\ncess. Technical Report Technical report KADS-IIM5/VUB/TR/004/2.0 ESPRIT Project \nP5248, Free University Brussels and Swedish Institute of Computer Science, 1994. \n9. M. Fisher, J. Miiller, M. Schroeder, G. Stamford, and G. Wagne. Methodological founda-\ntions for agent-based systems. In Proceedings of the UK Special Interest Group on Found-\nations of Multi-Agent Systems (FOMAS). Published in Knowledge Engineering Review (12) \n3,1997. http://www.dcs.warwick.ac.uk/fomas/fomas96/abstracts/ker3.ps. \n10. Norbert Glaser. Contribution to Knowledge Modelling in a Multi-Agent Framework (the Co-\nMoMAS Approach). PhD thesis, L'Universtit\u00e9 Henri Poincar\u00e9, Nancy I, France, November \n1996. \n11. Rune E. Gustavsson. Multi agent systems as open societies - a design framework -. (In this \nvolume). \n12. C. A. Iglesias, J. C. Gonz\u00e1lez, and J. R. Velasco. MIX: A general purpose multiagent archi-\ntecture. In M. Wooldridge, J. P. Mflller, and M. Tambe, editors, Intelligent Agents II (LNAI \n1037), pages 251-266. Springer-Verlag: Heidelberg, Germany, 1996. \n13. Carlos A. Iglesias, Mercedes Garijo, Jos\u00e9 C. Gonz\u00e1lez, and Juan R. Velasco. A meth-\nodological proposal for multiagent systems development extending CommonKADS. In \nB. Gaines and M. Musen, editors, Proceedings of the 10th Banff Knowledge Acquisition for \nKnowledge-Based Systems Workshop, volume 1, pages 25-1/17, Banff, Canada, November \n1996. KAW. Track Agent-Oriented Approaches To Knowledge Engineering. \n14. ITU-T. Z100 (1993). CCITT specification and description language (sdl). Technical report, \nITU-T, June 1994. \n15. I. Jacobson, M. Christerson, P. Jonsson, and \u00d3vergaard. Object-Oriented Software Engin-\neering. A Use Case Driven Approach. ACM Press, 1992. \n16. Elisabeth A. Kendall, Margaret T. Malkoun, and Chong Jiang. A methodology for devel-\noping agent based systems for enterprise integration^ In D. Luckose and Zhang C , editors, \nProceedings of the First Australian Workshop on DAI, Lecture Notes on Artificial Intelli-\ngence. Springer-Verlag: Heidelberg, Germany, 1996. \n17. John Kingston. Building a KBS for health and safety assessment. In Applications and \nInnovations in Expert Systems IV, Proceedings ofBCS Expert Systems '96, pages 16-18, \nCambridge, December 1996. SBES Publications. Also published as technical report: AIAI-\nTR-202, Artificial Intelligence Applications Institute, University of Edinburgh. \n18. David Kinny, Michael Georgeff, and Anand Rao. A methodology and modelling technique \nfor systems of BDI agents. In W. van der Velde and J. Perram, editors, Agents Breaking \nAway: Proceedings of the Seventh European Workshop on Modelling Autonomous Agents \nin a Multi-Agent World MAAMAW96, (LNAI Volume 1038). Springer-Verlag: Heidelberg, \nGermany, 1996. \n19. Kazushiro Kuwabara, Toru Ishida, and Nobuyasu Osato. AgenTalk: Coordination protocol \ndescription for multiagent systems. In Proceedings of the First International Conference on \nMulti-Agent Systems (ICMAS-95), page 455, San Francisco, CA, June 1995. \n20. B. Moulin and L. Cloutier. Collaborative work based on multiagent architectures: A meth-\nodological perspective. In Fred Aminzadeh and Mohammad Jamshidi, editors, Soft Comput-\ning: Fuzzy Logic, Neural Networks and Distributed Artificial Intelligence, pages 261\u2014296. \nPrentice-Hall, 1994. \n21. Bernard Moulin and Mario Brassard. A scenario-based design method and an environment \nfor the development of multiagent systems. In D. Lukose and C. Zhang, editors, First Aus-\ntralian Workshop on Distributed Artificial Intelligence, (LNAI volumen 1087), pages 216\u2014 \n231. Springer-Verlag: Heidelberg, Germany, 1996. \n22. Marian H. Nodine and Amy Unruh. Facilitating open communication in agent systems: the \ninfosleuth infrastructure. (In this volume). \n23. Van Parunak, John Sauter, and Steve Clark. Toward the specification and design of industrial \nsynthetic ecosystems. (In this volume). \n24. Bj\u00f3rn Regnell, Michael Andersson, and Johan Bergstrand. A hierarchical use case model \nwith graphical representation. In Proceedings of ECBS'96, IEEE International Symposium \nand Workshop on Engineering of Computer-Based Systems, March 1996. \n25. Ekkart Rudolph, Jens Grabowski, and Peter Graubmann. Tutorial on message sequence \ncharts (MSC). In Proceedings ofFORTE/PSTV'96 Conference, October 1996. \n26. J. Rumbaugh, M.Blaha, W. Premerlani, and V.Lorensen F. Eddy. Object-Oriented Modeling \nand Design. Prentice-Hall, 1991. \n27. A. Th. Schreiber, B. J. Wielinga, and J. M. Akkermans W. Van de Velde. CML: The Com-\nmonKADS conceptual modelling language. Research report KADS-II/M2/RR/UvA/69/1.0, \nUniversity of Amsterdam, Netherlands Energy Research Foundation ECN and Free Univer-\nsity of Brussels, March 1994. Accepted for EKAW'94. \n28. A. Th. Schreiber, B. J. Wielinga, and J. M. Akkermans W. Van de Velde. CommonKADS: \nA comprehensive methodology for KBS development. Deliverable DM1.2a KADS-\nII/Ml/RR/Uv A/70/1.1, University of Amsterdam, Netherlands Energy Research Foundation \nECN and Free University of Brussels, 1994. \n29. Egon Verharen, Frank Dignum, and Sander Bos. Implementation of a cooperative agent \narchitecture based on the language-action perspective. (In this volume). \n30. B. J. Wielinga, W. van de Velde, A. Th. Schreiber, and H. Akkermans. Expertise \nmodel definition document. deliverable DM.2a, ESPRIT Project P-5248 /KADS-\nII/M2/Uv A/026/1.1, University of Amsterdam, Free University of Brussels and Netherlands \nEnergy Research Centre ECN, May 1993. \n31. R. Wirfs-Brock, B. Wilkerson, and L. Wiener. Designing Object-Oriented Software. \nPrentice-Hall, 1990. \n",
      "id": 5177965,
      "identifiers": [
        {
          "identifier": "oai:citeseerx.psu:10.1.1.146.5002",
          "type": "OAI_ID"
        },
        {
          "identifier": "oai:oa.upm.es:15365",
          "type": "OAI_ID"
        },
        {
          "identifier": "oai:citeseerx.psu:10.1.1.54.8257",
          "type": "OAI_ID"
        },
        {
          "identifier": "24352868",
          "type": "CORE_ID"
        },
        {
          "identifier": "oai:citeseerx.psu:10.1.1.104.717",
          "type": "OAI_ID"
        },
        {
          "identifier": "10.1007/bfb0026768",
          "type": "DOI"
        },
        {
          "identifier": "21079685",
          "type": "CORE_ID"
        },
        {
          "identifier": "20724068",
          "type": "CORE_ID"
        },
        {
          "identifier": "oai:dnet:archivodigit::dbf74e286b0d579a922e0932d1f7e245",
          "type": "OAI_ID"
        },
        {
          "identifier": "12002063",
          "type": "CORE_ID"
        },
        {
          "identifier": "148663569",
          "type": "CORE_ID"
        },
        {
          "identifier": "485225521",
          "type": "CORE_ID"
        }
      ],
      "title": "Analysis and design of multiagent systems using MAS-CommonKADS",
      "language": {
        "code": "en",
        "name": "English"
      },
      "magId": null,
      "oaiIds": [
        "oai:citeseerx.psu:10.1.1.54.8257",
        "oai:oa.upm.es:15365",
        "oai:dnet:archivodigit::dbf74e286b0d579a922e0932d1f7e245",
        "oai:citeseerx.psu:10.1.1.146.5002",
        "oai:citeseerx.psu:10.1.1.104.717"
      ],
      "publishedDate": "1998-01-01T00:00:00",
      "publisher": "'Springer Science and Business Media LLC'",
      "pubmedId": null,
      "references": [
        {
          "id": 9349057,
          "title": "A hierarchical use case model with graphical representation.",
          "authors": [],
          "date": "1996",
          "doi": "10.1109/ecbs.1996.494538",
          "raw": "Bj\u00f3rn Regnell, Michael Andersson, and Johan Bergstrand. A hierarchical use case model with graphical representation. In Proceedings of ECBS'96, IEEE International Symposium and Workshop on Engineering of Computer-Based Systems, March 1996.",
          "cites": null
        },
        {
          "id": 9349045,
          "title": "A methodological proposal for multiagent systems development extending CommonKADS.",
          "authors": [],
          "date": null,
          "doi": "10.1007/bfb0026768",
          "raw": "Carlos A. Iglesias, Mercedes Garijo, Jos\u00e9 C. Gonz\u00e1lez, and Juan R. Velasco. A methodological proposal for multiagent systems development extending CommonKADS. In B. Gaines and M. Musen, editors, Proceedings of the 10th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop, volume 1, pages 25-1/17, Banff, Canada, November",
          "cites": null
        },
        {
          "id": 9349051,
          "title": "A methodology and modelling technique for systems of BDI agents.",
          "authors": [],
          "date": "1996",
          "doi": "10.1007/bfb0031846",
          "raw": "David Kinny, Michael Georgeff, and Anand Rao. A methodology and modelling technique for systems of BDI agents. In W. van der Velde and J. Perram, editors, Agents Breaking Away: Proceedings of the Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World MAAMAW96, (LNAI Volume 1038). Springer-Verlag: Heidelberg, Germany, 1996.",
          "cites": null
        },
        {
          "id": 9349049,
          "title": "A methodology for developing agent based systems for enterprise integration^ In",
          "authors": [],
          "date": "1996",
          "doi": "10.1007/978-0-387-34983-1_22",
          "raw": "Elisabeth A. Kendall, Margaret T. Malkoun, and Chong Jiang. A methodology for developing agent based systems for enterprise integration^ In D. Luckose and Zhang C, editors, Proceedings of the First Australian Workshop on DAI, Lecture Notes on Artificial Intelligence. Springer-Verlag: Heidelberg, Germany, 1996.",
          "cites": null
        },
        {
          "id": 9349054,
          "title": "A scenario-based design method and an environment for the development of multiagent systems.",
          "authors": [],
          "date": null,
          "doi": "10.1007/3-540-61314-5_32",
          "raw": "Bernard Moulin and Mario Brassard. A scenario-based design method and an environment for the development of multiagent systems. In D. Lukose and C. Zhang, editors, First Australian Workshop on Distributed Artificial Intelligence, (LNAI volumen 1087), pages 216\u2014",
          "cites": null
        },
        {
          "id": 9349038,
          "title": "Agent architecture as object oriented design. (In this volume).",
          "authors": [],
          "date": null,
          "doi": "10.1007/bfb0026747",
          "raw": "Joanna Bryson. Agent architecture as object oriented design. (In this volume).",
          "cites": null
        },
        {
          "id": 9349052,
          "title": "AgenTalk: Coordination protocol description for multiagent systems.",
          "authors": [],
          "date": "1995",
          "doi": null,
          "raw": "Kazushiro Kuwabara, Toru Ishida, and Nobuyasu Osato. AgenTalk: Coordination protocol description for multiagent systems. In Proceedings of the First International Conference on Multi-Agent Systems (ICMAS-95), page 455, San Francisco, CA, June 1995.",
          "cites": null
        },
        {
          "id": 9349036,
          "title": "An analysis of problems and research",
          "authors": [],
          "date": "1988",
          "doi": null,
          "raw": "Alan H. Bond and Les Gasser. An analysis of problems and research in DAI. In Alan H. Bond and Les Gasser, editors, Readings in Distributed Artificial Intelligence, pages 3\u201436. Springer-Verlag: Heidelberg, Germany, 1988.",
          "cites": null
        },
        {
          "id": 9349050,
          "title": "Building a KBS for health and safety assessment.",
          "authors": [],
          "date": "1996",
          "doi": null,
          "raw": "John Kingston. Building a KBS for health and safety assessment. In Applications and Innovations in Expert Systems IV, Proceedings ofBCS Expert Systems '96, pages 16-18, Cambridge, December 1996. SBES Publications. Also published as technical report: AIAITR-202, Artificial Intelligence Applications Institute, University of Edinburgh.",
          "cites": null
        },
        {
          "id": 9349034,
          "title": "Capturing and modeling coordination knowledge for multi-agent systems.",
          "authors": [],
          "date": null,
          "doi": "10.1142/s0218843096000117",
          "raw": "Mihai Barbuceanu and Mark S. Fox. Capturing and modeling coordination knowledge for multi-agent systems. Journal on Intelligent and Cooperative Information Systems, July",
          "cites": null
        },
        {
          "id": 9349047,
          "title": "CCITT specification and description language (sdl).",
          "authors": [],
          "date": "1993",
          "doi": "10.1007/978-3-642-97946-0_3",
          "raw": "ITU-T. Z100 (1993). CCITT specification and description language (sdl). Technical report, ITU-T, June 1994.",
          "cites": null
        },
        {
          "id": 9349060,
          "title": "CML: The CommonKADS conceptual modelling language. Research report KADS-II/M2/RR/UvA/69/1.0,",
          "authors": [],
          "date": "1994",
          "doi": null,
          "raw": "A. Th. Schreiber, B. J. Wielinga, and J. M. Akkermans W. Van de Velde. CML: The CommonKADS conceptual modelling language. Research report KADS-II/M2/RR/UvA/69/1.0, University of Amsterdam, Netherlands Energy Research Foundation ECN and Free University of Brussels, March 1994. Accepted for EKAW'94.",
          "cites": null
        },
        {
          "id": 9349053,
          "title": "Collaborative work based on multiagent architectures: A methodological perspective.",
          "authors": [],
          "date": "1994",
          "doi": null,
          "raw": "B. Moulin and L. Cloutier. Collaborative work based on multiagent architectures: A methodological perspective. In Fred Aminzadeh and Mohammad Jamshidi, editors, Soft Computing: Fuzzy Logic, Neural Networks and Distributed Artificial Intelligence, pages 261\u2014296. Prentice-Hall, 1994.",
          "cites": null
        },
        {
          "id": 9349069,
          "title": "CommonKADS: A comprehensive methodology for KBS development. Deliverable DM1.2a KADSII/Ml/RR/Uv A/70/1.1,",
          "authors": [],
          "date": "1994",
          "doi": "10.1109/64.363263",
          "raw": "A. Th. Schreiber, B. J. Wielinga, and J. M. Akkermans W. Van de Velde. CommonKADS: A comprehensive methodology for KBS development. Deliverable DM1.2a KADSII/Ml/RR/Uv A/70/1.1, University of Amsterdam, Netherlands Energy Research Foundation ECN and Free University of Brussels, 1994.",
          "cites": null
        },
        {
          "id": 9349042,
          "title": "Contribution to Knowledge Modelling in a Multi-Agent Framework (the CoMoMAS Approach). PhD thesis, L'Universtit\u00e9 Henri Poincar\u00e9,",
          "authors": [],
          "date": null,
          "doi": null,
          "raw": "Norbert Glaser. Contribution to Knowledge Modelling in a Multi-Agent Framework (the CoMoMAS Approach). PhD thesis, L'Universtit\u00e9 Henri Poincar\u00e9, Nancy I, France, November",
          "cites": null
        },
        {
          "id": 9349074,
          "title": "Designing Object-Oriented Software.",
          "authors": [],
          "date": "1990",
          "doi": "10.1145/74877.74885",
          "raw": "R. Wirfs-Brock, B. Wilkerson, and L. Wiener. Designing Object-Oriented Software. Prentice-Hall, 1990.",
          "cites": null
        },
        {
          "id": 9349037,
          "title": "DESIRE: Modelling multi-agent systems in a compositional formal framework.",
          "authors": [],
          "date": "1997",
          "doi": "10.1142/s0218843097000069",
          "raw": "F. M. T. Brazier, B. M. Dunin-Keplicz, N. R. Jennings, and Treur J. DESIRE: Modelling multi-agent systems in a compositional formal framework. Int Journal of Cooperative Information Systems, l(6):To appear, January 1997.",
          "cites": null
        },
        {
          "id": 9349072,
          "title": "Expertise model definition document. deliverable",
          "authors": [],
          "date": "1993",
          "doi": null,
          "raw": "B. J. Wielinga, W. van de Velde, A. Th. Schreiber, and H. Akkermans. Expertise model definition document. deliverable DM.2a, ESPRIT Project P-5248 /KADSII/M2/Uv A/026/1.1, University of Amsterdam, Free University of Brussels and Netherlands Energy Research Centre ECN, May 1993.",
          "cites": null
        },
        {
          "id": 9349055,
          "title": "Facilitating open communication in agent systems: the infosleuth infrastructure. (In this volume).",
          "authors": [],
          "date": "1996",
          "doi": null,
          "raw": "Springer-Verlag: Heidelberg, Germany, 1996. 22. Marian H. Nodine and Amy Unruh. Facilitating open communication in agent systems: the infosleuth infrastructure. (In this volume).",
          "cites": null
        },
        {
          "id": 9349071,
          "title": "Implementation of a cooperative agent architecture based on the language-action perspective. (In this volume).",
          "authors": [],
          "date": null,
          "doi": "10.1007/bfb0026748",
          "raw": "Egon Verharen, Frank Dignum, and Sander Bos. Implementation of a cooperative agent architecture based on the language-action perspective. (In this volume).",
          "cites": null
        },
        {
          "id": 9349035,
          "title": "Leliane Nunes de Barros, and Valente Andre. Constructing planners through problem-solving methods.",
          "authors": [],
          "date": "1996",
          "doi": "10.1006/ijhc.1997.0192",
          "raw": "V. R. Benjamins, Leliane Nunes de Barros, and Valente Andre. Constructing planners through problem-solving methods. In B. Gaines and M. Musen, editors, Proceedings of the J Oth Banff Knowledge Acquisition for Knowledge-Based Systems Workshop, volume 1, pages 14-1/20, Banff, Canada, November 1996. KAW.",
          "cites": null
        },
        {
          "id": 9349041,
          "title": "Methodological foundations for agent-based systems.",
          "authors": [],
          "date": null,
          "doi": null,
          "raw": "M. Fisher, J. Miiller, M. Schroeder, G. Stamford, and G. Wagne. Methodological foundations for agent-based systems. In Proceedings of the UK Special Interest Group on Foundations of Multi-Agent Systems (FOMAS). Published in Knowledge Engineering Review (12) 3,1997. http://www.dcs.warwick.ac.uk/fomas/fomas96/abstracts/ker3.ps.",
          "cites": null
        },
        {
          "id": 9349044,
          "title": "MIX: A general purpose multiagent architecture.",
          "authors": [],
          "date": "1996",
          "doi": "10.1007/3540608052_71",
          "raw": "C. A. Iglesias, J. C. Gonz\u00e1lez, and J. R. Velasco. MIX: A general purpose multiagent architecture. In M. Wooldridge, J. P. Mflller, and M. Tambe, editors, Intelligent Agents II (LNAI 1037), pages 251-266. Springer-Verlag: Heidelberg, Germany, 1996.",
          "cites": null
        },
        {
          "id": 9349039,
          "title": "Models and methodology for agent-oriented analysis and design. In",
          "authors": [],
          "date": "1996",
          "doi": null,
          "raw": "Birgit Burmeister. Models and methodology for agent-oriented analysis and design. In K Fischer, editor, Working Notes of the KI'96 Workshop on Agent-Oriented Programming and Distributed Systems, 1996. DFKI Document D-96-06. 7. E. H. Durfee, V. R. Lesser, and D. D. Corkill. Trends in cooperative distributed problem solving. IEEE Transactions on Knowledge and Data Engineering, 1(1), March 1989.",
          "cites": null
        },
        {
          "id": 9349043,
          "title": "Multi agent systems as open societies - a design framework -. (In this volume).",
          "authors": [],
          "date": null,
          "doi": "10.1007/bfb0026769",
          "raw": "Rune E. Gustavsson. Multi agent systems as open societies - a design framework -. (In this volume).",
          "cites": null
        },
        {
          "id": 9349059,
          "title": "Object-Oriented Modeling and Design.",
          "authors": [],
          "date": "1991",
          "doi": "10.1145/42404.42407",
          "raw": "J. Rumbaugh, M.Blaha, W. Premerlani, and V.Lorensen F. Eddy. Object-Oriented Modeling and Design. Prentice-Hall, 1991.",
          "cites": null
        },
        {
          "id": 9349048,
          "title": "Object-Oriented Software Engineering. A Use Case Driven Approach.",
          "authors": [],
          "date": "1992",
          "doi": null,
          "raw": "I. Jacobson, M. Christerson, P. Jonsson, and \u00d3vergaard. Object-Oriented Software Engineering. A Use Case Driven Approach. ACM Press, 1992.",
          "cites": null
        },
        {
          "id": 9349040,
          "title": "Task model defintion and task analysis process.",
          "authors": [],
          "date": "1994",
          "doi": null,
          "raw": "Cuno Duursma, Olle Olsson, and Sundin Ulf. Task model defintion and task analysis process. Technical Report Technical report KADS-IIM5/VUB/TR/004/2.0 ESPRIT Project P5248, Free University Brussels and Swedish Institute of Computer Science, 1994.",
          "cites": null
        },
        {
          "id": 9349056,
          "title": "Toward the specification and design of industrial synthetic ecosystems. (In this volume).",
          "authors": [],
          "date": null,
          "doi": "10.1007/bfb0026749",
          "raw": "Van Parunak, John Sauter, and Steve Clark. Toward the specification and design of industrial synthetic ecosystems. (In this volume).",
          "cites": null
        },
        {
          "id": 9349046,
          "title": "Track Agent-Oriented Approaches To Knowledge Engineering.",
          "authors": [],
          "date": null,
          "doi": null,
          "raw": "KAW. Track Agent-Oriented Approaches To Knowledge Engineering.",
          "cites": null
        },
        {
          "id": 9349058,
          "title": "Tutorial on message sequence charts (MSC).",
          "authors": [],
          "date": "1996",
          "doi": "10.1016/0169-7552(95)00122-0",
          "raw": "Ekkart Rudolph, Jens Grabowski, and Peter Graubmann. Tutorial on message sequence charts (MSC). In Proceedings ofFORTE/PSTV'96 Conference, October 1996.",
          "cites": null
        }
      ],
      "sourceFulltextUrls": [
        "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.54.8257",
        "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.104.717",
        "http://oa.upm.es/15365/1/INVE_MEM_1998_126475.pdf",
        "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.146.5002",
        "http://oa.upm.es/15365/"
      ],
      "updatedDate": "2022-02-28T00:08:05",
      "yearPublished": 1998,
      "journals": [
        {
          "title": null,
          "identifiers": [
            "0302-9743"
          ]
        }
      ],
      "links": [
        {
          "type": "download",
          "url": "https://core.ac.uk/download/148663569.pdf"
        },
        {
          "type": "reader",
          "url": "https://core.ac.uk/reader/148663569"
        },
        {
          "type": "thumbnail_m",
          "url": "https://core.ac.uk/image/148663569/large"
        },
        {
          "type": "thumbnail_l",
          "url": "https://core.ac.uk/image/148663569/large"
        },
        {
          "type": "display",
          "url": "https://core.ac.uk/works/5177965"
        }
      ]
    },
    {
      "acceptedDate": "",
      "arxivId": null,
      "authors": [
        {
          "name": "Emmerich, W."
        }
      ],
      "citationCount": 0,
      "contributors": [
        "Finkelstein, A."
      ],
      "outputs": [
        "https://api.core.ac.uk/v3/outputs/1669452"
      ],
      "createdDate": "2012-04-12T18:47:07",
      "dataProviders": [
        {
          "id": 118,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/118",
          "logo": "https://api.core.ac.uk/data-providers/118/logo"
        }
      ],
      "depositedDate": "",
      "abstract": "The construction of a large class of distributed systems can be simplified by leveraging middleware, which is layered between network operating systems and application components. Middleware resolves heterogeneity and facilitates communication and coordination of distributed components. Existing middleware products enable software engineers to build systems that are distributed across a local-area network. State-of-the-art middleware research aims to push this boundary towards Internet-scale distribution, adaptive and reconfigurable middleware and middleware for dependable and wireless systems. The challenge for software engineering research is to devise notations, techniques, methods and tools for distributed system construction that systematically build and exploit the capabilities that middleware deliver",
      "documentType": "research",
      "doi": null,
      "downloadUrl": "https://core.ac.uk/download/1669452.pdf",
      "fieldOfStudy": null,
      "fullText": "Software Engineering and Middleware: A Roadmap\nWolfgang Emmerich\nDept. of Computer Science\nUniversity College London\nLondon WC1E 6BT,UK\nw.emmerich@cs.ucl.ac.uk\nABSTRACT\nThe construction of a large class of distributed systems can\nbe simpli\ufb01ed by leveraging middleware, which is layered\nbetween network operating systems and application com-\nponents. Middleware resolves heterogeneity, and facilitates\ncommunication and coordinationof distributed components.\nExisting middleware products enable software engineers to\nbuild systems that are distributed across a local-area net-\nwork. State-of-the-artmiddleware research aims to push this\nboundary towards Internet-scale distribution, adaptive and\nrecon\ufb01gurable middleware and middleware for dependable\nand wireless systems. The challenge for software engineer-\ning research is to devise notations, techniques, methods and\ntools for distributed system construction that systematically\nbuild and exploit the capabilities that middleware deliver.\n1 INTRODUCTION\nVarious commercial trends have lead to an increasing de-\nmand for distributed systems. Firstly, the number of mergers\nbetween companies is continuing to increase. The different\ndivisions of a newly merged company have to deliver uni-\n\ufb01ed services to their customers and this usually demands an\nintegration of their IT systems. The time available for de-\nlivery of such an integration is often so short that building\na new system is not an option and therefore existing system\ncomponents have to be integrated into a distributed system\nthat appears as an integrating computing facility. Secondly,\nthe time available for providing new services are decreas-\ning. Often this can only be achieved if components are pro-\ncured off-the-shelf and then integrated into a system rather\nthan built from scratch. Components to be integrated may\nhave incompatiblerequirementsfor their hardwareand oper-\natingsystem platforms;theyhavetobe deployedondifferent\nhosts, forcing the resulting system to be distributed. Finally,\nthe Internet providesnew opportunitiesto offer productsand\nservices to a vast number of potential customers. In this set-\nting, it is dif\ufb01cult to estimate the scalability requirements.\nAn e-commerce site that was designed to cope with a given\nnumber of transactions per day may suddenly \ufb01nd itself ex-\nposed to demand that is by orders of magnitude larger. The\nrequired scalability cannot usually be achieved by central-\nized or client-server architectures but demands a distributed\nsystem.\nDistributed systems can integrate legacy components, thus\npreserving investment, they can decrease the time to mar-\nket, they can be scalable and tolerant against failures. The\ncaveat, however,is that the constructionof a truly distributed\nsystems is considerably more dif\ufb01cult than building a cen-\ntralized or client/server system. This is because there are\nmultiple points of failure in a distributed system, system\ncomponents need to communicate with each other through\na network, which complicates communication and opens the\ndoor for security attacks. Middleware has been devised in\norder to conceal these dif\ufb01culties from application engineers\nas much as possible; As they solve a real problem and sim-\nplify distributed system construction, middleware products\nare rapidly being adopted in industry [6].\nIn order to build distributed systems that meet the require-\nments, software engineers have to know what middleware is\navailable, which one is best suited to the problems at hand,\nand how middleware can be used in the architecture, design\nand implementation of distributed systems.\nThe principal contribution of this paper is an assessment of\nboth, the state-of-the-practice that current middleware prod-\nucts offer and the state-of-the-art in middleware research.\nSoftwareengineersincreasinglyuse middlewareto builddis-\ntributed systems. Any research into distributed software en-\ngineering that ignores this trend will only have limited im-\npact. We, therefore, analyze the in\ufb02uence that the increasing\nuse of middleware should have on the software engineering\nresearch agenda. We argue that requirements engineering\ntechniques are needed that focus on non-functional require-\nments, as these in\ufb02uence the selection and use of middle-\nware. We identify that software architecture research should\nproduce methods that guide engineers towards selecting the\nright middleware and employing it so that it meets a set of\nnon-functional requirements. We then highlight that the use\nof middleware is not transparent for system design and that\ndesign methods are needed that address this issue.This paper is further structured as follows. In Section 2,\nwe discuss some of the dif\ufb01culties involved in building dis-\ntributed systems and delineate requirements for middleware.\nIn Section 3, we use these requirementsto attempt an assess-\nment of the support that current middleware products pro-\nvide for distributed system construction. We then present an\noverview of ongoing middleware research in Section 4 in or-\nder to provide a preview of what future middleware products\nmight be capable of. In Section 5, we delineate a research\nagenda for distributed software engineering that builds on\nthe capabilities of current and future middleware and con-\nclude the paper in Section 6.\n2 MIDDLEWARE REQUIREMENTS\nInthissection,wereviewthedif\ufb01cultiesthatariseduringdis-\ntributed system construction. We argue in this section that it\nis too expensive and time consuming if application design-\ners have to resolve these problems by directly using network\noperating system primitives. Instead they require a middle-\nware that provides higher-level primitives. This approach to\ndistributed system construction with middleware is sketched\nin Figure 1.\nFigure 1: Middleware in Distributed System Construction\nThus middleware is layered between network operating sys-\ntems and application components [13]. Middleware facil-\nitates the communication and coordination of components\nthat are distributed across several networked hosts. The aim\nof middleware is to provide application engineers with high-\nlevel primitives that simplify distributed system construc-\ntion. The idea of using middleware to build distributed sys-\ntems is comparable to that of using database management\nsystems when building information systems. It enables ap-\nplication engineers to abstract from the implementation of\nlow-level details, such as concurrency control, transaction\nmanagement and network communication, and allows them\nto focus on application requirements.\nNetwork Communication\nAs shown in Figure 1, the different components of a dis-\ntributedsystemmayresideondifferenthosts. Inorderforthe\ndistributed system to appear as an integrated computing fa-\ncility, the componentshave to communicate with each other.\nThis communication can only be achieved by using network\nprotocols, which are often classi\ufb01ed by the ISO/OSI refer-\nence model [25]. Distributed systems are usually built on\ntop of the transport layer, of which TCP or UDP are good\nexamples. The layers underneath are provided by the net-\nwork operating system.\nDifferent transport protocols have in common that they can\ntransmit messages between different hosts. If the commu-\nnication between distributed systems is programmed at this\nlevel of abstraction,applicationengineersneedto implement\nsession and presentation layer. This is too costly, too error-\nprone and too time-consuming. Instead, application engi-\nneers should be able to request parameterized services from\npossibly more than one remote components and may wish\nto execute them as atomic and isolated transactions, leaving\nthe implementation of session and presentation layer to the\nmiddleware.\nThe parameters that a component requesting a service needs\nto pass to a componentthat providesa service are oftencom-\nplex data structures. The presentation layer implementation\nof the middleware should provide the ability to transform\nthese complexdata structuresinto a format that can be trans-\nmitted using a transport protocol, i.e. a sequence of bytes.\nThis transformation is referred to as marshalling and the re-\nverse is called unmarshalling.\nCoordination\nBy virtue of the fact that components reside on different\nhosts, distributed systems have multiple points of control.\nComponents on the same host execute concurrently, which\nleads to a need for synchronization when components com-\nmunicate with each other. This synchronization needs to be\nimplemented in the session layer implementation provided\nby the middleware.\nSynchronization can be achieved in different ways. A com-\nponent can be blocked while it waits for another component\nto complete execution of a requested service. This form of\ncommunication is often called synchronous. After issuing a\nrequest, a component can also continue to perform its opera-\ntions and synchronize with the service providing component\nat a later point. This synchronization can then be initiated\nby either the client component (using, for example polling),\nin which case the interaction is often called deferred syn-\nchronous. Synchronization that is initiated by the server is\nreferred to as asynchronous communication. Thus, applica-\ntionengineersneedsome basic mechanismsthat supportvar-\nious formssynchronizationbetween communicatingcompo-\nnents.\nSometimes more than two componentsare involved in a ser-\nvice request. These forms of communications are also re-\nferred to as group requests. This is often the case when more\nthanonecomponentis interestedin eventsthatoccurin some\nother component. An example is a distributed stock ticker\napplication where an event, such as a share price update,\nneeds to be communicated to multiple distributed display\ncomponents, to inform traders about the update. Although\nthe basic mechanisms for this push-style communication are\navailable in multi-cast networking protocolsadditional sup-\nport is needed to achieve reliable delivery and marshalling\nof complex request parameters.A slightly different coordination problem arises due to the\nsheer number of components that a distributed system may\nhave. The components, i.e. modules or libraries, of a cen-\ntralized application reside in virtual memory while the ap-\nplication is executing. This is inappropriate for distributed\ncomponents for the following reasons:\n\uffff Hosts sometimes have to be shut down and components\nhosted on these machines have to be stopped and re-\nstarted when the host resumes operation;\n\uffff Theresourcesrequiredbyallcomponentsonahostmay\nbe greater than the resources the host can provide; and\n\uffff Dependingonthenatureoftheapplication,components\nmay be idle for long periods, thus wasting resources if\nthey were kept in virtual memory all the time.\nFor these reasons, distributed systems need to use a con-\ncept called activation that allows for component executing\nprocesses to be started (activated) and terminated (deacti-\nvated)independentlyfromthe applicationsthat theyexecute.\nThe middleware should manage persistent storage of com-\nponents\u2019 state prior to deactivation and restore components\u2019\nstate during activation. Middleware should also enable ap-\nplication programmers to determine the activation policies\nthat de\ufb01ne when components are activated and de-activated.\nGiven that components execute concurrently on distributed\nhosts, a server component may be requested from different\nclient components at the same time. The middleware should\nsupport different mechanisms called threading policies to\ncontrol how the server component reacts to such concur-\nrentrequests. Theservercomponentmaybesingle-threaded,\nqueue requests and process them in the order of their arrival.\nAlternatively, the component may also spawn new threads\nand execute each request in its own thread. Finally the com-\nponent may use a hybrid threading policy that uses a pool\nwith a \ufb01xed number of threads to execute requests, but starts\nqueueing once there are no free threads in the pool.\nReliability\nNetwork protocols have varying degrees of reliability. Pro-\ntocols that are used in practice do not necessarily guarantee\nthat every packet that a sender transmits is actually received\nby the receiver and that the order in which they are sent is\npreserved. Thus, distributed system implementations have\nto put error detection and correction mechanisms in place to\ncope with these unreliabilities.\nUnfortunately, reliable delivery of service requests and ser-\nvice results does not come for free. Reliability has to be\npaid for with decreases in performance. To allow engineers\nto trade-off reliability and performance in a \ufb02exible manner,\ndifferent degrees of service request reliability are needed in\npractice.\nFor communication about service requests between two\ncomponents, the reliabilities that have been suggested in the\ndistributed system literature are best effort, at-most-once, at-\nleast-onceandexactly-once[13]. Best effortservicerequests\ndo not give any assurance about the execution of the re-\nquest. At-most-once requests are guaranteed to execute only\nonce. It may happen that they are not executed, but then\nthe requester is noti\ufb01ed about the failure. At-least-once ser-\nvice requests are guaranteed to be executed, possibly more\nthan once. The highest degree of reliability is provided by\nexactly-once requests, which are guaranteed to be executed\nonce and only once.\nAdditional reliabilities can be de\ufb01ned for group requests. In\nparticular,theliteraturementionsk-reliability,time-outs,and\ntotally-ordered requests. K-reliability denotes that at least\nK components receive the communication. Time-outs allow\nthe speci\ufb01cation of periods after which no delivery of the\nrequest should be attempted to any of the addressed compo-\nnents. Finally totally-ordered group communication denotes\nthat a request never overtakes a request of a previous group\ncommunication.\nThe above reliability discussion applies to individual re-\nquests. We can extend it and consider more than one re-\nquest. Transactions [18] are important primitives that are\nusedinreliabledistributedsystems. TransactionshaveACID\nproperties, which means they enable multiple request to be\nexecuted in an atomic, consistency-preserving, isolated and\ndurable manner. This means that the sequence of requests\nis either performed completely, or not at all. It enforces that\nevery completed transaction is consistent. It demands that\na transaction is isolated from concurrent transaction and, \ufb01-\nnally that once the transaction is completed its effect cannot\nbe undone. Every middleware that is used in critical applica-\ntions needs to support distributed transactions.\nReliability may also be increased by replicating compo-\nnents [4], i.e. components are available in multiple copies\non different hosts. If one component is unavailable, for ex-\nample because its host needs to be rebooted, a replica on a\ndifferent host can take over and provide the requested ser-\nvice. Sometimes components have an internal state and then\nthe middleware should supportreplication in such a way that\nthese states are kept in sync.\nScalability\nScalability denotes the ability to accommodatea growingfu-\nture load. In centralized or client/server systems, scalability\nis limited by the load that the server host can bear. This can\nbe overcome by distributing the load across several hosts.\nThe challenge of building a scalable distributed system is\nto support changes in the allocation of components to hosts\nwithout changing the architecture of the system or the de-\nsign and code of any component. This can only be achieved\nby respecting the differentdimensions of transparency iden-\nti\ufb01ed in the ISO Open Distributed Processing (ODP) refer-\nence model[24] in the architecture and design of the system.\nAccess transparency, for example demands that the way a\ncomponentaccesses the services of another componentis in-dependent of whether it is local or remote. Another example\nislocationtransparency,whichdemandsthatcomponentsdo\nnot know the physical location of the componentsthey inter-\nact with. A detailed discussion of the different transparency\ndimension is beyondthe scope of this paper and the reader is\nreferred to [13].\nIf components can access services without knowing the\nphysical location and without changing the way they request\nit, load balancing mechanisms can migrate components be-\ntween machines in order to reduce the load on one host and\nincrease it on another host. It should again be transparent\nto users whether or not such a migration occurred. This is\nreferred to as migration transparency.\nReplication can also be used for load balancing. Compo-\nnents whose services are in high demand may have to exist\nin multiple copies. Replication transparency means that it\nis transparent for the requesting components, whether they\nobtain a service from the master component itself or from a\nreplica.\nThe different transparency criteria that will lead to scalable\nsystems are very dif\ufb01cult to achieve if distributed systems\nare built directly on network operating system primitives.\nTo overcomethese dif\ufb01culties, we demand from middleware\nthat they support access, location, migration and replication\ntransparency.\nHeterogeneity\nThe componentsof distributed systems may be procuredoff-\nthe-shelf, may include legacy and new components. As a re-\nsult they are often rather heterogeneous. This heterogeneity\ncomes in different dimensions: hardware and operating sys-\ntem platforms, programming languages and indeed the mid-\ndleware itself.\nHardware platforms use different encodings for atomic data\ntypes, such as numbers and characters. Mainframes use the\nEBCDIC character set, Unix servers may use 7-bit ASCII\ncharacters, while Windows-based PCs use 16-bit Unicode\ncharacter encodings. Thus the character encoding of al-\nphanumeric data that is sent across different types of plat-\nforms has to be adjusted. Likewise, mainframes and RISC\nservers, for example, use big-endian representations for\nnumbers, i.e. the most signi\ufb01cant byte encoding an inte-\nger, long or \ufb02oating point number comes last. PCs, however,\nuse a little-endian representation where the signi\ufb01cance of\nbytes decreases. Thus, whenever a number is sent from a\nlittle-endian host to a big-endian host or vice versa, the or-\nder of bytes with which this number is encoded needs to be\nswapped. This heterogeneity should be resolved by the mid-\ndleware rather than the application engineer.\nWhen integrating legacy components with newly-built com-\nponents, it often occurs that different programming lan-\nguages need to be used. These programming languages\nmay follow different paradigms. While legacy components\ntend to be written in imperative languages, such as COBOL,\nPL/I or C, newer components are often implemented us-\ning object-oriented programming languages. Even different\nobject-oriented languages have considerable differences in\ntheir object model, type system, approach to inheritance and\nlate binding. These differences need to be resolved by the\nmiddleware.\nAs we shall see in the next section, there is not just one, but\nmany approaches to middleware. The availability of differ-\nent middleware solutions may present a selection problem,\nbut sometimes there is no optimal single middleware, and\nmultiplemiddlewaresystemshavetobecombined. Thismay\nbe for a variety of reasons. Different middleware may be\nrequired due to availability of programming language bind-\nings, particular forms of middleware may be more appropri-\nate for particular hardware platforms (e.g. COM on Win-\ndows and CORBA on Mainframes). Finally, the different\nmiddleware systems will have different performance charac-\nteristics and depending on the deployment a different mid-\ndleware may have to be used as a backbone than the mid-\ndleware that is used for local components. Thus middleware\nwill have to be interoperable with other implementations of\nthe same middleware or even different types of middleware\nin order to facilitate distributed system construction.\n3 MIDDLEWARE SOLUTIONS\nIn this section, we review the state of current middleware\nproducts. We identify the extent to which they address the\nabove requirements and highlight their shortcomings. As it\nis impossible to review individual middleware products in\nthis paper, we \ufb01rst present a classi\ufb01cation, which allows us\nto abstract from particular product characteristics and which\nprovidesa conceptualframeworkforcomparingthe different\napproaches.\nThe four categories that we consider are transactional,\nmessage-oriented, procedural,a n dobject or component\nmiddleware. We have chosen this classi\ufb01cation based on the\nprimitives that middleware products provide for the interac-\ntion between distributed components, which are distributed\ntransactions, message passing, remote procedure calls and\nremote object requests.\nTransactional Middleware\nTransactional middleware supports transactions involving\ncomponents that run on distributed hosts. Transaction-\norientedmiddleware uses the two-phasecommitprotocol[3]\nto implement distributed transactions. The products in this\ncategory include IBM\u2019s CICS [22], BEA\u2019s Tuxedo [19] and\nTransarc\u2019s Encina.\nNetwork Communication: Transactionalmiddlewareenables\napplication engineers to de\ufb01ne the services that server com-\nponents offer, implement those server components and then\nwrite clientcomponentsthatrequestseveralofthose services\nwithin a transaction. Client and server components can re-\nside on different hosts and therefore requests are transportedvia the network in a way that is transparent to client and\nserver components.\nCoordination: The client components can request services\nusing synchronous or asynchronous communication. Trans-\nactional middleware supports various activation policies and\nallows services to be activated on demand and deactivated\nwhen they have been idle for some time. Activation can also\nbe permanent, allowing the server component to always re-\nside in memory.\nReliability: A client component can cluster more than one\nservice request into a transaction, even if the server compo-\nnents reside on different machines. In order to implement\nthese transactions, transactional middleware has to assume\nthat the participating servers implement the two-phase com-\nmit protocol. If server components are built using database\nmanagement systems, they can delegate implementation of\nthe two-phase commit to these database management sys-\ntems. For this implementation to be portable, a standard has\nbeen de\ufb01ned. The Distributed Transaction Processing (DTP)\nProtocol, which has been adopted by the Open Group, de-\n\ufb01nes a programmatic interface for two-phase commit in its\nXA-protocol[43]. DTPiswidelysupportedbyrelationaland\nobject-oriented database management systems. This means\nthat distributed componentsthat have been built using any of\nthese database managementsystems can easily participate in\ndistributed transactions. This makes them fault-tolerant, as\nthey automatically recover to the end of all completed trans-\nactions.\nScalability: Most transaction monitors support load bal-\nancing, and replication of server components. Replication\nof servers is often based on replication capabilities that\nthe database management systems provide upon which the\nserver components rely.\nHeterogeneity: Transactional middleware supports hetero-\ngeneity because the components can reside on different\nhardware and operating system platforms. Also different\ndatabase management systems can participate in transac-\ntions, due to the standardized DTP protocol. Resolution of\ndata heterogeneity is, however, not well-supported by trans-\nactional middleware, as the middleware does not provide\nprimitives to express complex data structures that could be\nused as service request parameters and therefore also does\nnot marshal them.\nThe above discussion has shown that transactional middle-\nware can simplify the construction of distributed systems.\nTransactional middleware,however,has several weaknesses.\nFirstly, it creates an undueoverheadif there is no need to use\ntransactions, or transactions with ACID semantics are inap-\npropriate. This is the case, for example, when the client per-\nforms long-lived activities. Secondly, marshalling and un-\nmarshallingbetweenthe data structures that a client uses and\nthe parameters that services require needs to be done man-\nually in many products. Thirdly, although the API for the\ntwo-phase commit is standardized, there is no standardized\napproach for de\ufb01ning the services that server components\noffer. This reduces the portability of a distributed system be-\ntween different transaction monitors.\nMessage-Oriented Middleware\nMessage-oriented middleware (MOM) supports the commu-\nnication between distributed system components by facili-\ntating message exchange. Products in this category include\nIBM\u2019s MQSeries [16] and Sun\u2019s Java Message Queue [20].\nNetwork Communication: Client components use MOM to\nsend a message to a server component across the network.\nThe message can be a noti\ufb01cation about an event, or a re-\nquest for a service execution from a server component. The\ncontent of such a message includes the service parameters.\nThe server responds to a client request with a reply-message\ncontaining the result of the service execution.\nCoordination: A strength of MOM is that this paradigmsup-\nports asynchronous message delivery very naturally. The\nclient continues processing as soon as the middleware has\ntakenthemessage. Eventuallytheserverwillsenda message\nincluding the result and the client will be able to collect that\nmessage at an appropriate time. This achieves de-coupling\nof client and server and leads to more scalable systems. The\nweakness, at the same time, is that the implementation of\nsynchronous requests is cumbersome as the synchronization\nneeds to be implemented manually in the client. A further\nstrength of MOM is that it supports group communication\nby distributing the same message to multiple receivers in a\ntransparent way.\nReliability: MOM achieves fault-tolerance by implementing\nmessage queues that store messages temporarily on persis-\ntent storage. The sender writes the message into the message\nqueue and if the receiver is unavailable due to a failure, the\nmessage queueretainsthe message until the receiveris avail-\nable again.\nScalability: MOMs do not support access transparency very\nwell, because client components use message queues for\ncommunication with remote components, while it does not\nmake sense to use queues for local communication. This\nlack of access transparency disables migration and replica-\ntion transparency, which complicates scalability. Moreover,\nqueues need to be set up by administrators and the use of\nqueues is hard-coded in both client and server components,\nwhich leads to rather in\ufb02exible and poorly adaptable archi-\ntectures.\nHeterogeneity: MOM does not support data heterogeneity\nvery well either, as the application engineers have to write\nthe code that marshals. With most products, there are differ-\nent programming language bindings available.\nIn assessing the strengths and weaknesses of MOM, we\ncan note that this class of middleware is particularly well-\nsuited for implementing distributed event noti\ufb01cation andpublish/subscribe-based architectures. The persistence of\nmessage queues means that this event noti\ufb01cation can be\nachieved in fault tolerant ways so that components receive\nevents when they restart after a failure. However, message-\noriented middleware also has some weaknesses. It only sup-\nports at-least once reliability. Thus the same message could\nbe deliveredmore than once. Moreover,MOM does not sup-\nport transaction properties, such as atomic delivery of mes-\nsages to all or none receivers. There is only limited support\nfor scalability and heterogeneity.\nProcedural Middleware\nRemote Procedure Calls (RPCs) were devised by Sun Mi-\ncrosystems in the early 1980s as part of the Open Network\nComputing (ONC) platform. Sun provided remote proce-\ndure calls as part of all their operating systems and submit-\nted RPCs as a standard to the X/Open consortium, which\nadoptedit as part of the Distributed ComputingEnvironment\n(DCE) [36]. RPCs are now available on most Unix imple-\nmentations and also on Microsoft\u2019s Windows operating sys-\ntems.\nNetwork Communication: RPCs support the de\ufb01nition of\nserver components as RPC programs. An RPC program ex-\nports a number of parameterized procedures and associated\nparametertypes. Clientsthatresideonotherhostscan invoke\nthose proceduresacrossthe network. Proceduralmiddleware\nimplements these procedure calls by marshalling the param-\neters into a message that is sent to the host where the server\ncomponent is located. The server component unmarshalls\nthe message and executes the procedure and transmits mar-\nshalledresultsbacktotheclient,ifrequired. Marshallingand\nunmarshalling are implemented in client and server stubs,\nthat are automatically created by a compiler from an RPC\nprogram de\ufb01nition.\nCoordination: RPCs are synchronous interactions between\nexactly one client and one server. Asynchronous and multi-\ncast communication is not supported directly by procedu-\nral middleware. Procedural middleware provides different\nforms of activating server components. Activation policies\nde\ufb01ne whether a remote procedure program is always avail-\nable or has to be started on demand. For startup on demand,\nthe RPC server is started by an inetd daemon as soon as a\nrequest arrives. The inetd requires an additional con\ufb01gura-\ntion table that provides for a mapping between remote pro-\ncedure program names and the location of programs in the\n\ufb01le system.\nReliability: RPCs are executed with at-most once semantics.\nThe procedural middleware returns an exception if an RPC\nfails. Exactly-once semantics or transactions are not sup-\nported by RPC programs.\nScalability: The scalability of RPCs is rather limited. Unix\nand Windows RPCs do not have any replication mechanisms\nthat could be used to scale RPC programs. Thus replication\nhastobeaddressedbythedesigneroftheRPC-basedsystem,\nwhich means in practice that RPC-based systems are only\ndeployed on a limited scale.\nHeterogeneity: Procedural middleware can be used with dif-\nferent programming languages. Moreover, it can be used\nacross different hardware and operating system platforms.\nProcedural middleware standards de\ufb01ne standardized data\nrepresentations that are used as the transport representation\nof requests and results. DCE, for example standardizes the\nNetworkData Representation(NDR) forthispurpose. When\nmarshalling RPC parameters, the stubs translate hardware-\nspeci\ufb01c data representations into the standardized form and\nthe reverse mapping is performed during unmarshalling.\nProcedural middleware is weaker than transactional middle-\nware and MOM as it is not as fault tolerant and scalable.\nMoreover, the coordination primitives that are available in\nprocedural middleware are more restricted as they only sup-\nport synchronous invocation directly. Procedural middle-\nware improve transactional middleware and MOM with re-\nspect to interface de\ufb01nitions from which implementations\nthat automatically marshal and unmarshal service parame-\nters and results. A disadvantage of procedural middleware\nis that this interface de\ufb01nition is not re\ufb02exive. This means\nthat proceduresexported by one RPC program cannot return\nanother RPC program. Object and component middleware\nresolve this problem.\nObject and Component Middleware\nObject middleware evolvedfrom RPCs. The developmentof\nobject middleware mirrored similar evolutions in program-\nming languages where object-oriented programming lan-\nguages, such as C++ evolved from procedural programming\nlanguagessuchasC.Theideahereistomakeobject-oriented\nprinciples, such as object identi\ufb01cation through references\nand inheritance, available for the development of distributed\nsystems. Systems in this class of middleware include the\nCommon Object Request Broker Architecture (CORBA) of\nthe OMG [34, 37], the latest versions of Microsoft\u2019s Com-\nponent Object (COM) [5] and the Remote Method Invoca-\ntion (RMI) capabilities that have been available since Java\n1.1 [28]. More recent products in this category include mid-\ndleware that supportsdistributed components,such as Enter-\nprise Java Beans [30]. Unfortunately, we can only discuss\nand compare this important class of middleware brie\ufb02y and\nrefer to [8, 13] for more details.\nNetwork Communication: Object middleware support dis-\ntributed object requests, which mean that a client object re-\nquests the executionof an operationfrom a server object that\nmay reside on another host. The client object has to have\nan object reference to the server object. Marshalling oper-\nation parameters and results is again achieved by stubs that\nare generated from an interface de\ufb01nition.\nCoordination: The default synchronization primitives in ob-\nject middleware are synchronous requests, which block the\nclient objectuntilthe serverobjecthasreturnedthe response.However,theothersynchronizationprimitivesaresupported,\ntoo. CORBA 3.0, for example, supports both deferred syn-\nchronous and asynchronous object requests. Object middle-\nware supports different activation policies. These include\nwhether server objects are active all the time or started on-\ndemand. Threading policies are available that determine\nwhether new threads are started if more than one opera-\ntion is requested by concurrent clients, or whether they are\nqueued and executed sequentially. CORBA also supports\ngroupcommunicationthroughits EventandNoti\ufb01cationser-\nvices. This service can be used to implement push-style ar-\nchitectures.\nReliability: The default reliability for object requests is at-\nmost once. Object middleware support exceptions, which\nclients catch in order to detect that a failure occurred during\nexecution of the request. CORBA messaging, or the Noti\ufb01-\ncation service [33] can be used to achieveexactly-oncerelia-\nbility. Object middleware also supports the concept of trans-\nactions. CORBA has an Object Transaction service [32] that\ncan be used to cluster requests from several distributed ob-\njects into transactions. COM is integrated with Microsoft\u2019s\nTransactionServer[21], andtheJava TransactionService[7]\nprovides the same capability for RMI.\nScalability: The support of object middleware for build-\ning scalable applications is still somewhat limited. Some\nCORBA implementationssupportload-balancing,for exam-\nple by employing using name servers that return an object\nreference for a server on the least loaded host, or using fac-\ntories that create server objects on the least loaded host, but\nsupport for replication is still rather limited.\nHeterogeneity: Object middlewaresupports heterogeneityin\nmany different ways. CORBA and COM both have multi-\nple programminglanguage bindings so that client and server\nobjects do not need to be written in the same programming\nlanguage. They both have a standardized data representation\nthat they use to resolve heterogeneity of data across plat-\nforms. Java/RMI takes a different approach as heterogene-\nity is already resolved by the Java Virtual Machine in which\nboth client and server objects reside. The different forms\nof object middleware inter-operate. CORBA de\ufb01nes the In-\nternet Inter-Orb Protocol (IIOP) standard [34], which gov-\nerns how different CORBA implementations exchange re-\nquest data. Java/RMI leverages this protocol and uses it as\na transport protocol for remote method invocations, which\nmeans that a Java client can perform a remote method in-\nvocation of a CORBA server and vice versa. CORBA also\nspeci\ufb01es an inter-workingspeci\ufb01cationto Microsoft\u2019sCOM.\nObject middleware providesvery powerfulcomponentmod-\nels. They integrate most of the capabilities of transactional,\nmessage-oriented or procedural middleware. However, the\nscalabilityofobjectmiddlewareis still ratherlimitedandthis\ndisables use of the distributed object paradigm on a large-\nscale.\n4 MIDDLEWARE STATE-OF-THE-ART\nWhile middleware products are already successfully em-\nployed in industrial practice, they still have several short-\ncomings, which prevent their use in many application do-\nmains. These weaknesses lead to relatively in\ufb02exible sys-\ntemsthatdo notrespondwell to changingrequirements;they\ndo not really scale beyond local area networks; they are not\nyetdependableandarenotsuitedtouseinwirelessnetworks.\nIn this section, we review the state-of-the-art of middleware\nresearch that addresses the current weaknesses that will in-\n\ufb02uence the next-generationof middleware products. We dis-\ncuss trading, re\ufb02ection and application-leveltransport mech-\nanisms that support the construction of more \ufb02exible soft-\nware architectures. We present replication techniques that\nwill lead to better scalability and fault-tolerance. We then\ndiscuss research into middleware that supports real-time ap-\nplicationsand\ufb01nallyaddressmiddlewareresearchresultsfor\nmobile and pervasive computing.\nFlexible Middleware\nTrading: Most middleware products use naming for com-\nponent identi\ufb01cation: MOMs use named message queues,\nDCE hasa Directoryservice, CORBA hasa Namingservice,\nCOM uses monikers and Java/RMI uses the RMIRegistry to\nbind names to components. Before a client component can\nmake a request, it has to resolve a name binding in order\nto obtain a reference to the server component. This means\nthat clients need to uniquely identify their servers, albeit in\na location-transparent way. In many application domains, it\nis unreasonable to assume that client components can iden-\ntify the component from which they can obtain a service.\nEven if they can, this leads to in\ufb02exible architectures where\nclientcomponentscannotdynamicallyadapttobetterservice\nproviders becoming available.\nTrading has been suggested as an alternative to naming and\nit offers more \ufb02exibility. The ISO/ODP standard de\ufb01nes the\nprincipal characteristics of trading [2]. The idea is similar to\nthe yellow pages of the telephone directory. Instead of us-\ning names, components are located based on service types.\nThe trader registers the type of service that a server compo-\nnentoffersandtheparticularqualitiesofservice (QoS)thatit\nguarantees. Clients can then query the trader for server com-\nponents that provide a particular service type and demand\nthe QoS guarantees from them. The trader matches such a\nservice query with the service offers that it knows about and\nreturns a component reference to the client. From then on\nthe client and the server communicate without involvement\nof the trader.\nThe idea of trading has matured and is starting to be adopted\nin middleware products. The OMG has de\ufb01ned a Trading\nservice [32] that adapts the ODP trader ideas to the dis-\ntributed object paradigm and \ufb01rst implementations of this\nservice are becoming available. Thus trading enables the dy-\nnamic connection of clients with server components basedon the service characteristics rather than the server\u2019s name.\nRe\ufb02ection: Another approach to more \ufb02exible execution en-\nvironmentsforcomponentsisre\ufb02ection. Re\ufb02ectionis awell-\nknown paradigm in programming languages [17]. Programs\nuse re\ufb02ection mechanisms to discover the types or classes\nand de\ufb01ne method invocations at run-time. Re\ufb02ection is al-\nreadysupportedto some extendbycurrentmiddlewareprod-\nucts. The interface repository and dynamic invocation in-\nterface of CORBA enable client programmers to discover\nthe types of server componentsthat are currently known and\nthen dynamicallycreate requeststhat invokeoperationsfrom\nthese components.\nCurrent research into re\ufb02ective middleware [9] goes beyond\nre\ufb02ective object and component models. It aims to support\nmeta object protocols [29]. These protocols are used for in-\nspection and adaptation of the middleware execution envi-\nronment itself. In [12] it is suggested, for example, to use\nan environment meta-model. Inspection of the environment\nmeta-model supports queries of the middleware\u2019s behaviour\nupon events, such as message arrival, enqueuing of requests,\nmarshalling and unmarshalling,thread creation and schedul-\ning of requests. Adaptation of the environment meta-model\nenables components to adjust the behaviour of the middle-\nware to any of those events.\nApplication-level Transport Protocols: While marshalling\nand unmarshalling is mostly best done by the middleware,\nthere are applications, where the middleware creates an un-\ndue overhead. One important application of re\ufb02ection is\ntherefore to marshalling. This is particularly the case when\nthere is an application-speci\ufb01c data representation that is\namenable for transmission through a network that and het-\nerogeneity does not need to be resolved by the middleware.\nIn [14] we investigate the combined use of middleware and\nmarkup-languages, such as XML [14]. We suggest to trans-\nmitXMLdocumentsasuninterpretedbytestringsusingmid-\ndleware. Thiscombinationismotivatedbythefactthat XML\nsupports semantic translations between data structures and\nby the fact that existing markup language de\ufb01nitions, such\nas FpML [15] or FIXML [23] can be leveraged. On the other\nhad, the HTTP protocol with which XML was originally\nused is clearly inappropriateto meet reliabilityrequirements.\nIt can be expected that interoperability between application-\nlevel and middleware data-structures will become available\nin due course, because the OMG have started an adoption\nprocess for technology that will provide seamless interoper-\nability between CORBA data structures and XML structured\ndocuments [35].\nScalable Middleware\nAlthough middleware is successfully used in scalable ap-\nplications on local-area networks, current middleware stan-\ndards and products impose limitations that prevent their use\nin globally distributed systems. In particular, current mid-\ndleware platforms do not support replication to the neces-\nsary extent to achieve global distribution [31]. State of the\nart research addresses this problem through non-transparent\nreplication.\nReplication: Tanenbaum is addressing this problem for dis-\ntributed object middleware in the Globe project [42]. The\naim of Globe is to provide an object based middleware that\nscales to a billion users. To achieve this aim, Globe makes\nextensive use of replication. Unlike other replication mecha-\nnisms, such as Isis [4], Globe does not assume the existence\nof a universally applicable replication strategy. It rather sug-\ngests that replication policies have to be object-type speci\ufb01c,\nand therefore they have to be determined by server object\ndesigners. Thus, Globe assumes that each type of object its\nown strategy that proactively replicates objects.\nReal-time Middleware\nA good summary of the state of the art in real-time middle-\nware has been producedin the EU fundedCaberNet network\nof excellence by [1].\nMost current middleware products are only of limited use in\nreal-time and embedded systems because all requests have\nthe same priority. Moreover the memory requirements of\ncurrent middleware products prevent deployment in embed-\nded systems. These problems have been addressed by vari-\nous research groups. TAO [39] is a real-time CORBA pro-\ntotype developed that supports request prioritization and the\nde\ufb01nition of scheduling policies. The CORBA 3.0 speci\ufb01ca-\ntion [41] builds on this research and standardizes real-time\nand minimal middleware.\nMiddleware for Mobile Computing\nCurrent middleware products assume continuous availabil-\nity of high-bandwidth network connections. These cannot\nbe achieved with physically mobile hosts for various rea-\nsons. Wireless local area network protocols, such as Wave-\nLAN, do achieve reasonable bandwidth. However, they only\noperate if hosts are within reach of a few hundred metres\nfrom their base station. Network outages occur if mobile\nhosts roam across areas covered by different base stations or\nif they enter \u2018radio shadows\u2019. Wide-area wireless network\nprotocols, such as GSM have similar problems during cell\nhandovers. In addition, their bandwidth is by orders of mag-\nnitude smaller; GSM achieves at most 9,600 baud. State-of-\nthe-art wireless and wide-area protocols, such as GSRM and\nUTMS will improvethis situation. However,they will not be\navailable for another two years.\nSeveral problems occur when current middleware products\nare used with these wireless network protocols. Firstly, they\nall treat unreachability of server or client components as\nexceptional situation and raise errors that client or server\ncomponent programmers have to deal with. Secondly, the\ntransport representation that is chosen for wired networks\nwith bandwidth beyond 100Mbit does not need to be size-\nef\ufb01cient. Middleware products are therefore optimized to\nsimplify both, the translation between different heteroge-neous data representations, and the routing of messages to\ntheir intended receivers. Such optimizations do not need to\nchoose size ef\ufb01cient encodings for the network protocol and\nare therefore inappropriate when packets are sent through a\n9,600 baud wireless connection.\nResearch into middleware for mobile computing aims to\novercome these issues by providing coordination primitives,\nsuch as tuple spaces, that treat unreachability as normal\nrather than exceptional situations. Moreover, they use com-\npressed transport representation to save bandwidth. A good\noverview into the state of the art for mobile middleware is\ngiven by [38] and we therefore avoid to delve into detail in\nthis paper.\n5 MIDDLEWARE AND SOFTWARE ENGINEER-\nING RESEARCH\nIn this section, we analyze the consequencesof the availabil-\nity of middleware products and their evolution as a result of\nmiddleware research on the software engineering research\nagenda. We argue on the importance of non-functional\nrequirements for building software systems with existing\nand upcoming middleware and identify a need for require-\nments engineering techniques that focus on non-functional\nrequirements. We identify that software architecture re-\nsearch should producemethodsthat systematically guide en-\ngineers towards selecting the right middleware and employ-\ning it in such a way that it meets a set of non-functional re-\nquirements. We then highlight that the use of middleware is\nnot transparent for system design and that design methods\nare needed that address this issue.\nTwo trends are important for the discussion of the impact of\nmiddleware on software engineering research. Firstly, mid-\ndleware products are conceived to deliver immediate ben-\ne\ufb01ts in the construction of distributed systems. They are\ntherefore rapidly adopted in industry. Secondly, middleware\nvendors have a proven track record to incorporate middle-\nware research results into their products. An example is the\nISO/ODP Trader, which was de\ufb01ned in 1993, adopted as a\nCORBA standard in 1997 and last year became available in\nthe \ufb01rst CORBA products. There is therefore a good chance\nthat some of the state-of-the-art research in the areas of \ufb02ex-\nible, scalable, real-time and mobile middleware will become\nstate of the practice in 3-5 years.\nUnless research into software engineering for distributed\nsystemsdeliversprinciples,notations,methodsandtoolsthat\nare compatible with the capabilities that current middleware\nproducts provide and that middleware research will gener-\nate in the future, software engineering research results will\nonlybe oflimited industrialsigni\ufb01cance. Industrywill adopt\nthe middleware that is known to deliver the bene\ufb01ts and ig-\nnore incompatible software engineering methods and tools.\nMiddleware products and research, however, only support\nprogramming and largely ignore all other activities that are\nneeded in software processes for distributed systems. We,\ntherefore,haveachancetoachieveasymbiosisbetweensoft-\nware engineering and middleware. The aim of this section\nis to identify the software engineering research themes that\nwill lead to the principles, notations, methods and tools that\nare needed to support all life cycle activities when building\ndistributed systems using middleware.\nRequirements Engineering\nThe challenges of co-ordination, reliability, scalability and\nheterogeneity in distributed system construction that we\ndiscussed in Section 2 and that engineers are faced with\nare of a non-functional nature. Software engineers thus\nhave to de\ufb01ne software architectures that meet these non-\nfunctional requirements. However, the relationship between\nnon-functional requirements and software architectures is\nonly very poorly understood. We \ufb01rst discuss the require-\nments engineering end of this relationship.\nExisting requirements engineering methods tend to have a\nvery strong focus on functional requirements. In particu-\nlar the object-oriented and use-case driven approachesof Ja-\ncobsen [27] and more recently Rational [26] more or less\ncompletely ignore non-functionalconcerns. A goal-oriented\napproach, such as [10] seems to provide a much better ba-\nsis, but needs to be augmented to speci\ufb01cally address non-\nfunctional concerns.\nFor non-functionalgoals to be a useful input to middleware-\noriented architecting, these goals need to be quanti\ufb01ed.F o r\nexample, in order to engineer scalable architectures, engi-\nneers need to have quantitative requirements models for the\nrequired response time, peak loads and overall transaction\nor data volume that an architecture is expected to scale up\nto. Thus requirements engineering research needs to devise\nmethods and tools that can be used to elicit and model non-\nfunctional requirements from a quantitative point of view.\nOnce a particular middleware system has been chosen for\na software architecture, it is extremely expensive to revert\nthat choice and adopt a different middleware or a different\narchitecture. The choice is in\ufb02uenced by the non-functional\nrequirements. Unfortunately, requirements tend to be unsta-\nbleandchangeovertime. Non-functionalrequirementsoften\nchangewith the setting in which the system is embedded,for\nexample when new hardware or operating system platforms\nare addedas a result of a merger,or when scalability require-\nmentsincrease as a result of havingto build web-basedinter-\nfaces that customers use directly. Requirements engineering\nmethods, therefore, not only have to identify the current re-\nquirements, but also elicit and estimate the ranges in which\ntheycanevolveduringtheplannedlifetimeofthedistributed\nsystem.\nSoftware Architecture\nThere is only very little work on the in\ufb02uence of middle-\nware on software architectures, with [11] being a notable\nexception. Indeed, we believe that research on software ar-\nchitecture description languages has over-emphasized func-tionality and not suf\ufb01ciently addressed the speci\ufb01cation of\nhow global properties and non-functional requirements are\nachieved in an architecture. These requirements cannot be\nattributed to individual components or connectors and can\nthereforenotbespeci\ufb01ed bycurrentarchitecturaldescription\nlanguages.\nDistributed software engineering research needs to identify\nnotations, methods and tools that support architecting.R e -\nsearch needs to provide methods that help software engi-\nneersto systematicallyderivesoftwarearchitecturesthat will\nmeet a set of non-functional requirements and overcome the\nguesswork that is currently being done. This includes sup-\nport for identifying the appropriate middleware or combina-\ntions of middlewares for the problem at hand. Moreover,\nsoftware engineering research needs to de\ufb01ne architecting\nprocesses that are capable of mitigatingthe risks of choosing\nthe wrong middleware or architectures. These processes will\nneed to rely on methods that quantitatively model the per-\nformance and scalability that a particular middleware-based\narchitecture will achieve and use validation techniques, such\nas model checking, to validate that models actually do meet\nthe requirements. The models need to be calibrated using\nmetrics that have been collected by observing middleware\nperformance in practice.\nMany architecture description languages support the explicit\nmodeling of connectors by means of which components\ncommunicate [40]. A main contribution of [11] is the ob-\nservation that connectors are most often implemented using\nmiddlewareprimitives. We wouldlike to add the observation\nthat each middlewareonly supportsa verylimited set of con-\nnectors. Specifying the behaviour of connectors explicitly in\nan ADL is therefore modelling overkill that is only needed\nif architects opt out of using middleware at all. For most ap-\nplications, the speci\ufb01cation of each connector is completely\nunnecessary. Instead, software architecture research should\ndevelop middleware-oriented ADLs that have built-in sup-\nport for all connectorsprovidedby the middleware that prac-\ntitioners actually use.\nDesign\nIn [13], we have argued that the use of middleware in a de-\nsign is not, and never will be, entirely transparent to de-\nsigners. There are a number of factors that, despite of the\nISO/ODP transparency dimensions, necessitate designers to\nbe aware of the involvementof middleware in the communi-\ncation between components. These factors are:\n\uffff Network latency implies that the communication be-\ntween two distributed components is by orders of mag-\nnitude slower than a local communication.\n\uffff Component activation and de-activation of state-\nful components lead to a need for implementing\npersistence of these components.\n\uffff Components need to be designed so that they can cope\nwith the concurrent interactions that occur in a dis-\ntributed environment.\n\uffff The componentshave a choice of the differentsynchro-\nnization primitives a particular middleware offers, and\nneedtoexploitthemproperly. Inparticular,theyhaveto\navoid the deadlocksor liveness problemsthat can occur\nas a result of using these synchronization primitives.\nThe software engineering community needs to develop\nmiddleware-oriented design notations, methods and tools\nthat take the above concerns into account.\nDiscussing the state of the art middleware research above,\nwe have highlighted a trend to give the programmer more\nin\ufb02uence on how the middleware behaves. Globe\u2019s repli-\ncation strategies, TAO\u2019s scheduling policies and re\ufb02ection\ncapabilities that in\ufb02uence the middleware execution engine\nhave to be used by the designer. This means, effectively,\nthat the programmer gets to see more of the middleware and\nthat distribution and heterogeneity become less transparent.\nIf this is really necessary, and the middleware research com-\nmunityputsforwardgoodreasons, programmerswillhaveto\nbe aided even more in the design of distributed components.\nThusappropriateprinciples, notations,methodsandtoolsfor\nthe design of replication strategies, scheduling policies and\nthe use re\ufb02ection capabilities are needed from software en-\ngineering research.\n6 SUMMARY\nWe have discussed why the construction of distributed sys-\ntems is dif\ufb01cult and indicated the supportthat software engi-\nneers can expect from current middleware products to sim-\nplify the task. We have then reviewed the current state of the\nart in middlewareresearchand used thisknowledgeto derive\na software engineeringresearch agenda that will produce the\nprinciples, notations, methods and tools that are needed to\nsupport all activities during the life cycle of a software engi-\nneering process.\nREFERENCES\n[1] J. Bates. The State of the Art in Distributed and De-\npendable Computing. Technical report, Laboratory for\nCommunications Engineering, Cambridge University,\nhttp://www.newcastle.research.ec.org/cabernet/sota/report,\nOct. 1998.\n[2] M. Bearman. ODP-Trader. In Proc. of the IFIP TC6/WG6.1\nInt. Conf. on Open Distributed Processing, Berlin, Germany,\npages 341\u2013352. North-Holland, 1993.\n[3] P. A. Bernstein, V. Hadzilacos, and N. Goodman. Concur-\nrency Control and Recovery in Database Systems. Addison\nWesley, 1987.\n[ 4 ] K .P .B i r m a n . Building Secure and Reliable Network Appli-\ncations. Manning Publishing, 1997.\n[5] D. Box. Essential COM. Addison Wesley Longman, 1998.\n[6] J. Charles. Middleware Moves to the Forefront. IEEE Com-\nputer, pages 17\u201319, May 1999.[7] S. Cheung. Java Transaction Service (JTS). Sun Microsys-\ntems, 901 San Antonio Road, Palo Alto, CA 94303, Mar.\n1999.\n[8] P. Chung, Y. Huang, S. Yajnik, D. Liang, J. Shin, C.-Y. Wang,\nand Y.-M. Wang. DCOM and CORBA: Side by Side, Step by\nStep, and Layer by Layer. C++ Report, pages 18\u201329, January\n1998.\n[9] P. Cointe, editor. Meta-Level Architectures and Re\ufb02ec-\ntion:\n2\nn\nd International Conference, Re\ufb02ection \u201999, St. Malo,\nFrance, volume 1616 of Lecture Notes in Computer Science.\nSpringer, 1999.\n[10] A. Dardenne, A. van Lamswerde, and S. Fickas. Goal-\ndirected Requirements Acquisition. Science of Computer Pro-\ngramming, 20:3\u201350, 1993.\n[11] E. di Nitto and D. Rosenblum. Exploiting ADLs to Specify\nArchitectural Styles Induced by Middleware Infrastructures.\nIn Proc. of the\n2\n1\ns\nt Int. Conf. on Software Engineering, Los\nAngeles, California, pages 13\u201322. ACM Press, 1999.\n[12] F. Eliassen, A. Andersen, G. S. Blair, F. Costa, G. Coulson,\nV. Goebel, O. Hansen, T. Kristensen, T. Plagemann, H. O.\nRafaelsen, K. B. Saikoski, and W. Yu. Next Generation Mid-\ndleware: Requirements, Architecture and Prototypes. In Pro-\nceedings of the\n7\nt\nh IEEE Workshop on Future Trends in Dis-\ntributed Computing Systems, pages 60\u201365. IEEE Computer\nSociety Press, Dec. 1999.\n[13] W. Emmerich. Engineering Distributed Objects. John Wiley\n& Sons, Apr. 2000.\n[14] W. Emmerich, A. Finkelstein, and W. Schwarz. Markup\nMeets Middleware. In\n7\nt\nh Int. Workshop on Future Trends\nin Distributed Systems, Capetown, South Africa, pages 261\u2013\n266. IEEE Computer Society Press, 1999.\n[15] FpML. Introducing FpML: A New Standard for e-commerce.\nhttp://www.fpml.org, 1999.\n[16] L. Gilman and R. Schreiber. Distributed Computing with IBM\nMQSeries. Wiley, 1996.\n[17] A. Goldberg. Smalltalk-80: The Language and its Implemen-\ntation. Addison Wesley, 1985.\n[18] J. N. Gray. Notes on Database Operating Systems. In\nR. Bayer, R. Graham, and G. Seegm\u00a8 uller, editors, Operating\nsystems: An advanced course, volume 60 of Lecture Notes\nin Computer Science, chapter 3.F., pages 393\u2013481. Springer,\n1978.\n[19] C. L. Hall. Building Client/Server Applications Using\nTUXEDO. Wiley, 1996.\n[20] M. Hapner, R. Burridge, and R. Sharma. Java Message\nService Speci\ufb01cation. Technical report, Sun Microsystems,\nhttp://java.sun.com/products/jms, Nov. 1999.\n[21] S. Hillier. Microsoft Transaction Server Programming.M i -\ncrosoft Press, 1998.\n[22] E. S. Hudders. CICS: A Guide to Internal Structure. Wiley,\n1994.\n[23] In\ufb01nity. In\ufb01nity Network Trade Model Overview.\nhttp://www.in\ufb01nity.com/ntm/pdf/ntmOverview.pdf, 1999.\n[24] ISO 10746-1. Open Distributed Processing \u2013 Reference\nmodel. Technical report, International Standardization Orga-\nnization, 1998.\n[25] ISO 7498-1. Information processing systems \u2013 Open Systems\nInterconnection \u2013 Basic Reference Model: The Basic Model.\nTechnical report, International Standards Organisation, 1994.\n[26] I. Jacobson, G. Booch, and J. Rumbaugh. The Uni\ufb01ed Soft-\nware Development Process. Addison Wesley, 1999.\n[27] I. Jacobson, M. Christerson, P. Jonsson, and G. \u00a8 Overgaard.\nObject-Oriented Software Engineering: A Use Case Driven\nApproach. Addison Wesley, 1992.\n[28] JavaSoft. Java Remote Method Invocation Speci\ufb01cation,r e v i -\nsion 1.50, jdk 1.2 edition, Oct. 1998.\n[29] G. Kiczales, J. d. Rivi` eres, and D. G. Bobrow. The Art of the\nMetaobject Protocol. MIT Press, 1991.\n[30] R. Monson-Haefel. Enterprise Javabeans. O\u2019Reilly UK,\n1999.\n[31] B. C. Neuman. Scale in Distributed Systems. In T. Casavant\nand M. Singhal, editors, Readings in Distributed Computing\nSystems. IEEE Computer Society press, 1994.\n[32] Object Management Group. CORBAservices: Common Ob-\nject Services Speci\ufb01cation, Revised Edition. 492 Old Con-\nnecticut Path, Framingham, MA 01701, USA, December\n1998.\n[33] Object Management Group. Noti\ufb01cation Service. 492 Old\nConnecticut Path, Framingham, MA 01701, USA, Jan. 1998.\n[34] Object Management Group. The Common Object Request\nBroker: Architecture and Speci\ufb01cation Revision 2.2. 492 Old\nConnecticut Path, Framingham, MA 01701, USA, February\n1998.\n[35] Object Management Group. XML/Value Request for Propos-\nals. 492 Old Connecticut Path, Framingham, MA 01701,\nUSA, Aug. 1999.\n[36] Open Group, editor. DCE 1.1: Remote Procedure Calls.T h e\nOpen Group, 1997.\n[37] R. Orfali, D. Harkey, and J. Edwards. Instant CORBA. Wiley,\n1997.\n[38] G.-C. Roman, A. L. Murphy, and G. P. Picco. A Software\nEngineering Perspective on Mobility. In A. C. W. Finkelstein,\neditor, Future of Software Engineering. ACM Press, 2000.\n[39] D. Schmidt, C. Gill, and D. Levine. Evaluating Strategies for\nReal-Time CORBA Dynamic Scheduling. In\n1\n9\nt\nh Interna-\ntional IEEE Real-Time Symposium. IEEE Computer Society\nPress, 1998.\n[40] M. Shaw and D. Garlan. Software Architecture: Perspectives\non an Emerging Discipline. Prentice Hall, 1996.\n[41] J. Siegel. Component and Object Technology: A Preview of\nCORBA 3. IEEE Computer, pages 114\u2013116, May 1999.\n[42] M. v. Steen, P. Homburg, and A. S. Tanenbaum. Globe: A\nWide-Area Distributed System. IEEE Concurrency, pages\n70\u201378, January-March 1999.\n[43] X/Open Group. Distributed Transaction Processing: The\nXA+ Speci\ufb01cation, Version 2. X/Open Company, ISBN 1-\n85912-046-6, Reading, UK, 1994.",
      "id": 537708,
      "identifiers": [
        {
          "identifier": "oai:eprints.ucl.ac.uk.oai2:787",
          "type": "OAI_ID"
        },
        {
          "identifier": "1669452",
          "type": "CORE_ID"
        }
      ],
      "title": "Software engineering and middleware: a roadmap (Invited talk)",
      "language": {
        "code": "en",
        "name": "English"
      },
      "magId": null,
      "oaiIds": [
        "oai:eprints.ucl.ac.uk.oai2:787"
      ],
      "publishedDate": "2000-01-01T00:00:00",
      "publisher": "ACM Press",
      "pubmedId": null,
      "references": [
        {
          "id": 38290536,
          "title": "A Software Engineering Perspective on Mobility. In",
          "authors": [],
          "date": "2000",
          "doi": null,
          "raw": "G.-C. Roman, A. L. Murphy, and G. P. Picco. A Software Engineering Perspective on Mobility. In A. C. W. Finkelstein, editor, Future of Software Engineering. ACM Press, 2000.",
          "cites": null
        },
        {
          "id": 38290539,
          "title": "Component and Object Technology: A Preview of CORBA 3.",
          "authors": [],
          "date": "1999",
          "doi": null,
          "raw": "J. Siegel. Component and Object Technology: A Preview of CORBA 3. IEEE Computer, pages 114\u2013116, May 1999.",
          "cites": null
        },
        {
          "id": 38290541,
          "title": "Distributed Transaction Processing: The XA+ Speci\ufb01cation, Version 2. X/Open Company,",
          "authors": [],
          "date": "1994",
          "doi": null,
          "raw": "X/Open Group. Distributed Transaction Processing: The XA+ Speci\ufb01cation, Version 2. X/Open Company, ISBN 1-85912-046-6, Reading, UK, 1994.",
          "cites": null
        },
        {
          "id": 38290530,
          "title": "Enterprise Javabeans. O\u2019Reilly UK,",
          "authors": [],
          "date": "1999",
          "doi": null,
          "raw": "R. Monson-Haefel. Enterprise Javabeans. O\u2019Reilly UK, 1999.",
          "cites": null
        },
        {
          "id": 38290537,
          "title": "Evaluating Strategies for Real-Time CORBA Dynamic Scheduling.",
          "authors": [],
          "date": "1998",
          "doi": null,
          "raw": "D. Schmidt, C. Gill, and D. Levine. Evaluating Strategies for Real-Time CORBA Dynamic Scheduling. In t h International IEEE Real-Time Symposium. IEEE Computer Society Press, 1998.",
          "cites": null
        },
        {
          "id": 38290540,
          "title": "Globe: A Wide-Area Distributed System.",
          "authors": [],
          "date": "1999",
          "doi": null,
          "raw": "M. v. Steen, P. Homburg, and A. S. Tanenbaum. Globe: A Wide-Area Distributed System. IEEE Concurrency, pages 70\u201378, January-March 1999.",
          "cites": null
        },
        {
          "id": 38290532,
          "title": "Group. CORBAservices: Common Object Services Speci\ufb01cation, Revised Edition.",
          "authors": [],
          "date": "1998",
          "doi": null,
          "raw": "Object Management Group. CORBAservices: Common Object Services Speci\ufb01cation, Revised Edition. 492 Old Connecticut Path, Framingham, MA 01701, USA, December 1998.",
          "cites": null
        },
        {
          "id": 38290533,
          "title": "Group. The Common Object Request Broker: Architecture and Speci\ufb01cation Revision 2.2. 492 Old Connecticut Path,",
          "authors": [],
          "date": "1998",
          "doi": null,
          "raw": "Object Management Group. The Common Object Request Broker: Architecture and Speci\ufb01cation Revision 2.2. 492 Old Connecticut Path, Framingham, MA 01701, USA, February 1998.",
          "cites": null
        },
        {
          "id": 38290534,
          "title": "Group. XML/Value Request for Proposals.",
          "authors": [],
          "date": "1999",
          "doi": null,
          "raw": "Object Management Group. XML/Value Request for Proposals. 492 Old Connecticut Path, Framingham, MA 01701, USA, Aug. 1999.",
          "cites": null
        },
        {
          "id": 38290525,
          "title": "Information processing systems \u2013 Open Systems Interconnection \u2013 Basic Reference Model: The Basic Model.",
          "authors": [],
          "date": "1994",
          "doi": null,
          "raw": "ISO 7498-1. Information processing systems \u2013 Open Systems Interconnection \u2013 Basic Reference Model: The Basic Model. Technical report, International Standards Organisation, 1994.",
          "cites": null
        },
        {
          "id": 38290535,
          "title": "Instant CORBA.",
          "authors": [],
          "date": "1997",
          "doi": null,
          "raw": "R. Orfali, D. Harkey, and J. Edwards. Instant CORBA. Wiley, 1997.",
          "cites": null
        },
        {
          "id": 38290528,
          "title": "Java Remote Method Invocation Speci\ufb01cation,r e v i -sion 1.50, jdk 1.2 edition,",
          "authors": [],
          "date": "1998",
          "doi": null,
          "raw": "JavaSoft. Java Remote Method Invocation Speci\ufb01cation,r e v i -sion 1.50, jdk 1.2 edition, Oct. 1998.",
          "cites": null
        },
        {
          "id": 38290527,
          "title": "Object-Oriented Software Engineering: A Use Case Driven Approach.",
          "authors": [],
          "date": "1992",
          "doi": null,
          "raw": "I. Jacobson, M. Christerson, P. Jonsson, and G. \u00a8 Overgaard. Object-Oriented Software Engineering: A Use Case Driven Approach. Addison Wesley, 1992.",
          "cites": null
        },
        {
          "id": 38290531,
          "title": "Scale in Distributed Systems.",
          "authors": [],
          "date": "1994",
          "doi": null,
          "raw": "B. C. Neuman. Scale in Distributed Systems. In T. Casavant and M. Singhal, editors, Readings in Distributed Computing Systems. IEEE Computer Society press, 1994.",
          "cites": null
        },
        {
          "id": 38290538,
          "title": "Software Architecture: Perspectives on an Emerging Discipline.",
          "authors": [],
          "date": "1996",
          "doi": null,
          "raw": "M. Shaw and D. Garlan. Software Architecture: Perspectives on an Emerging Discipline. Prentice Hall, 1996.",
          "cites": null
        },
        {
          "id": 38290529,
          "title": "The Art of the Metaobject Protocol.",
          "authors": [],
          "date": "1991",
          "doi": null,
          "raw": "G. Kiczales, J. d. Rivi` eres, and D. G. Bobrow. The Art of the Metaobject Protocol. MIT Press, 1991.",
          "cites": null
        },
        {
          "id": 38290526,
          "title": "The Uni\ufb01ed Software Development Process.",
          "authors": [],
          "date": "1999",
          "doi": null,
          "raw": "I. Jacobson, G. Booch, and J. Rumbaugh. The Uni\ufb01ed Software Development Process. Addison Wesley, 1999.",
          "cites": null
        }
      ],
      "sourceFulltextUrls": [
        ""
      ],
      "updatedDate": "2021-05-30T12:50:39",
      "yearPublished": 2000,
      "journals": [],
      "links": [
        {
          "type": "download",
          "url": "https://core.ac.uk/download/1669452.pdf"
        },
        {
          "type": "reader",
          "url": "https://core.ac.uk/reader/1669452"
        },
        {
          "type": "thumbnail_m",
          "url": "https://core.ac.uk/image/1669452/large"
        },
        {
          "type": "thumbnail_l",
          "url": "https://core.ac.uk/image/1669452/large"
        },
        {
          "type": "display",
          "url": "https://core.ac.uk/works/537708"
        }
      ]
    },
    {
      "acceptedDate": "2010-12-09T00:00:00",
      "arxivId": "1005.0693",
      "authors": [
        {
          "name": "Park, Jaeok"
        },
        {
          "name": "van der Schaar, Mihaela"
        }
      ],
      "citationCount": 0,
      "contributors": [
        ""
      ],
      "outputs": [
        "https://api.core.ac.uk/v3/outputs/279458017"
      ],
      "createdDate": "2012-04-13T14:17:57",
      "dataProviders": [
        {
          "id": 144,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/144",
          "logo": "https://api.core.ac.uk/data-providers/144/logo"
        },
        {
          "id": 4786,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/4786",
          "logo": "https://api.core.ac.uk/data-providers/4786/logo"
        }
      ],
      "depositedDate": "2011-03-01T00:00:00",
      "abstract": "We consider wireless communication networks where network users are subject\nto critical events such as emergencies and crises. If a critical event occurs\nto a user, the user needs to send critical traffic as early as possible.\nHowever, most existing medium access control (MAC) protocols are not adequate\nto meet the urgent need for data transmission by users with critical traffic.\nIn this paper, we devise a class of distributed MAC protocols that achieve\ncoordination using the finite-length memory of users containing their own\nobservations and traffic types. We formulate a protocol design problem and find\noptimal protocols that solve the problem. We show that the proposed protocols\nenable a user with critical traffic to transmit its critical traffic without\ninterruption from other users after a short delay while allowing users to share\nthe channel efficiently when there is no critical traffic. Moreover, the\nproposed protocols require short memory and can be implemented without explicit\nmessage passing.Comment: 24 pages, 7 figures, 1 tabl",
      "documentType": "research",
      "doi": "10.1109/tsp.2010.2094613",
      "downloadUrl": "http://arxiv.org/abs/1005.0693",
      "fieldOfStudy": null,
      "fullText": "ar\nX\niv\n:1\n00\n5.\n06\n93\nv1\n  [\ncs\n.N\nI] \n 5 \nM\nay\n 20\n10\n1\nAdaptive MAC Protocols Using Memory\nfor Networks with Critical Traffic\nJaeok Park and Mihaela van der Schaar\nAbstract\nWe consider wireless communication networks where network users are subject to critical events\nsuch as emergencies and crises. If a critical event occurs to a user, the user needs to send critical traffic\nas early as possible. However, most existing medium access control (MAC) protocols are not adequate\nto meet the urgent need for data transmission by users with critical traffic. In this paper, we devise a\nclass of distributed MAC protocols that achieve coordination using the finite-length memory of users\ncontaining their own observations and traffic types. We formulate a protocol design problem and find\noptimal protocols that solve the problem. We show that the proposed protocols enable a user with critical\ntraffic to transmit its critical traffic without interruption from other users after a short delay while allowing\nusers to share the channel efficiently when there is no critical traffic. Moreover, the proposed protocols\nrequire short memory and can be implemented without explicit message passing.\nIndex Terms\nAdaptive protocols with memory, distributed medium access control protocols, networks with critical\ntraffic, slotted multiaccess communication.\nI. INTRODUCTION\nNetwork users may face critical events where life or livelihood is at risk. Examples include a fire in a\nbuilding, a natural disaster in a region, a heart attack of a patient, and a military attack by an enemy. When\na network user detects a critical event, it is important for the user to inform relevant rescue parties of the\nevent as early as possible so that they can take necessary measures to mitigate the risk or help affected\nparties recover. The goal of this paper is to devise a medium access control (MAC) protocol that achieves\nThe authors are with Electrical Engineering Department, University of California, Los Angeles (UCLA), 420 Westwood Plaza,\nLos Angeles, CA 90095-1594, USA. e-mail: {jaeok, mihaela}@ee.ucla.edu.\n2a small delay in transmitting information about critical events, or critical traffic, in a distributed wireless\ncommunication network. Since critical events do not occur frequently, especially when the network size\nis small, it is also important to maintain good performance in terms of throughput and fairness when\nthere is no critical traffic in the network.\nIn a network with critical traffic, a MAC protocol needs to achieve two kinds of coordination: (i)\ncoordination between a user with critical traffic and other users in the case of a critical event and (ii)\ncoordination among users when there is no critical traffic. These two kinds of coordination can be easily\nachieved if message passing is allowed. In the case of a critical event, the user with critical traffic\ncan be given priority by broadcasting its traffic type to induce other users to wait while critical traffic\nis transmitted. Also, when there is no critical traffic, users can share the communication medium in\na contention-free manner by using coordination messages from a central controller as in time division\nmultiple access (TDMA). However, explicit message passing is costly and often impractical in a distributed\nnetwork environment, which makes achieving coordination a challenging task.\nIn this paper, we aim to achieve coordination without explicit message passing by using an extension\nof MAC protocols with memory, formulated in [1]. [1] considers a stationary setting without critical\nevents and investigates how utilizing memory can help users achieve coordination of the second kind in\na distributed environment. With a protocol with memory, users determine their transmission probabilities\nbased on the finite-length history of their own observations (transmission actions and feedback informa-\ntion). As users take transmission actions in a probabilistic manner, the history of users evolves differently\nacross users as time passes. Using the variations in the history of users as a coordination device, we can\nobtain some degree of coordination without relying on explicit message passing.\nThe setting considered in this paper is stochastic in that the traffic types of users are determined by\nan exogenous event. In order to achieve a small delay in transmitting critical traffic (i.e., coordination\nof the first kind), we need to treat users with different traffic types in a different way. Thus, we extend\nprotocols with memory so that transmission probabilities adjust not only to the history of observations\nbut also to the history of traffic types. The proposed protocols are adaptive because users can change the\nmodes of operation based on their traffic types. Adaptive protocols with memory proposed in this paper\nhave the following properties:\n1) (coordination in a critical phase) When a critical event occurs, the user with critical traffic captures\nthe channel after a small delay while other users wait until critical traffic is completely transmitted.\nFurthermore, a delay constraint can be imposed to guarantee the average delay below a certain\nthreshold level.\n32) (coordination in a normal phase) When there is no critical traffic, a success period and a contention\nperiod are alternated. A success period contains consecutive successes by a single user while a\ncontention period selects a successful user for the following success period equally likely among\nall users. The average duration of a success period can be made arbitrarily large (at the expense of\nreduced short-term fairness) without affecting the average duration of a contention period.\n3) (no explicit message passing) The proposed protocols can be implemented without explicit message\npassing between users or between a central controller and a user.\n4) (short memory) The proposed protocols utilize finite memory of a short length (1-slot memory at\nminimum), thus exhibiting low complexity.\nThe proposed adaptive protocols have advantages over existing MAC protocols in dealing with critical\ntraffic. Distributed coordination function (DCF), which is widely deployed in the IEEE 802.11a/b/g\nwireless local area network (WLAN) [2], does not differentiate users, and thus it is unable to give\npriority to a user with critical traffic. Slotted Aloha [3] has the same limitation. Users can be given\ndifferent priorities depending on their access categories in enhanced distributed channel access (EDCA),\nwhich is deployed in IEEE 802.11e [4]. EDCA specifies different contention window sizes and arbitration\ninterframe spaces (AIFS) to different access categories, yielding a smaller medium access delay and more\nbandwidth for the higher-priority traffic categories [5]. However, EDCA is designed to support applications\nrequiring quality-of-service, and a user having highest-priority data shares the channel with other users.\nThus, EDCA is not directly applicable to networks with critical traffic, where it is desirable to allocate\nthe entire resource to a user with critical traffic. P-MAC [6] also differentiates users with different traffic\nclasses by specifying different contention window sizes. However, P-MAC does not use AIFS, which\ncreates a problem when applied to a network with critical traffic because even a user with the highest\npriority has a positive probability of collision at each transmission attempt.\nThe rest of this paper is organized as follows. In Section II, we describe the system model. In Section\nIII, we provide a formal representation of adaptive protocols, define three performance metrics, and\nformulate a protocol design problem. In Section IV, we provide analytical results on how to compute the\nperformance metrics for a given adaptive protocol. In Section V, we solve the protocol design problem\nusing numerical methods. In Section VI, we discuss how adaptive protocols can be enhanced by utilizing\nlonger memory. In Section VII, we provide simulation results. In Section VIII, we conclude the paper.\n4II. SYSTEM MODEL\nWe consider a communication channel shared by N contending users, or transmitter-receiver pairs. We\nassume that the number of users is fixed over time and known to users.1 Time is divided into slots of\nequal length, and users maintain synchronized time slots. A user always has packets to transmit and can\nattempt to transmit one packet in each slot. Due to interference, only one user can transmit successfully\nin a slot, and simultaneous transmission by more than one user results in a collision. After a user makes\na transmission attempt, it learns whether the transmission is successful or not using an acknowledgement\n(ACK) response. We assume that there is no error in sending and receiving ACK signals. While a user\nwaits, it senses the channel to learn whether the channel is accessed or not. Given this feedback structure,\nthe set of the observations of a user in a slot can be defined as Y = {idle, busy, success, failure}, as in [7].\nThe observation of user i, denoted by yi, is idle if no user transmits, busy if user i does not transmit but\nat least one other user transmits, success if user i transmits and succeeds, and failure if user i transmits\nbut fails. Users are subject to critical events such as emergencies and crises. If a critical event occurs to\na user, the user is required to send critical traffic such as a rescue message describing the critical event.\nWe assume that the length of critical traffic, measured by the number of packets needed to transmit it, is\ndetermined randomly. We say that a user\u2019s traffic is normal if its traffic is not critical. We use critical and\nnormal users to refer to users with critical and normal traffic, respectively. We denote the type of user i\u2019s\ntraffic by zi and the set of the types by Z so that Z = {normal, critical}. We assume that the observation\nand traffic type of a user are its local information. That is, users do not know the observations and the\ntypes of other users. Lastly, we assume that critical events occur infrequently so that there is at most one\ncritical user at a time in the system.2\nIII. PROTOCOL DESCRIPTION AND PROBLEM FORMULATION\nA. Description of Adaptive Protocols\nWe restrict our attention to distributed protocols with which no control or coordination messages are\nexchanged between a central controller and a user or between users. We label slots by t = 1, 2, . . . and\nuse superscript t to denote variables pertinent to slot t. The history of user i in slot t contains all the\ninformation it has obtained before making a transmission decision in slot t and can be written as\nhti = (z\n1\ni , y\n1\ni , . . . , z\nt\u22121\ni , y\nt\u22121\ni , z\nt\ni),\n1We investigate the case of the unknown number of users in Section V.D.\n2We consider the possibility of having two critical users at the same time in Section VI.C.\n5for t = 2, 3, . . ., and h1i = z1i . Let Ht be the set of all possible histories for a user in slot t. Then the\nset of all possible histories for a user can be defined by H , \u222a\u221et=1Ht. A decision rule for a user can\nbe formally represented by a mapping from H to [0, 1], prescribing a transmission probability following\neach possible history. A protocol is defined to be a collection of decision rules, one for each user.\nIn this paper, we restrict our attention to a simple class of protocols with the following two properties.\nFirst, we require that protocols be symmetric in the sense that it assigns the same decision rule to\nevery user. The symmetry requirement can be justified by noting that symmetric protocols are easy\nto implement and that users in our model are ex ante identical. Moreover, it simplifies our analysis\nsignificantly. Second, we require that protocols use only the most recent observation and the current\ntraffic type in a stationary way (i.e., independent of slot label t). This requirement is motivated by a\npresumption that a protocol using short memory is easy to program and validate. We call a protocol\nsatisfying the above two requirements an adaptive MAC protocol with 1-slot memory, or more simply,\nan adaptive protocol. It can be represented by a mapping f : Y \u00d7 Z \u2192 [0, 1], which determines the\ntransmission probability of user i in slot t as\npti = f(y\nt\u22121\ni , z\nt\ni ),\nfor t = 1, 2, . . ., where we set y0i = idle as initialization. Note that adaptive protocols can be regarded as\nan extension of protocols with 1-slot memory [1] in that adaptive protocols allow transmission parameters\nto adjust to an exogenous state variable (the traffic type in this paper). In other words, with an adaptive\nprotocol a user can change its modes of operation depending on its state.\nB. Performance Metrics\n1) Delay in a Critical Phase: We define a critical phase as a period that begins with an occurrence of\na critical event and ends with the completion of critical traffic associated with the critical event. Let X be\nthe random variable of the length of critical traffic, measured in slots. A protocol determines the average\nnumber of slots that a critical phase lasts, denoted by Tcrit. The delay in a critical phase is defined as\nthe average number of non-success slots during a critical phase,\nDcrit = Tcrit \u2212 E[X].\n2) Channel Utilization in a Normal Phase: We define a normal phase as a period without critical\ntraffic, between two critical phases. The channel utilization (or throughput) of users in a normal phase is\ndefined as the proportion of time slots in which a successful transmission occurs during a normal phase\n6and can be expressed as\nCnorm =\nExpected number of successes in a normal phase\nExpected length of a normal phase .\n3) Fairness in a Normal Phase: Given an adaptive protocol f , in a normal phase a successful user\nhas another success in the next slot with probability f(success, normal)(1\u2212f(busy, normal))N\u22121. The\naverage number of consecutive successes by a user starting from an initial success in a normal phase is\ndenoted by Ts and is given by\nTs =\n1\n1\u2212 f(success, normal)(1\u2212 f(busy, normal))N\u22121\n.\nA protocol with a large value of Ts can be considered as unfair in the short term because it suppresses\nthe transmission opportunities of other waiting users once a success occurs. Hence, we define the fairness\nlevel in a normal phase as the inverse of the average number of consecutive successes in a normal phase,\nFnorm =\n1\nTs\n= 1\u2212 f(success, normal)(1\u2212 f(busy, normal))N\u22121.\nRemark. [8] defines that a protocol is M -short-term fair if Ts \u2264M . [1] captures short-term fairness by\nconsidering average delay, which is defined as the average waiting time of a user until its next success\nstarting from an arbitrary point of time. Although the concept of average delay is more comprehensive than\nthe average number of consecutive successes (as delay can be created by other reasons than consecutive\nsuccesses), we use the latter in this paper because it is much simpler to compute and is a good proxy\nfor the former in the case of protocols with 1-slot memory.\nC. Protocol Design Problem\nSuppose that the protocol designer has preferences on the three performance metrics, Dcrit, Cnorm, and\nFnorm, and that his preferences are represented by a utility function U . Noting that a protocol determines\nthe three performance metrics, we can express the protocol design problem as\nmax\nf\u2208F\nU(Dcrit, Cnorm, Fnorm),\nwhere F denotes the set of all adaptive protocols. It is reasonable to assume that the protocol designer\nprefers protocols that yield a small delay in a critical phase as well as a high channel utilization and a\nhigh fairness level in a normal phase. Thus, we assume that U is decreasing in the first argument and\nincreasing in the second and third arguments. Since the solution to the protocol design problem depends\nhighly on the specification of the utility function, we impose the following structure on the protocol and\nthe utility function in order to reduce the problem into a simpler one that is readily solvable.\n7First, in order to achieve a small value of Dcrit, we focus on adaptive protocols satisfying f(y, critical) =\n1 for all y \u2208 Y and f(busy, normal) = 0. We call such a protocol non-intrusive. A non-intrusive protocol\nguarantees that once a critical user has a successful transmission, its transmission is not interrupted by\nother users (with normal traffic) until it completes the transmission of its critical traffic. Second, we\nassume that the protocol designer has the most preferred fairness level in a normal phase, denoted by\n\u03b8 \u2208 (0, 1], regardless of the other two performance metrics. Then setting Fnorm = \u03b8 together with\nf(busy, normal) = 0 implies f(success, normal) = 1\u2212 \u03b8. Now it remains to specify f(idle, normal)\nand f(failure, normal), which we denote by q and r, respectively, for notational simplicity. The class\nof adaptive protocols we consider can be written as\nf(y, critical) = 1 for all y \u2208 Y,\nf(idle, normal) = q, f(busy, normal) = 0,\nf(success, normal) = 1\u2212 \u03b8, f(failure, normal) = r,\nand we call a protocol in this class a \u03b8-fair non-intrusive adaptive protocol. Lastly, we assume that the\nprotocol designer has a threshold level \u03b7 > 0 for the delay in a critical phase such that his preferences\non Dcrit is expressed entirely with a delay constraint of the form Dcrit \u2264 \u03b7. That is, only protocols with\nDcrit no larger than \u03b7 are acceptable to the protocol designer while he does not care about the exact\nvalue of Dcrit as long as the delay constraint is satisfied. Under the three restrictions, the protocol design\nproblem is reduced to finding a \u03b8-fair non-intrusive adaptive protocol that solves\nmax\n(q,r)\u2208[0,1]2\nCnorm subject to Dcrit \u2264 \u03b7. (1)\nIn Section IV we explain how to compute Cnorm and Dcrit analytically given a \u03b8-fair non-intrusive\nadaptive protocol, whereas in Section V we investigate the solution to (1) using numerical illustrations.\nRemark. The operation of a \u03b8-fair non-intrusive adaptive protocol in a normal phase is analogous to\np-persistent CSMA [9]. Users wait when the channel is sensed busy and transmit with probability q and\nr following an idle slot and a collision, respectively. Since we consider saturated arrivals where each\nuser always has packets to transmit, we introduce \u03b8 as a stopping probability in order to prevent a single\nuser from using the channel exclusively.\nIV. ANALYTICAL RESULTS\nA. Derivation of the Channel Utilization in a Normal Phase\nConsider a slot t in which a normal phase begins. Since slot t\u2212 1 is the last slot of a critical phase,\nthere exists a user i that completed the transmission of its critical traffic in slot t\u2212 1. Since user i had a\n8successful transmission in slot t\u2212 1, we have yt\u22121i = success and y\nt\u22121\nj = busy for all j 6= i, and thus\nin slot t user i transmits with probability 1 \u2212 \u03b8 while other users wait. Hence, a normal phase begins\nwith a success by the user that had critical traffic in the previous critical phase with probability 1 \u2212 \u03b8\nand with an idle slot with probability \u03b8.3\nTo compute the channel utilization in a normal phase Cnorm, we construct a Markov chain whose\nstate space is {0, 1, . . . , N}, where state k represents transmission outcomes in which exactly k users\ntransmit. The transition probability from state k to state k\u2032 in a normal phase, Pnorm(k\u2032|k), under a \u03b8-fair\nnon-intrusive adaptive protocol is given by\nPnorm(k\n\u2032|0) =\n(\nN\nk\u2032\n)\nqk\n\u2032\n(1\u2212 q)N\u2212k\n\u2032 for k\u2032 = 0, . . . , N, (2)\nPnorm(k\n\u2032|1) =\n\uf8f1\uf8f4\uf8f4\uf8f2\n\uf8f4\uf8f4\uf8f3\n\u03b8 for k\u2032 = 0\n1\u2212 \u03b8 for k\u2032 = 1\n0 for k\u2032 = 2, . . . , N,\nPnorm(k\n\u2032|k) =\n\uf8f1\uf8f2\n\uf8f3\n(\nk\nk\u2032\n)\nrk\n\u2032\n(1\u2212 r)k\u2212k\n\u2032 for k\u2032 = 0, . . . , k\n0 for k\u2032 = k + 1, . . . , N\n, for k = 2, . . . , N. (3)\nThe transition matrix of the Markov chain can be written in the form of\nPnorm =\n\uf8eb\n\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ed\n0 2 \u00b7\u00b7\u00b7 N\u22121 N 1\n0 \u2217 \u2217 \u00b7 \u00b7 \u00b7 \u2217 \u2217 \u2217\n2 \u2217 \u2217 \u00b7 \u00b7 \u00b7 0 0 \u2217\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\nN\u22121 \u2217 \u2217 \u00b7 \u00b7 \u00b7 \u2217 0 \u2217\nN \u2217 \u2217 \u00b7 \u00b7 \u00b7 \u2217 \u2217 \u2217\n1 \u03b8 0 \u00b7 \u00b7 \u00b7 0 0 1\u2212 \u03b8\n\uf8f6\n\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f8\n,\nwhere the entries marked with an asterisk can be found in (2) and (3).\nThe average number of consecutive successes in a normal phase, Ts, is determined by the fairness level\n\u03b8, where the relationship is given by Ts = 1/\u03b8. A series of consecutive successes by a user ends with\nan idle slot, when the successful user waits. Let Tc be the average number of non-success slots until the\nfirst success starting from an idle slot during a normal phase. A normal phase can be considered as the\n3If we extend adaptive protocols as pti = f(zt\u22121i , y\nt\u22121\ni\n, zti), we can set p\nt\ni = 0 if zt\u22121i = critical and zti = normal. Then\nall users including the user that had critical traffic wait in the first slot of a normal phase, which makes users contend with an\nequal transmission probability in the second slot.\n9alternation of a success period and a contention period, which is continued until a critical event occurs.\nA success period is characterized by consecutive successes by a user, whereas a contention period begins\nwith an idle slot and lasts until a user succeeds. Since all users transmit with the same transmission\nprobability following an idle slot, each user has an equal chance of becoming a successful user for the\nfollowing success period at the point when a contention period starts. In other words, a contention period\nselects the next successful user in a nondiscriminatory way.\nLet Qnorm be the N -by-N matrix in the upper-left corner of Pnorm. Suppose that 0 < q, r < 1 so that\nall the entries of Pnorm marked with an asterisk are nonzero. Then (I\u2212Qnorm)\u22121 exists and is called the\nfundamental matrix for Pnorm, when state 1 is absorbing (i.e., \u03b8 = 0) [10]. The average number of slots\nin state k 6= 1 starting from state 0 (an idle slot) is given by the (1, k)-entry of (I \u2212Qnorm)\u22121. Hence,\nthe average number of slots to hit state 1 (a success slot) for the first time starting from an idle slot is\ngiven by the first entry of (I\u2212Qnorm)\u22121e, where e is a column vector of length N all of whose entries\nare 1. Hence, we obtain Tc = [(I \u2212Qnorm)\u22121e]1. Note that Tc is independent of \u03b8. That is, the average\nduration of a contention period is not affected by the average duration of a success period. The channel\nutilization of users in a normal phase can be computed by\nCnorm =\nTs\nTc + Ts\n=\n1\n\u03b8[(I\u2212Qnorm)\u22121e]1 + 1\n, (4)\nfor (q, r) \u2208 (0, 1)2.\nAn alternative method to compute the channel utilization in a normal phase is to use a stationary\ndistribution. Since \u03b8 \u2208 (0, 1], all states communicate with each other under the transition matrix Pnorm\nfor all (q, r) \u2208 (0, 1)2. Hence, the Markov chain is irreducible, and there exists a unique stationary\ndistribution wnorm, which satisfies\nwnorm = wnormPnorm and wnorme = 1. (5)\nLet wnorm(k) be the entry of wnorm corresponding to state k, for k = 0, 1, . . . , N . Then wnorm(k) gives\nthe probability of state k during a normal phase. In particular, the channel utilization in a normal phase is\ngiven by wnorm(1). Since success and contention periods alternate from the beginning of a normal phase,\nthe stationary distribution yields the probabilities of states for any duration of a normal phase (assuming\nthat a normal phase lasts sufficiently longer than Ts + Tc), not just the limiting probabilities as a normal\nphase lasts infinitely long. By manipulating (5), we can derive that wnorm(1) = Cnorm, whose expression\nis given in (4).\n10\nB. Derivation of the Delay in a Critical Phase\nConsider a slot t in which a critical phase begins. Since a critical user always transmits under a non-\nintrusive protocol, we consider a Markov chain whose state space is {0, 1, . . . , N \u2212 1}, where state k\nrepresents transmission outcomes in which exactly k normal users transmit. The transition probability\nfrom state k to state k\u2032 in a critical phase, Pcrit(k\u2032|k), under a \u03b8-fair non-intrusive adaptive protocol is\ngiven by\nPcrit(k\n\u2032|k) =\n\uf8f1\uf8f2\n\uf8f3\n(\nk\nk\u2032\n)\nrk\n\u2032\n(1\u2212 r)k\u2212k\n\u2032 for k\u2032 = 0, . . . , k\n0 for k\u2032 = k + 1, . . . , N \u2212 1\n, for k = 0, . . . , N \u2212 1. (6)\nThe transition matrix of the Markov chain can be written in the form of\nPcrit =\n\uf8eb\n\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ec\uf8ed\n1 2 \u00b7\u00b7\u00b7 N\u22122 N\u22121 0\n1 \u2217 0 \u00b7 \u00b7 \u00b7 0 0 \u2217\n2 \u2217 \u2217 \u00b7 \u00b7 \u00b7 0 0 \u2217\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\nN\u22122 \u2217 \u2217 \u00b7 \u00b7 \u00b7 \u2217 0 \u2217\nN\u22121 \u2217 \u2217 \u00b7 \u00b7 \u00b7 \u2217 \u2217 \u2217\n0 0 0 \u00b7 \u00b7 \u00b7 0 0 1\n\uf8f6\n\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\uf8f8\n,\nwhere the entries marked with an asterisk can be found in (6). Note that state 0, which corresponds to\na success by the critical user, is absorbing because once the critical user has a successful transmission,\nits transmissions in the following slots are not interrupted by other users with normal traffic. Hence,\nthe delay in a critical phase under a \u03b8-fair non-intrusive adaptive protocol is independent of the length\nof critical traffic and is measured by the average number of collisions that the critical user experiences\nbefore obtaining a successful transmission. Let Qcrit be the (N \u2212 1)-by-(N \u2212 1) matrix in the upper-left\ncorner of Pcrit. For r \u2208 [0, 1), the matrix I\u2212Qcrit is invertible, and the average number of slots until the\nfirst success starting from state k is given by the k-th entry of (I\u2212Qcrit)\u22121e, for k = 1, . . . , N \u2212 1.\nThe number of collisions that a critical user experiences in a critical phase depends on the transmission\noutcome in slot t\u22121, the last slot of the preceding normal phase. We represent the transmission outcome\nof slot t \u2212 1 by a pair (l, a), where l is the number of transmissions by users other than the user that\nbecomes a critical user in the following critical phase and a is the transmission action of the user. We\nwrite a = T if the user transmits and a = W if it waits. Suppose that the transmission outcome of slot\nt \u2212 1 is represented by (l, a), for l = 2, . . . , N \u2212 1. Then the Markov chain starts from state l in slot\nt \u2212 1, regardless of a. Since the critical phase starts in slot t, the number of collisions in the critical\n11\nphase does not include the collision in slot t\u2212 1. Hence, the average number of collisions until the first\nsuccess in a critical phase when the preceding normal phase ended with l transmissions by users other\nthan the critical user is given by\nd(l, a) = [(I\u2212Qcrit)\n\u22121e]l \u2212 1,\nfor l = 2, . . . , N \u2212 1 and a = T,W .\nSuppose that the transmission outcome of slot t\u22121 is represented by (1, a). If a = T , then the Markov\nchain starts from state 1 in slot t \u2212 1, and the average number of collisions until the first success in\na critical phase when the preceding normal phase ended with two transmissions including one by the\ncritical user is given by\nd(1, T ) = [(I \u2212Qcrit)\n\u22121e]1 \u2212 1.\nIf a =W , then there is a successful user, different from the critical user in the following critical phase,\nin slot t\u2212 1. The successful user transmits with probability 1\u2212 \u03b8 while all the other normal users wait\nin slot t. Thus, with probability \u03b8, the critical user succeeds in slot t, and with probability 1 \u2212 \u03b8, state\n1 occurs in slot t, from which it takes [(I \u2212Qcrit)\u22121e]1 collisions on average to reach a success by the\ncritical user. Therefore, the average number of collisions until the first success in a critical phase when\nthe preceding normal phase ended with a success by a user other than the critical user is given by\nd(1,W ) = \u03b8 \u00b7 0 + (1\u2212 \u03b8)[(I\u2212Qcrit)\n\u22121e]1 = (1\u2212 \u03b8)[(I\u2212Qcrit)\n\u22121e]1.\nSuppose that the transmission outcome of slot t\u22121 is represented by (0, a). If a = T , then the critical\nuser in the following critical phase has a success in slot t\u2212 1. Since f(busy, normal) = 0, all normal\nusers wait in slot t. Thus, the critical user has another success in slot t, which leads to zero delay in a\ncritical phase when the preceding normal phase ended with a success by the critical user, i.e.,\nd(0, T ) = 0.\nIf a = W , then all (N \u2212 1) normal users transmit with probability q in slot t. Then with probability(\nN\u22121\nk\n)\nqk(1 \u2212 q)N\u22121\u2212k, slot t contains transmission by k normal users, for k = 0, . . . , N \u2212 1. With\nprobability (1 \u2212 q)N\u22121 the critical user experiences no collision while with probability\n(\nN\u22121\nk\n)\nqk(1 \u2212\nq)N\u22121\u2212k the critical phase begins with state k, for k = 1, . . . , N \u2212 1. Therefore, the average number of\ncollisions until the first success in a critical phase when the preceding normal phase ended with an idle\n12\n\u0001\u0000\u0002\u0003\u0004\u0005 \u0007\u0006\b\t\n\u000b\f\r\nD\n\u000e\u000f\u0010\u0011\nE[X] T\n\u0012\nT\n\u0013\nT\n\u0014\n\u0015\u0016\n\u0017\u0018\u0019\u001afffiflffi\u001f\n !\"#$%&'()*\n+, -.\n/012345\n67 89\n:;<=>?@ AB\nCDEFGHIJ KL\nMNOPQ RST UVWXY\nZ[\\] ^_`ab cd\nefghijklmno pqrstuvw\nxyz{ |} ~\u007f\u0080\u0081 \u0082\u0083\u0084\u0085\n\u0086\u0087\u0088\u0089\u0141\u008b \u008c\u008d\u008e\u008f\u0090\u0091\u0092\u0093\nT\n\u0094\n\u0095\u0096\u0097\u0098\u0099\u009a\u009b\n\u009c\u009d \u009e \u009f\u00a0\u00a1\u00a2\nFig. 1: Operation of the system under a \u03b8-fair non-intrusive adaptive protocol. (CU represents a critical\nuser.)\nslot is given by\nd(0,W ) = (1\u2212 q)N\u22121 \u00b7 0 +\nN\u22121\u2211\nk=1\n(\nN \u2212 1\nk\n)\nqk(1\u2212 q)N\u22121\u2212k[(I\u2212Qcrit)\n\u22121e]k\n=\nN\u22121\u2211\nk=1\n(\nN \u2212 1\nk\n)\nqk(1\u2212 q)N\u22121\u2212k[(I \u2212Qcrit)\n\u22121e]k.\nAs discussed in Section IV.A, the probability that the last slot of a normal phase has k transmissions\nis given by wnorm(k), for k = 0, 1, . . . , N . Since we consider symmetric protocols, the probability that a\nparticular user is one of k transmitting users is given by k/N . Thus, the probability that the transmission\noutcome of the last slot of a normal phase is represented by (l, a), denoted by v(l, a), is given by\nv(l, T ) =\nl + 1\nN\nwnorm(l + 1) and v(l,W ) =\nN \u2212 l\nN\nwnorm(l),\nfor l = 0, . . . , N \u2212 1. Then the delay in a critical phase can be computed as\nDcrit =\n\u2211\nl\u2208{0,...,N\u22121},a\u2208{T,W}\nv(l, a)d(l, a).\nFig. 1 summarizes the operation of the system under a \u03b8-fair non-intrusive adaptive protocol. Note that\nE[X] is exogenously given while Dcrit, Ts, and Tc are determined by the protocol specification. Since\nTs is determined completely by the fairness level, the protocol design problem (1) can be restated as to\nminimize Tc while keeping Dcrit below a certain threshold level. Finally, we note that we can achieve\nDcrit = 0 and Tc = 0 (and thus Cnorm = 1) for any fairness level when we allow coordination messages.\nHence, the gap between Dcrit and 0 and between Cnorm and 1 that arises when we are restricted to use\ndistributed protocols without message passing can be considered as an efficiency loss due to the lack of\ncentralized control.\n13\n0.2 0.2 0.2\n0.4\n0.4\n0.4\n0.4 0.4\n0.5\n0.5\n0.\n5\n0.5\n0.5\n0.5\n0.5\n0.5 0.5\n0.6\n0.6\n0.\n6 0.6\n0.6\n0.6\n0.6\n0.6\n0.6\n0.7\n0.7\n0.\n7\n0.7\n0.7\n0.7\n0.8\n0.8\nq\nr\n0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\n0.9\n(a) Cnorm\n2\n2\n2\n2\n3\n3\n3\n3\n4\n4\n4\n4\n5\n5\n5 5\n10\n10 10 10\n20 20 20\n50 50 50\n1\n1\n1\n1\nq\nr\n0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\n0.9\n(b) Dcrit\nFig. 2: Contour curves of Cnorm and Dcrit as functions of (q, r) when N = 10 and \u03b8 = 0.1.\nV. NUMERICAL RESULTS\nA. Graphical Illustration of the Protocol Design Problem\nBased on the results in Section IV, we can show that, for a given fairness level \u03b8 \u2208 (0, 1], Cnorm and\nDcrit are continuous functions of (q, r) on the interior of [0, 1]2. In order to guarantee the existence of\na solution, in this section we consider the protocol design problem on a restricted domain,\nmax\n(q,r)\u2208[\u01eb,1\u2212\u01eb]2\nCnorm subject to Dcrit \u2264 \u03b7, (7)\nfor a small \u01eb > 0. Throughout this section, we set \u01eb = 0.01. We say that a protocol is optimal if it solves\n(7). An optimal protocol gives an approximate, if not exact, solution to (1).\nIn Fig. 2, we show the dependence of the performance metrics, Cnorm and Dcrit, on (q, r). To obtain\nthe results, we consider ten users, i.e., N = 10, and fix \u03b8 = 0.1 so that Ts = 10. Fig. 2(a) plots the\ncontour curves of Cnorm. Let (q\u2217, r\u2217) = argmax(q,r)\u2208[\u01eb,1\u2212\u01eb]2 Cnorm. That is, (q\u2217, r\u2217) represents the \u03b8-\nfair non-intrusive adaptive protocol that maximizes the channel utilization in a normal phase when no\nconstraint is imposed on the delay in a critical phase. With numerical methods, we find that (q\u2217, r\u2217) is\nunique with the value (0.105, 0.479) and achieves 0.804 as the maximum value of Cnorm. By (4), Cnorm\nand Tc are negatively related for a given fairness level \u03b8, and the minimum value of Tc corresponding\nto the maximum value of Cnorm is given by 2.44. That is, at (q\u2217, r\u2217), a contention period in a normal\n14\nphase lasts for 2.44 slots on average, while the average duration of a success period is given by 1/\u03b8.\nThe value of (q\u2217, r\u2217) can be justified as follows. Following an idle slot in a normal phase, every user\ntransmits with probability q, and thus the probability of success is maximized when q = 1/N . During a\nnormal phase, a collision cannot follow a success, and following an idle slot, a collision involving two\ntransmissions is most likely among all kinds of collisions when q \u2248 1/N . Since non-colliding users do\nnot transmit following a collision under a non-intrusive protocol, the probability of success between two\ncontending users is maximized when r = 1/2. r\u2217 is chosen slightly smaller than 1/2 because collisions\ninvolving more than two transmissions occur with small probability. Fig. 2(b) plots the contour curves\nof Dcrit. As q and r are large, users transmit aggressively in a contention period of a normal phase,\nintensifying interference to a critical user before its first success. Thus, Dcrit is increasing in both q and\nr. The set of (q, r) that satisfies a delay constraint Dcrit \u2264 \u03b7 can be represented by the region below the\ncontour curve of Dcrit at level \u03b7. For example, the shaded area in Fig. 2(b) represents the constraint set\ncorresponding to Dcrit \u2264 1.\nFig. 3 shows the contour curves of Cnorm and Dcrit in the same graph to illustrate the protocol design\nproblem (7). The protocol design problem is to find the largest value of Cnorm on the region of (q, r)\nthat satisfies Dcrit \u2264 \u03b7. Let \u03b7\u2217 be the value of Dcrit at (q\u2217, r\u2217). When N = 10 and \u03b8 = 0.1, we have\n\u03b7\u2217 = 1.531. The constraint Dcrit \u2264 \u03b7 is slack if \u03b7 > \u03b7\u2217 and is binding otherwise. For example, if \u03b7 = 1,\nthe constraint is binding and the optimal protocol is given by the point on the contour curve of Dcrit\nat level 1, marked with \u2018+\u2019 in Fig. 3, where a contour curve of Dcrit and that of Cnorm are tangent to\neach other. In contrast, if \u03b7 = 2, the constraint is slack and the optimal protocol is given by the solution\nto the unconstrained problem, (q\u2217, r\u2217) = (0.105, 0.479), marked with \u2018\u00d7\u2019 in Fig. 3.\nFig. 4 shows the solutions to the protocol design problem for \u03b7 between 0.1 and 2. Fig. 4(a) plots\noptimal protocols, denoted by (qo, ro), as \u03b7 varies while Fig. 4(b) shows the values of Dcrit and Cnorm\nat the optimal protocols. We can divide the range of \u03b7 into three regions: (0, 0.71], (0.71, 1.53], and\n(1.53,\u221e). For \u03b7 \u2264 0.71, the optimal protocol occurs at the corner with ro = \u01eb. As \u03b7 decreases in\nthis region, qo decreases to \u01eb while ro stays at \u01eb, which makes Cnorm decrease to 0. Smaller \u03b7 means\nthat higher priority is given to a critical user, and this can be achieved by inhibiting transmissions by\nusers when they have normal traffic. For \u03b7 \u2208 (0.71, 1.53], the solution to the protocol design problem\nis interior while the constraint Dcrit \u2264 \u03b7 is still binding. The trade-off between Dcrit and Cnorm is\nless severe in this region than in (0, 0.71]. Reducing \u03b7 from 1.53 to 0.71 results in a slight decrease in\nCnorm from 0.80 to 0.76. For \u03b7 > 1.53, the constraint Dcrit \u2264 \u03b7 is slack, and thus (qo, ro) remains at\n(q\u2217, r\u2217) = (0.105, 0.479) while Cnorm remains at its unconstrained maximum level, 0.804. The rate of\n15\nq\nr\n0.8\n0.7932\n0.75\n0.7\n0.65\n0.6\n0.\n8\n0.\n79\n32\n0.7\n5\n0.7\n0.65\n0.6\n2\n1.5312\n1\n \n \n0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\n0.9\nC\nnorm\nD\ncrit\nFig. 3: Illustration of optimal protocols.\n0 0.5 1 1.5 2\n0\n0.05\n0.1\n0.15\n0.2\n0.25\n0.3\n0.35\n0.4\n0.45\n0.5\n\u03b7\n \n \nqo\nro\n(a)\n0 0.5 1 1.5 2\n0\n0.2\n0.4\n0.6\n0.8\n1\n1.2\n1.4\n1.6\n1.8\n2\n\u03b7\n \n \nD\ncrit\nC\nnorm\n(b)\nFig. 4: Solution to the protocol design problem for \u03b7 between 0.1 and 2 when N = 10 and \u03b8 = 0.1: (a)\noptimal protocols, and (b) the values of Dcrit and Cnorm at the optimal protocols.\n16\nchange in the maximum value of Cnorm with respect to \u03b7 suggests that keeping Dcrit below 0.71 induces\na large cost in terms of the reduced channel utilization in a normal phase, maintaining Dcrit between\n0.71 and 1.53 only a minor cost, and tolerating Dcrit larger than 1.53 no cost. In other words, when the\noptimal solution to the protocol design problem is interior, the optimal dual variable on the constraint\nDcrit \u2264 \u03b7 is close to zero or is zero.\nB. Varying the Number of Users\nWe examine how the optimal protocol changes as the number of users varies between 3 and 50. We fix\n\u03b8 = 0.1 as before. We first solve the protocol design problem with a slack constraint, assuming that \u03b7 is\nsufficiently large. Fig. 5(a) shows optimal protocols (q\u2217, r\u2217) when the delay constraint is not binding. As\nN increases from 3 to 50, q\u2217 decreases from 0.34 to 0.02 while r\u2217 decreases from 0.49 to 0.48. Fig. 5(b)\nplots the values of Dcrit and Cnorm at (q\u2217, r\u2217). As N increases from 3 to 50, Dcrit increases from 1.18\nto 1.65 while Cnorm decreases from 0.82 to 0.80. The results show that when the delay constraint is\nslack, the delay in a critical phase increases at a diminishing rate as the number of users increases, while\nthe channel utilization in a normal phase remains almost constant. Almost constant Cnorm implies that\nthe proposed optimal protocols are capable of resolving contention among users efficiently in a normal\nphase even if there are many users sharing the channel. The values of Dcrit at (q\u2217, r\u2217) can be interpreted\nas the minimum values of \u03b7 that make the delay constraint slack.\nNow we set \u03b7 = 1 so that the delay constraint is binding for all N between 3 and 50. Fig. 5(a) shows\noptimal protocols (qo, ro) when the delay constraint is given by Dcrit \u2264 1. As N increases from 3 to 50,\nqo decreases from 0.34 to 0.02 while ro decreases from 0.40 to 0.18. Imposing the constraint Dcrit \u2264 1\nlimits the values of q and r, but it impacts r more than q, i.e., ro < r\u2217 and qo \u2248 q\u2217 for given N , due to\nthe shape of the contour curves of Cnorm as illustrated in Fig. 3. Fig. 5(b) plots the values of Dcrit and\nCnorm at (qo, ro). As N increases from 3 to 50, Dcrit stays at 1, confirming that the constraint Dcrit \u2264 1\nis binding, while Cnorm decreases from 0.82 to 0.78. We can see that requiring Dcrit \u2264 1 decreases\nthe maximum values of Cnorm only slightly because the delay constraint with \u03b7 = 1 is mild so that the\noptimal protocols remain interior. If we impose a sufficiently strong constraint, i.e., choose a small \u03b7,\nthen we have the optimal protocol at the corner, qo < q\u2217 and ro = \u01eb, and Cnorm is reduced significantly,\nas suggested in Fig. 4.\n17\n0 10 20 30 40 50\n0\n0.05\n0.1\n0.15\n0.2\n0.25\n0.3\n0.35\n0.4\n0.45\n0.5\nN\nTr\nan\nsm\nis\nsi\non\n P\nro\nba\nbi\nlity\n \n \nq (slack)\nq (binding)\nr (slack)\nr (binding)\n(a)\n0 10 20 30 40 50\n0.7\n0.8\n0.9\n1\n1.1\n1.2\n1.3\n1.4\n1.5\n1.6\n1.7\nN\n \n \nD\ncrit (slack)\nD\ncrit (binding)\nC\nnorm\n (slack)\nC\nnorm\n (binding)\n(b)\nFig. 5: Solution to the protocol design problem for N between 3 and 50 when \u03b8 = 0.1: (a) optimal\nprotocols, and (b) the values of Dcrit and Cnorm at the optimal protocols.\n0 0.2 0.4 0.6 0.8 1\n0\n0.05\n0.1\n0.15\n0.2\n0.25\n0.3\n0.35\n0.4\n0.45\n0.5\n\u03b8\nTr\nan\nsm\nis\nsi\non\n P\nro\nba\nbi\nlity\n \n \nq (slack)\nq (binding)\nr (slack)\nr (binding)\n(a)\n0 0.2 0.4 0.6 0.8 1\n0.2\n0.4\n0.6\n0.8\n1\n1.2\n1.4\n1.6\n1.8\n\u03b8\n \n \nD\ncrit (slack)\nD\ncrit (binding)\nC\nnorm\n (slack)\nC\nnorm\n (binding)\n(b)\nFig. 6: Solution to the protocol design problem for \u03b8 between 0.01 and 0.99 when N = 10: (a) optimal\nprotocols, and (b) the values of Dcrit and Cnorm at the optimal protocols.\n18\nC. Varying the Fairness Level\nWe investigate the impact of the fairness level on optimal protocols and their performance. We first\nconsider sufficiently large \u03b7 so that the delay constraint is slack. Fig. 6(a) shows optimal protocols\n(q\u2217, r\u2217) when the constraint is slack. Since maximizing Cnorm is equivalent to minimizing Tc, which is\nindependent of \u03b8, the optimal protocols do not depend on \u03b8 when the delay constraint is not binding.\nFig. 6(b) plots the values of Dcrit and Cnorm at (q\u2217, r\u2217). From the expression in (4), we can see that\nCnorm is decreasing in \u03b8. Dcrit is also decreasing in \u03b8 because increasing \u03b8 induces idle slots to occur\nmore frequently, from which the average number of collisions experienced by a critical user is small.\nSince Dcrit at (q\u2217, r\u2217) ranges between 1.02 and 1.70, we set \u03b7 = 0.8 to analyze the protocol design\nproblem with a binding delay constraint. Fig. 6(a) shows optimal protocols (qo, ro) with \u03b7 = 0.8 while\nFig. 6(b) plots the values of Dcrit and Cnorm at the optimal protocols. Note that the optimal protocols\nare at the corner with ro = \u01eb for \u03b8 \u2264 0.04. Imposing the constraint Dcrit \u2264 0.8 limits the values of q\nand r. The decrease in q and r is larger when \u03b8 is smaller because requiring Dcrit \u2264 0.8 imposes a\nstronger constraint for smaller \u03b8, which can be seen by comparing the values of Dcrit with binding and\nslack delay constraints. However, the impact on Cnorm is marginal as long as the optimal protocols are\ninterior.\nD. Estimated Number of Users\nSo far we have assumed that users know the exact number of users sharing the channel. We relax\nthis assumption and consider a scenario where users follow optimal protocols computed based on their\n(possibly incorrect) estimates of the number of users. We investigate the consequence of using estimates\ninstead of the exact number of users when computing optimal protocols. For simplicity, we assume that\nall users have the same estimate. We consider N = 10 and the estimated number of users, denoted\nby N\u02c6 , between 5 and 15. In Fig. 7, we plot the values of Dcrit and Cnorm when N users follow the\noptimal protocol designed for N\u02c6 users. As before, we consider the two cases of slack and binding delay\nconstraints, with \u03b7 = 1 for the binding constraint. In both cases, optimal q and r decrease with the\nestimated number of users in order to accommodate increased contention from more users, as shown\nin Fig. 5(a). Hence, Dcrit decreases with N\u02c6 since interference from normal users is reduced as N\u02c6\nincreases. Cnorm is not affected much by N\u02c6 , reaching a peak when N\u02c6 = N . This result suggests that the\nperformance in a normal phase is robust to errors in the estimation of the number of users. Note that, in\nthe case of the binding delay constraint, the constraint is violated when an underestimation occurs, i.e.,\nN\u02c6 < N . In order to avoid this, the protocol designer can choose an estimation procedure that is biased\n19\n5 10 15\n0.7\n0.8\n0.9\n1\n1.1\n1.2\n1.3\n1.4\n1.5\n1.6\n1.7\nN\u02c6\n \n \nD\ncrit (slack)\nD\ncrit (binding)\nC\nnorm\n (slack)\nC\nnorm\n (binding)\nFig. 7: Values of Dcrit and Cnorm for N\u02c6 between 5 and 15 when N = 10 and \u03b8 = 0.1.\ntoward overestimation. An estimation procedure can be designed based on the approach of [11], whose\ndetails are left for future work.\nVI. ENHANCEMENT OF ADAPTIVE PROTOCOLS\nIn this section, we discuss improvements on adaptive protocols by utilizing longer memory. The main\nidea is the inference of the traffic types of other users based on the patterns of observations. Some patterns\nof observations reveal information about the types of other users, and users can adjust their transmission\nparameters to these patterns. As users maintain longer memory, there are more recognizable patterns, and\nexploiting them can achieve performance improvement.\nA. Reducing the Average Delay\nReturning to the discussion in Section IV.B, suppose that the transmission outcome of the last slot of\na normal phase is represented by (1,W ) so that there is a successful user different from the critical user\nin the following critical phase. When users follow a \u03b8-fair non-intrusive adaptive protocol, the successful\nuser transmits with probability 1\u2212 \u03b8 in the first slot of the following critical phase. If the successful user\ntransmits in the first slot, it collides with the critical user and then transmits with probability r in the next\nslot. However, a collision cannot follow a success when all users have normal traffic, and thus after a\ncollision in the first slot of the critical phase, the successful user can infer the existence of a critical user.\n20\nIf the protocol is modified so that it requires normal users to wait after a pattern of success followed\nby failure, then the average number of collisions experienced by a critical user after a transmission\noutcome represented by (1,W ), d(1,W ), is reduced from (1\u2212 \u03b8)[(I\u2212Qcrit)\u22121e]1 to 1\u2212 \u03b8. When \u03b8 is\nsmall, a success period lasts long in a normal phase, leading to a large weight on (1,W ), v(1,W ). Thus,\nrequiring normal users to wait after (success, failure) reduces the delay in a critical phase significantly.\nFor example, with N = 10, \u03b8 = 0.1, and (q, r) = (q\u2217, r\u2217) = (0.105, 0.479), we have d(1,W ) reduced\nfrom 1.73 to 0.9, which decreases Dcrit from 1.53 to 0.93.\nB. Bounding the Maximum Delay\nIn the range of parameter values considered in Section V, the delay in a critical phase is reasonably\nsmall, not exceeding 2 slots. However, the realized number of collisions that a critical user experiences\ncan be arbitrarily large with positive probability. That is, the worst-case delay in a critical phase is\nunbounded. We can bound the maximum delay by modifying the protocol so that it requires normal\nusers to wait after experiencing B consecutive collisions. Since non-colliding normal users wait after\na collision, colliding normal users must have the same number of consecutive collisions in any slot.\nThus, normal users experiencing B consecutive collisions back off simultaneously, yielding a room for\na critical user, if there is one. Therefore, a critical user cannot experience more than B collisions in a\ncritical phase. When B is chosen moderately large, B consecutive collisions rarely occur in a normal\nphase, and thus the proposed modification has a negligible impact on the channel utilization in a normal\nphase, Cnorm. We summarize below the enhanced adaptive protocols including the feature discussed in\nfootnote 3.\n1) If yt\u22122i = success, yt\u22121i = failure, and zti = normal, then pti = 0.\n2) If yt\u2212Bi = \u00b7 \u00b7 \u00b7 = yt\u22121i = failure and zti = normal, then pti = 0.\n3) If zt\u22121i = critical and zti = normal, then pti = 0.\n4) Otherwise, pti = f(yt\u22121i , zti ), where f is a \u03b8-fair non-intrusive adaptive protocol.\nC. Two Users with Critical Traffic\nWe now consider a scenario where the system can have two critical users at the same time. We describe\nhow the enhanced adaptive protocols can be extended to accommodate two critical users. Depending on\nthe timing of the two arrivals of critical traffic, we analyze three cases where two critical users coexist.\nFirst, suppose that a second critical event occurs to user j in slot t while a critical user i is having\nsuccessful transmissions in a critical phase. Since the traffic type of a user is its local information, user j\n21\ndoes not know whether or not there is another critical user in slot t. We propose a protocol with which a\nuser transmits when its traffic type changes from normal to critical so that user j transmits in slot t. As\nin Section VI.A, the transmission by user j informs user i that there exists another critical user in the\nsystem. If user i had normal traffic, it would respond by waiting in slot t+1 according to the enhanced\nadaptive protocol so that user j could capture the channel. However, since user i has critical traffic, we\npropose a protocol that makes user i respond by transmitting in slot t+1 to inform user j of its critical\ntraffic. Then after the implicit \u201cinformation exchange\u201d in slots t and t+ 1, both user i and user j know\nthat there are two critical users. From slot t + 2 on, both users use the following decision rule g with\ninitialization idle to share the channel between them.\ng(idle) = g(busy) = 1, g(success) = 0, g(failure) = 1/2.\nIn slot t+ 2, they collide, and after a collision, they transmit with probability 1/2. Once one of the two\nusers succeeds, they alternate between (ai, aj) = (T,W ) and (ai, aj) = (W,T ) until one of the users\ncompletes the transmission of its critical traffic. After one of the users completes the transmission of\nits critical traffic, an idle slot occurs, and the situation becomes the same as the one where a critical\nevent arrives following an idle slot. We can decrease the delay by requiring the user that completed the\ntransmission of its critical traffic earlier than the other to wait in the slot following the idle slot.\nSuppose now that two critical events occur simultaneously. Two critical users, without knowing the\nexistence of another critical user, transmit with probability 1. After experiencing B + 1 consecutive\ncollisions, they realize that another critical user exists because the maximum number of consecutive\ncollisions is bounded by B when there is no or only one critical user given the enhancement discussed\nin Section VI.B. Then after B + 1 consecutive collisions, the two critical users switch to the decision\nrule g as above in order to share the channel between them.\nLastly, suppose that a second critical event occurs to user j in slot t while a critical user i is experiencing\ncollisions in a critical phase. User i realizes the existence of another critical user after B+1 consecutive\ncollisions, but at that point user j has experienced less than B+1 consecutive collisions. After experiencing\nB + 1 consecutive collisions, user i switches to the decision rule g while user j still transmits with\nprobability 1. From that point, there are only two possible transmission outcomes. Either user j succeeds,\nor users i and j collide. If user j experiences B+1 consecutive collisions before obtaining a success, it\nswitches to g and the two users can share the channel from that point on. Suppose that user j obtains a\nsuccess before experiencing B+1 consecutive collisions. Then it must be followed by a collision because\nuser i uses g. Recognizing that the pattern (success, failure) cannot occur when all other users have\n22\nnormal traffic, user j also learns the existence of another critical user and switches to g.\nTo summarize, when two critical users coexist, they can infer the existence of another critical user\nwithin a finite number of slots, recognizing the patterns that are not possible otherwise. Once the inference\nis made, they switch to another mode of operation that enables them to share the channel equally.\nVII. SIMULATION RESULTS\nWe have run simulations in order to confirm the results obtained in Sections IV and V as well as\nthe improvements from using an enhanced adaptive protocol introduced in Section VI. We consider\nthree values of N , N = 3, 10, 50, and three values of \u03b8, \u03b8 = 0.1, 0.2, 0.5. For each considered pair\nof N and \u03b8, we have simulated 1,000 rounds of a normal phase for 100 slots followed by a critical\nphase (assuming only one critical user) while choosing (q, r) as the optimal protocol with a slack delay\nconstraint, (q\u2217, r\u2217). Table I summarizes the simulation results, showing the values of variables Ts, Tc,\nCnorm, Dcrit averaged over 1,000 rounds as well as the maximum value of Dcrit among the values in\n1,000 rounds. The results show that the simulation results match closely the results from analysis in the\ncase of adaptive protocols and that enhanced adaptive protocols achieve a smaller delay in both average\nand maximum senses without degrading the performance in a normal phase. For the considered values\nof N and \u03b8, Dcrit ranges from 0.68 to 1.02 in the case of enhanced adaptive protocols and from 0.93 to\n1.66 in the case of adaptive protocols. Hence, even without imposing a delay constraint, we can achieve\na reasonably small delay in a critical phase by using a protocol proposed in this paper. Also, Tc ranges\nfrom 2.19 to 2.55, which shows that contention among normal users is resolved effectively by a proposed\nprotocol.\nVIII. CONCLUSION\nWe have explored the possibility of achieving coordination in a network with dynamically changing\nuser types by using adaptive MAC protocols with memory. The general theme of this research agenda is\nto investigate the extent to which the memory of local information can substitute explicit message passing\nin achieving coordination. In this paper, we are able to obtain satisfactory performance with protocols\nutilizing short memory because we have focused on a relatively simple setting where there are only two\ntypes and there can be at most one or two critical users. In a more complex setting where there are\nmore than two types and more possible distributions of types, achieving coordination by using only local\ninformation will become more difficult and, if possible, require longer memory. We leave it as a future\nresearch topic to investigate the performance of adaptive protocols with memory in a general setting of\ndynamically changing user types.\n23\nTABLE I: Summary of simulation results (AP: adaptive protocols, EAP: enhanced adaptive protocols\nwith B = 5)\nTs Tc Cnorm Dcrit maxDcrit\nAP (analysis) 10 2.1959 0.8199 1.1786\n\u03b8 = 0.1 AP (simulation) 10.1727 2.1865 0.8146 1.1820 11\nEAP (simulation) 10.1761 2.1879 0.8145 0.6820 5\nN = 3 AP (analysis) 5 2.1959 0.6948 1.0899\n(q\u2217 = 0.3397, \u03b8 = 0.2 AP (simulation) 4.9567 2.2122 0.6872 1.1340 11\nr\u2217 = 0.4896) EAP (simulation) 4.9544 2.2133 0.6870 0.7330 5\nAP (analysis) 2 2.1959 0.4767 0.9352\n\u03b8 = 0.5 AP (simulation) 2.0105 2.1853 0.4788 0.9340 9\nEAP (simulation) 2.0106 2.1876 0.4786 0.7660 5\nAP (analysis) 10 2.4374 0.8040 1.5297\n\u03b8 = 0.1 AP (simulation) 9.9352 2.4316 0.7953 1.4480 8\nEAP (simulation) 9.9365 2.4358 0.7952 0.9180 5\nN = 10 AP (analysis) 5 2.4374 0.6723 1.3978\n(q\u2217 = 0.1051, \u03b8 = 0.2 AP (simulation) 5.0662 2.4562 0.6696 1.3910 11\nr\u2217 = 0.4786) EAP (simulation) 5.0657 2.4585 0.6692 0.9380 5\nAP (analysis) 2 2.4374 0.4507 1.1759\n\u03b8 = 0.5 AP (simulation) 1.9926 2.4350 0.4501 1.1180 8\nEAP (simulation) 1.9928 2.4367 0.4499 0.8930 5\nAP (analysis) 10 2.5138 0.7991 1.6468\n\u03b8 = 0.1 AP (simulation) 9.8745 2.5389 0.7872 1.6570 10\nEAP (simulation) 9.8807 2.5452 0.7870 1.0230 5\nN = 50 AP (analysis) 5 2.5138 0.6654 1.4995\n(q\u2217 = 0.0213, \u03b8 = 0.2 AP (simulation) 5.0067 2.4998 0.6615 1.5090 10\nr\u2217 = 0.4754) EAP (simulation) 5.0114 2.5011 0.6616 1.0050 5\nAP (analysis) 2 2.5138 0.4431 1.2546\n\u03b8 = 0.5 AP (simulation) 1.9945 2.5180 0.4418 1.2470 9\nEAP (simulation) 1.9950 2.5193 0.4417 1.0060 5\nREFERENCES\n[1] J. Park and M. van der Schaar, \u201cMedium access control protocols with memory,\u201d UCLA Tech. Rep. Available:\nhttp://arxiv.org/abs/0906.0531\n[2] IEEE 802.11, Part 11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) specifications, 1999.\n[3] L. G. Roberts, \u201cAloha packet system with and without slots and capture,\u201d ACM SIGCOMM Comput. Commun. Rev., vol.\n5, no. 2, pp. 28\u201342, Apr. 1975.\n24\n[4] IEEE 802.11e/D5.0, Draft Supplement to Part 11: Wireless Medium Access Control (MAC) and physical layer (PHY)\nspecifications: Medium Access Control (MAC) Enhancements for Quality of Service (QoS), 2003.\n[5] D. Gu and J. Zhang, \u201cQoS enhancement in IEEE 802.11 wireless local area network,\u201d IEEE Commun. Mag., vol. 41, no.\n6, pp. 120\u2013124, Jun. 2003.\n[6] D. Qiao and K. G. Shin, \u201cAchieving efficient channel utilization and weighted fairness for data communications in IEEE\n802.11 WLAN under the DCF,\u201d in Proc. IWQoS, 2002, pp. 227\u2013236.\n[7] A. H. Mohsenian-Rad, J. Huang, M. Chiang, and V. W. S. Wong, \u201cUtility-optimal random access without message passing,\u201d\nIEEE Trans. Wireless Commun., vol. 8, no. 3, pp. 1073\u20131079, Mar. 2009.\n[8] R. T. Ma, V. Misra, and D. Rubenstein, \u201cAn analysis of generalized slotted-Aloha protocols,\u201d IEEE/ACM Trans. Netw.,\nvol. 17, no. 3, pp. 936\u2013949, Jun. 2009.\n[9] D. Bertsekas and R. Gallager, Data Networks, 2nd ed. Saddle River, NJ: Prentice Hall, 1992.\n[10] C. M. Grinstead and J. L. Snell, Introduction to Probability. Providence, RI: AMS, 1997.\n[11] G. Bianchi and I. Tinnirello, \u201cKalman filter estimation of the number of competing terminals in an IEEE 802.11 network,\u201d\nin Proc. IEEE INFOCOM, 2003.\n",
      "id": 698968,
      "identifiers": [
        {
          "identifier": "oai:arxiv.org:1005.0693",
          "type": "OAI_ID"
        },
        {
          "identifier": "2121548",
          "type": "CORE_ID"
        },
        {
          "identifier": "279458017",
          "type": "CORE_ID"
        },
        {
          "identifier": "1005.0693",
          "type": "ARXIV_ID"
        },
        {
          "identifier": "10.1109/tsp.2010.2094613",
          "type": "DOI"
        }
      ],
      "title": "Adaptive MAC Protocols Using Memory for Networks with Critical Traffic",
      "language": {
        "code": "en",
        "name": "English"
      },
      "magId": null,
      "oaiIds": [
        "oai:arxiv.org:1005.0693"
      ],
      "publishedDate": "2010-05-05T00:00:00",
      "publisher": "'Institute of Electrical and Electronics Engineers (IEEE)'",
      "pubmedId": null,
      "references": [],
      "sourceFulltextUrls": [
        "http://arxiv.org/abs/1005.0693"
      ],
      "updatedDate": "2021-04-23T06:09:48",
      "yearPublished": 2010,
      "journals": [
        {
          "title": null,
          "identifiers": [
            "1053-587X"
          ]
        }
      ],
      "links": [
        {
          "type": "download",
          "url": "http://arxiv.org/abs/1005.0693"
        },
        {
          "type": "display",
          "url": "https://core.ac.uk/works/698968"
        }
      ]
    },
    {
      "acceptedDate": "2010-10-26T00:00:00",
      "arxivId": null,
      "authors": [
        {
          "name": "Groenewegen, P.P.,"
        },
        {
          "name": "Smits, M.,"
        },
        {
          "name": "Timmermans, D.R.M.,"
        },
        {
          "name": "Wagner, C.,"
        },
        {
          "name": "Wal, G. van der,"
        },
        {
          "name": "Zegers, M.,"
        },
        {
          "name": "Zwaan, L.,"
        }
      ],
      "citationCount": 0,
      "contributors": [
        "Faculty of Medical Sciences-General",
        "Pathology & Medical Biology: Medical Biology",
        "Sociology/ICS"
      ],
      "outputs": [
        "https://api.core.ac.uk/v3/outputs/561315476",
        "https://api.core.ac.uk/v3/outputs/519194266",
        "https://api.core.ac.uk/v3/outputs/12959759",
        "https://api.core.ac.uk/v3/outputs/92425222",
        "https://api.core.ac.uk/v3/outputs/148192402",
        "https://api.core.ac.uk/v3/outputs/232376971",
        "https://api.core.ac.uk/v3/outputs/596909749",
        "https://api.core.ac.uk/v3/outputs/561337270",
        "https://api.core.ac.uk/v3/outputs/190176838",
        "https://api.core.ac.uk/v3/outputs/194920630",
        "https://api.core.ac.uk/v3/outputs/596931456",
        "https://api.core.ac.uk/v3/outputs/85336846"
      ],
      "createdDate": "2013-08-06T18:44:38",
      "dataProviders": [
        {
          "id": 4786,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/4786",
          "logo": "https://api.core.ac.uk/data-providers/4786/logo"
        },
        {
          "id": 5394,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/5394",
          "logo": "https://api.core.ac.uk/data-providers/5394/logo"
        },
        {
          "id": 3203,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/3203",
          "logo": "https://api.core.ac.uk/data-providers/3203/logo"
        },
        {
          "id": 708,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/708",
          "logo": "https://api.core.ac.uk/data-providers/708/logo"
        },
        {
          "id": 4580,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/4580",
          "logo": "https://api.core.ac.uk/data-providers/4580/logo"
        },
        {
          "id": 5364,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/5364",
          "logo": "https://api.core.ac.uk/data-providers/5364/logo"
        },
        {
          "id": 22326,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/22326",
          "logo": "https://api.core.ac.uk/data-providers/22326/logo"
        },
        {
          "id": 508,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/508",
          "logo": "https://api.core.ac.uk/data-providers/508/logo"
        },
        {
          "id": 5375,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/5375",
          "logo": "https://api.core.ac.uk/data-providers/5375/logo"
        }
      ],
      "depositedDate": "2010-02-08T00:00:00",
      "abstract": "Objectives \nTo examine the causes of adverse events\n(AEs) and potential prevention strategies to minimise the\noccurrence of AEs in hospitalised patients.\n\nMethods \nFor the 744 AEs identified in the patient record\nreview study in 21 Dutch hospitals, trained reviewers\nwere asked to select all causal factors that contributed\nto the AE. The results were analysed together with data\non preventability and consequences of AEs. In addition,\nthe reviewers selected one or more prevention strategies\nfor each preventable AE. The recommended prevention\nstrategies were analysed together with four general\ncausal categories: technical, human, organisational and\npatient-related factors.\n\nResults \nHuman causes were predominantly involved in\nthe causation of AEs (in 61% of the AEs), 61% of those\nbeing preventable and 13% leading to permanent\ndisability. In 39% of the AEs, patient-related factors were\ninvolved, in 14% organisational factors and in 4%\ntechnical factors. Organisational causes contributed\nrelatively often to preventable AEs (93%) and AEs\nresulting in permanent disability (20%). Recommended\nstrategies to prevent AEs were quality assurance/peer\nreview, evaluation of safety behaviour, training and\nprocedures. For the AEs with human and patient-related\ncauses, reviewers predominantly recommended quality\nassurance/peer review. AEs caused by organisational\nfactors were considered preventable by improving\nprocedures.\n\nDiscussion \nHealthcare interventions directed at human\ncauses are recommended because these play a large\nrole in AE causation. In addition, it seems worthwhile to\ndirect interventions on organisational causes because the\nAEs they cause are nearly always believed to be\npreventable. Organisational factors are thus relatively\neasy to tackle. Future research designs should allow\nresearchers to interview healthcare providers that were\ninvolved in the event, as an additional source of\ninformation on contributing factors.",
      "documentType": "research",
      "doi": "10.1136/qshc.2008.030726",
      "downloadUrl": "https://core.ac.uk/download/pdf/12959759.pdf",
      "fieldOfStudy": "medicine",
      "fullText": "Exploring the causes of adverse events in hospitals\nand potential prevention strategies\nM Smits,\n1 M Zegers,\n1 P P Groenewegen,\n1,2 D R M Timmermans,\n3 L Zwaan,\n3\nG van der Wal,\n3 C Wagner\n1,3\nABSTRACT\nObjectives To examine the causes of adverse events\n(AEs) and potential prevention strategies to minimise the\noccurrence of AEs in hospitalised patients.\nMethods For the 744 AEs identi\ufb01ed in the patient record\nreview study in 21 Dutch hospitals, trained reviewers\nwere asked to select all causal factors that contributed\nto the AE. The results were analysed together with data\non preventability and consequences of AEs. In addition,\nthe reviewers selected one or more prevention strategies\nfor each preventable AE. The recommended prevention\nstrategies were analysed together with four general\ncausal categories: technical, human, organisational and\npatient-related factors.\nResults Human causes were predominantly involved in\nthe causation of AEs (in 61% of the AEs), 61% of those\nbeing preventable and 13% leading to permanent\ndisability. In 39% of the AEs, patient-related factors were\ninvolved, in 14% organisational factors and in 4%\ntechnical factors. Organisational causes contributed\nrelatively often to preventable AEs (93%) and AEs\nresulting in permanent disability (20%). Recommended\nstrategies to prevent AEs were quality assurance/peer\nreview, evaluation of safety behaviour, training and\nprocedures. For the AEs with human and patient-related\ncauses, reviewers predominantly recommended quality\nassurance/peer review. AEs caused by organisational\nfactors were considered preventable by improving\nprocedures.\nDiscussion Healthcare interventions directed at human\ncauses are recommended because these play a large\nrole in AE causation. In addition, it seems worthwhile to\ndirect interventions on organisational causes because the\nAEs they cause are nearly always believed to be\npreventable. Organisational factors are thus relatively\neasy to tackle. Future research designs should allow\nresearchers to interview healthcare providers that were\ninvolved in the event, as an additional source of\ninformation on contributing factors.\nSeveral studies in various countries have shown\nthat a substantial number of patients experience\nadverse events (AEs) in hospitals.\n1e9 These studies\nhave reported AE incidence rates ranging from 2.9%\nto 16.6% of all hospital admissions. Of the AEs, 25%\nto 50% were considered preventable, and in 5% to\n13% of the AEs the patient died. The studies on the\nincidence of AEs have enlarged the sense of urgency\nto take effective countermeasures to increase\npatient safety in hospitals. Reduction of AEs can\nonly be achieved if these interventions tackle the\ndominant underlying causes. To explore the causes\nof AEs and to gain more insight into potential\nprevention strategies, we carried out additional\nanalyses of data that were gathered in the Dutch\npatient record review study.\n91 0\nIn accordance with the theoretical framework of\nReason,\n11 the focus of our study was on active\nhuman behavioural failures and on latent factors\npresent within the system (organisational and\ntechnical factors) before an accident sequence\ninvolving human behaviour actually begins. In\nother words, healthcare providers\u2019 behaviour was\nnot the single point of attention; the conditions\nunder which they work were considered important\nas welldfor example, the design of equipment that\nhealthcare providers have to work with or the\nnumber of staff installed by hospital management.\nWhen planning quality and patient safety inter-\nventions in hospitals, information about prevention\nstrategies that tackle the causal factors to prevent\nfuture AEs is valuable. Perhaps the most effective\nstrategies to reduce AEs are improving technology,\noptimising procedures or training programmes for\nhealthcare providers. Therefore, the reviewers in our\nstudy assessed potential prevention strategies next\nto the causes of the AEs. This information can be an\naid for policy-makers in healthcare.\nThe objectives of our study were to gain more\ninsight into (a) the causes of AEs, (b) the relation-\nship between the causes of AEs and the prevent-\nability and health consequences of the AEs, (c)\npotential prevention strategies to prevent AEs and\n(d) the relevance of the prevention strategies for\neach main causal factor type.\nMETHODS\nStudy design and setting\nA retrospective patient record review study was\nconducted to examine AEs in Dutch hospitals with\na strati\ufb01ed random sample of 21 hospitals: 4\nuniversity, 6 tertiary teaching and 11 general\nhospitals. From each hospital, a strati\ufb01ed random\nsample was selected of 200 admissions of patients\ndischarged from the hospital in 2004 (>24 h stay)\nand 200 (or less if the total of patients who died in\n2004 was lower) admissions of patients deceased in\nthe hospital in 2004, excluding admissions of\npsychiatry, obstetrics and children <1 year old.\nAdmissions of deceased patients and patients\nadmitted to university hospitals were oversampled.\nThe methods of determining AEs were based on\nprevious AE studies in other countries and have\nbeen described in detail elsewhere.\n10\nStructured review of patient records\nBetween August 2005 and October 2006, 55 trained\nphysicians reviewed the medical, nursing and, if\n1NIVEL, Netherlands Institute for\nHealth Services Research,\nUtrecht, The Netherlands\n2Department of Sociology and\nDepartment of Human\nGeography, Utrecht University,\nUtrecht, The Netherlands\n3EMGO Institute, Department of\nPublic and Occupational Health,\nVU University Medical Center,\nAmsterdam, The Netherlands\nCorrespondence to\nMarleen Smits, NIVEL,\nNetherlands Institute for Health\nServices Research, PO Box\n1568, 3500 BN Utrecht, The\nNetherlands; m.smits@nivel.nl\nAccepted 6 March 2009\nPublished Online First\n8 February 2010\nQual Saf Health Care 2010;19:e5. doi:10.1136/qshc.2008.030726 1o f7\nOriginal research\n  group.bmj.com  on July 9, 2012 - Published by  qualitysafety.bmj.com Downloaded from available, outpatient record of all sampled admissions that\ncontained triggers (clues) for AEsdfor example, an unplanned\nreadmission, unplanned return to the operating room or unex-\npected death. The presence of one or more of the 18 prede\ufb01ned\ntriggers was judged in advance by trained nurses. For each patient\nrecord, two physician reviewers determined independently the\npresence, consequences and degree of preventability of the AEs,\nbased on a standardised procedure and review form. An AE was\nde\ufb01ned as an unintended injury among hospitalised patients that\nresults in disability, death or prolonged hospital stay, and was\ncaused by healthcare management. Preventable refers to care that\nfell below the current level of expected performance for practi-\ntioners or systems. Disability was de\ufb01ned as temporary or\npermanent impairment of physical or mental function attribut-\nable to the AE (including prolonged or strengthened treatment,\nreadmission and death).\n10\nIn total, 7926 patient records were reviewed. The reviewers\nidenti\ufb01ed 744 AEs in the records. When generalised to all\nhospital admissions, the AE incidence rate was 5.7% (corrected\nfor overrepresentation of patients admitted to a university\nhospital and patients who died in hospital). Forty per cent of the\nAEs were considered preventable and 12.8% resulted in perma-\nnent disability (including death). Detailed results of this study\nare reported in a previous publication.\n9\nPart of the review procedure was an assessment of the\nunderlying causes and prevention strategies of each AE as judged\nby the physician reviewers. The review form presented \ufb01ve main\ncausal factor categories to choose from: technical, human,\norganisational, patient-related and other. For each AE, reviewers\nselected one or more of these main causal factors based on the\ninformation in the medical record and their perception of the\nsituation. Having opted technical, organisational and/or human\ncauses, reviewers selected one or more subcategories of causal\nfactors within these main categories. The causal factor cate-\ngories were derived from a recognised taxonomy of root causes:\nthe Eindhoven Classi\ufb01cation Model (ECM) of PRISMA-Medical,\na root cause analysis tool.\n12 13 The taxonomy includes concepts\nof the theoretical frameworks of Reason\n11 and Rasmussen.\n14\nReason\u2019s system approach to accident causation can be seen in\nthe recognition of latent factors (organisational and technical)\nnext to active failures (human). The human categories of the\nECM \ufb01t in the skill-rules-knowledge framework (SRK frame-\nwork) of Rasmussen (see Box 1).\nReason used the SRK framework for his Model of Unsafe\nActs, in which \u201cviolation\u201d is added to the basic error types of the\nSRK framework.\n11 Violations are deliberate deviations from rules\nor procedures. The ECM does not cover the concept of violations.\nWe have added violations to the taxonomy to cover all concepts\nof the Model of Unsafe Acts. In table 1, the main causal factor\ncategories and subcategories are listed and explained.\nBeside the causal factor categories, the review form distin-\nguished 10 prevention strategies (table 2). The categories were\nbased on PRISMA\n13 and the Canadian patient record review\nstudy.\n7 For each AE, the reviewers could select one or more\nprevention strategies that they judged relevant for the AE.\nThere were two reviewers per AE. Both reviewers could select\nmore than one cause and more than one prevention strategy per\nAE. We reported all causes and prevention strategies that were\nselected by this panel of two physicians irrespective of whether\none or both reviewers selected the particular cause or prevention\nstrategy. We wanted to \ufb01nd a broad variety of indications to\nimprove patient safety in our exploratory study and we did not\nintend the reviewers to reach a shared conclusion. Because there\nis a lot of information in patient records, the likelihood of\nmissing a causal factor (false negative) will be larger than the\nlikelihood that a causal factor is selected mistakenly when in\nreality it does not exist (false positive). Thus, reviewers were\nconsidered complementary to each other.\nWhen both reviewers selected the same causal factor or\nprevention strategy for an AE, these were counted only once in\nthe analyses.\nStatistical analysis\nCauses of AEs and prevention strategies were analysed using\ndescriptive statistics and frequency tables. Frequencies were\ncalculated using weights that corrected for overrepresentation of\npatients admitted to a university hospital and for over-\nrepresentation of patients who died in hospital. The sampling\nweight was the inverse of the probability of being included in\nthe sample owing to the sampling design.\n9\nFor 8 of the 744 AEs, neither of the reviewers \ufb01lled out any of\nthe items in the review form about causal factors. Consequently,\nresults on causal factors will be presented for 736 AEs. For the\nprevention strategies, results of the 315 AEs that were consid-\nered preventable will be presented. All statistical analyses were\nperformed using SPSS V.14.0.\nRESULTS\nCauses of AEs (objectives a and b)\nThe 736 AEs were associated with 1017 main causal factors\nbecause reviewers could select more than one category per AE.\nFigure 1 presents the weighted percentages of the \ufb01ve main\ncausal factor categories. Human causes were predominantly\ninvolved in AE causation (in 61% of the AEs). In 39% of the AEs,\npatient-related factors were involved. In 14% of the AEs, organ-\nisational factors contributed to the AE, in 4% technical factors\nand in 19% other factors.\nOrganisational factors had a relatively high proportion of AEs\nthat were preventable (out of all AEs with an organisational\ncause involved, 93% was considered preventable), followed by\nhuman causes (61% of all AEs with human causes). Organisa-\ntional factors also had a relatively high proportion of AEs that\nled to permanent disability (20%). Technical factors had low\nproportions of preventable AEs (22%) and AEs resulting in\nBox 1 Skill-based, rules-based and knowledge-based\nbehaviour\n14\nTo understand the mechanisms behind human error, Rasmussen\ndeveloped the skill-rules-knowledge framework (SRK frame-\nwork), with the notion that human behaviour can be controlled at\ndifferent levels of conscious control, dependent on the degree of\nfamiliarity with the task and the environment. At the skill-based\nlevel, behaviour is regulated by the lowest level of conscious\ninvolvement and is characteristic of highly routinised and auto-\nmated activities. The individual is seldom able to verbalise how\nperformance of the behaviour is controlled or explain the infor-\nmation on which the performance is based. Rule-based behaviour\nrequires some degree of conscious involvement; at this level,\nbehaviour is controlled by stored rules derived from experience or\nother\u2019s know-how. At this level, performance is typically based\non speci\ufb01c ability and the rules for performance can be verbal-\nised. At the knowledge-based level, stored rules do no longer\napply and a novel situation is presented for which a plan must be\ndeveloped to solve a problem. Here, the individual uses\nconceptual reasoning or trial-and-error.\n2o f7 Qual Saf Health Care 2010;19:e5. doi:10.1136/qshc.2008.030726\nOriginal research\n  group.bmj.com  on July 9, 2012 - Published by  qualitysafety.bmj.com Downloaded from Table 1 Explanation of causal factors categories\nMain category Subcategory Code Description\nLatent conditions\nTechnical Design TD Failures due to poor design of equipment,\nsoftware, labels or forms\nConstruction TC Correct design, which was not constructed\nproperly or was set up incorrectly\nMaterials TM Material defects\nExternal T-ex Technical failures beyond the control and\nresponsibility of the investigating organisation\nOrganisational Transfer of knowledge OK Failures resulting from inadequate measures\ntaken to ensure that situational or domain-speci\ufb01c\nknowledge or information is transferred to all new\nor inexperienced staff\nProtocols OP Failures relating to the quality and availability of\nthe protocols within the department (too\ncomplicated, inaccurate, unrealistic, absent or\npoorly presented)\nManagement priorities OM Internal management decisions in which safety is\nrelegated to an inferior position when faced with\ncon\ufb02icting demands or objectives. This is\na con\ufb02ict between production needs and safety.\nExample: decisions that are made about staf\ufb01ng\nlevels\nCulture OC Failures resulting from a collective approach and\nits attendant modes of behaviour to risks in the\ninvestigating organisation\nExternal O-ex Failures at an organisational level beyond the\ncontrol and responsibility of the investigating\norganisation\nActive errors\nHuman Knowledge-based behaviour Knowledge-based behaviour HKK The inability of an individual to apply his/her\nexisting knowledge to a novel situation\nRule-based behaviour Quali\ufb01cations HRQ An incorrect \ufb01t between an individuals training or\neducation and a particular task\nCoordination HRC A lack of task coordination within a healthcare\nteam in an organisation. Example: an essential\ntask not being performed because everyone\nthought that someone else had completed the\ntask\nVeri\ufb01cation HRV The correct and complete assessment of\na situation including related conditions of the\npatient and materials to be used before starting\nthe intervention\nIntervention HRI Failures that result from faulty task planning and\nexecution. Example: washing red cells by the\nsame protocol as platelets\nMonitoring HRM Monitoring a process or patient status. Example:\na trained technologist operating an automated\ninstrument and not realising that a pipette that\ndispenses reagents is clogged\nSkill-based behaviour Slips HSS Failures in performance of highly developed skills.\nExample: a computer entry error\nTripping HST Failures in whole body movements. These errors\nare often referred to as \u201cslipping, tripping or\nfalling\u201d. Examples: a blood bag slipping out of\none\u2019s hands and breaking or tripping over a loose\ntile on the \ufb02oor\nExternal H-ex Human failures originating beyond the control and\nresponsibility of the investigating organisation\nViolations Violations V Failures by deliberate deviations from rules or\nprocedures\nOther factors\nPatient related Patient-related factor PRF Failures related to patient characteristics or\nconditions, which are beyond the control of staff\nand in\ufb02uence treatment. Example: communicative\nskills, treatment compliance\nOther Unclassi\ufb01able X Failures that cannot be classi\ufb01ed in any other\ncategorydeg, complication, abstain policy, rare\ndisease\nDescriptions (except for \u201cviolations\u201d) are derived from Van Vuuren et al\n12 and Van der Schaaf and Habraken.\n13\nQual Saf Health Care 2010;19:e5. doi:10.1136/qshc.2008.030726 3o f7\nOriginal research\n  group.bmj.com  on July 9, 2012 - Published by  qualitysafety.bmj.com Downloaded from permanent disability (5%) (\ufb01gure 1). In the subgroup of AEs that\nwere preventable and led to permanent disability, the distribu-\ntion of causal factors shows that in these AEs there were nearly\nalways human causes involved (94%), frequently organisational\n(36%) and patient-related causes (33%), and rarely technical\ncauses (1%) (\ufb01gure 2).\nFor the technical, human and organisational categories, one or\nmore speci\ufb01c subcategories of causes were selected as well. The\nresults are presented in table 3 (see also Appendix for examples).\nMaterial defects were the most common technical factors (34%\nof all AEs with technical causes). Contrary to the other technical\nfactors,materialdefects wereallassociatedwith preventableAEs.\nHuman causes were predominantly knowledge based (46% of\nall AEs with human causes) and/or related to rule-based failures\nregarding monitoring (27%), intervention (26%) and/or veri\ufb01ca-\ntion (21%). These causal factors, as well as violations, were asso-\nciated with large proportions of preventable AEs (74% to 89%).\nTransfer of knowledge was the most frequent organisational\nfactor contributing to AEs (50% of all AEs with organisational\ncauses). Failures relating to the quality and availability of\nprotocols were related to the highest proportion of AEs with\npermanent disability (33%).\nPotential prevention strategies (objectives c and d)\nFor all preventable AEs (n\u00bc315), reviewers selected 871 preven-\ntion strategies (table 4). Quality assurance/peer review was the\nmost frequently selected strategy (65%), followed by evaluation\n(53%) training (50%) and procedures (40%). Financial invest-\nments, up-scaling of the problem to a higher organisational level\nand increasing the number of personnel were least often\nconsidered as relevant methods to prevent AEs (2% to 3%).\nFor the AEs with human and patient-related causes, reviewers\npredominantlyrecommendedqualityassurance/peerreview(68%\nand 78%, respectively). AEs caused by organisational factors were\nconsidered preventable by improving procedures (67%).\nDISCUSSION\nGeneral \ufb01ndings\nThe study provides an initial overview of causes of AEs and\nrequired remedial action. The causes identi\ufb01ed by the reviewers\nwere predominantly related to human errors, especially knowl-\nedge-based and rule-based errorsdfor example, incorrect\nreasoning by a healthcare provider or not verifying if all necessary\ninstruments were present before the start of a procedure. AEs\nwith organisational factors involved were relatively often\npreventable and resulted relatively often in permanent disability,\nparticularly AEs caused by inadequate or unavailable protocols.\nOverall, technical factors (eg, an inadequate construction of\nequipment) contributed relatively less often to preventable AEs\nand AEsresulting in permanent disability.However,the technical\nfactors within the material defects subgroup all contributed to\npreventable AEs.\nTable 2 Explanation of prevention strategy categories\nPrevention strategies Description\nTechnology/equipment Redesigning of hardware, software or interface parts of the manemachine system\nProcedures Completing or improving formal and informal procedures\nInformation and communication Completing or improving available sources of information and communication structures\nTraining Improving (re)training programmes for skills needed\nMotivation Increasing the level of voluntary obedience to generally accepted rules by applying principles of positive behaviour modi\ufb01cation\nUp-scaling Handling the problem at a higher organisational leveldeg, hospital department or hospital management level\nEvaluation Evaluating the current way of behaving regarding safety\nQuality assurance/peer review Continuously monitoring of data quality based on prespeci\ufb01ed standards and assessment of a health professional\u2019s performance\nby one or more individuals in the same \ufb01eld\nFinancial investment Financial investments in required areasdeg, increasing the availability of facilities and equipment\nPersonnel Increasing the number of personnel\nDescriptions of \ufb01rst six prevention strategies derived from Van der Schaaf and Habraken.\n13\nFigure 1 Percentages are weighted for over-sampling of deceased\npatients and patients admitted to a university hospital (N: actualnumbers of\ncauses, not weighted). Reviewers could select more than one casual factor\nper AE. Preventability is related to the assessment of the preventability of\nthe AE, not the preventability of each cause underlying the AE.\n4o f7 Qual Saf Health Care 2010;19:e5. doi:10.1136/qshc.2008.030726\nOriginal research\n  group.bmj.com  on July 9, 2012 - Published by  qualitysafety.bmj.com Downloaded from The most frequently recommended strategies to prevent\nAEs were quality assurance/peer review, evaluation of safety\nbehaviour, training and improvement of procedures. For AEs\nwith human and patient-related causes, reviewers indicated\nthese could be prevented by quality assurance/peer review. For\nAEs caused by organisational factors, reviewers predominantly\nrecommended completing or improving procedures.\nTo sum up, active failures played a large role in AE causation,\nbut the reviewers also identi\ufb01ed latent factors that were present\nin the system and that contributed to AEs. To tackle active\nhuman causes, which occurred most frequently, quality assur-\nance/peer review was recommended. To deal with latent\norganisational factors, which underlie AEs that were believed to\nbe most preventable and were associated with the most severe\nconsequences, improving procedures was recommended.\nComparison with previous record review studies\nUp to now, two retrospective patient record review studies have\nassessed the causes of the AEs\n15 16 and two have examined\npossible prevention strategies.\n15 17 It is quite dif\ufb01cult to compare\nour results with these and other studies on the causes and\nprevention strategies of AEs because the classi\ufb01cations used vary\nto a large extent and most studies examined the causes of\na speci\ufb01c group of AEs, such as medication errors. However, the\ndesign of the Australian record review study was comparable to\nours.\n21 5Wilson et al\n2 reexamined the 2353 AEs identi\ufb01ed earlier\nand found that AEs in which the cause was a cognitive failure\nwere associated with high preventability scores. This is similar to\nour \ufb01ndings: we found that AEs caused by human errors were\noften preventable, next to AEs caused by organisational factors.\nLatent factors (organisational and technical factors) were not\nexamined in the Australian study. Furthermore, the main\nprevention strategies were comparable to our results: they\nrecommended new or better implemented policies and protocols,\nbetter formal quality monitoring and better education.\n15\nStrengths and limitations\nOur study has some advantages over previous studies on the\ncauses of AEs. Causes and prevention strategies were examined\ndirectly, together with the assessment of the presence of AEs,\ninstead of afterwards. The reviews were thus based on original\nrecords and not on summaries of information compiled for the\nreview, like in the Australian study.\n15 Moreover, we used a clas-\nsi\ufb01cation of causes in \ufb01ve main categories, divided in several\nsubcategories. The categories were based on the well-established\nFigure 2 Percentages are weighted for over-sampling of deceased\npatients and patients admitted to a university hospital (N: actual numbers\nof causes, not weighted). Reviewers could select more than one casual\nfactor per AE. Preventability is related to the assessment of the\npreventabilityof the AE, not the preventability of each cause underlyingthe\nAE.\nTable 3 Causes of AEs (subcategories): proportions with preventable AEs and AEs leading to permanent disability (including death)\nCauses of AEs Frequency\nPercentage (column\n%* within each\nmain category)\nPreventable\nAEs (row %*)\nAEs with\npermanent\ndisability row %*)\nTechnical Design 0 0 0 0\nConstruction 2 21 0 0\nMaterials 10 34 100 0\nExternal 2 24 0 0\nOther 3 22 0 0\nHuman Knowledge based Knowledge 241 46 77 21\nRule based Quali\ufb01cations 32 5 69 14\nCoordination 48 10 89 19\nVeri\ufb01cation 105 21 83 18\nIntervention 84 26 74 19\nMonitoring 96 27 83 17\nSkill based Slips 22 11 37 0\nTripping 5 3 75 0\nExternal 5 2 50 0\nViolation 126 29 81 17\nOther 45 14 40 5\nOrganisational Protocols 32 22 92 33\nTransfer of knowledge 46 50 93 24\nManagement priorities 7 17 100 0\nCulture 30 28 100 13\nExternal 6 5 100 0\nOther 4 4 100 0\nAE, adverse event.\nReviewers could select more than one causal factor per AE. Preventability is related to the assessment of the preventability of the AE, not to the preventability of each cause underlying the AE.\n*Percentages are weighted for oversampling of deceased patients and of patients admitted to a university hospital.\nQual Saf Health Care 2010;19:e5. doi:10.1136/qshc.2008.030726 5o f7\nOriginal research\n  group.bmj.com  on July 9, 2012 - Published by  qualitysafety.bmj.com Downloaded from theoretical frameworks of Reason and Rasmussen, which\nare often referred to in error management and patient safety\nliterature.\nThere are however some limitations. The usability of a patient\nrecord as a means to examine the causes of AEs is limited. It is\nhard to get information about all contributing factors by reading\nthe patient record only. Human actions are regularly reported on\nin a patient record and therefore human causes are most visible\nfor reviewers. One can imagine that healthcare providers are less\ninclined to note technical or organisational factors in the medical\nor nursing record of an individual patient. This can be an\nexplanation for the relatively small amounts of technical and\norganisational factors found in our study.\nAnother limitation is that there was no contact between the\nreviewers and the involved healthcare professionals to gather\nmore information about the event and contributing factors. This\nwas not possible because of privacy restrictions made before the\nstudy started and because the reviews were performed 1 to\n2 years after the occurrence of the AE. Neale et al\n18 attempted to\novercome these dif\ufb01culties in their pilot study in one UK\nhospital. The clinical staff of the hospital assessed patient\nrecords, shortly after discharge, in combination with external\nreviewers. Clinical teams have \u201cinside\u201d knowledge about the care\nprovided to the patients.\n18\nDespite the limitations, exploratory study has offered an\ninteresting overview of the causes and prevention strategies of\nAEs.\nImplications for practice and future research\nThe Dutch Society of Medical Specialists, among others, has\nformulated a national patient safety action campaign for\nhospitals \u201cPrevent harm, work safely\u201d in 2008. The results of the\npresent study served as input for this safety programme. The\nprogramme includes quality monitoring at department level,\n(team) training, evidence-based procedures and evaluations of the\nIndividual Functioning of Medical Specialists, including the\nconstruction of a personal portfolio, a personal progress plan and\nannual interviews about quality of care and communication with\ncolleagues and patients.\n19\nWe recommend that in future research into causes of AEs\na more prospective design is used in which the period between\nthe occurrence of the AE and the assessment of its causes is only\na few weeks. In that case, involved healthcare providers can be\ninterviewed to provide more information about contributing\nfactors soon after the occurrence of the AE.\nFinally, studies on AEs should use the same taxonomy for\ncauses of AEs to make national and international comparisons of\ncauses of AEs possible. The World Health Organization is\nformulating a taxonomy of patient safety events and contrib-\nuting factors.\n20 21 This taxonomy is partly based on the ECM we\nhave used in our research.\nAcknowledgements We thank everyone who contributed to the study: the\nphysicians who reviewed the patient records, the researchers who coordinated the\ndata collection and the 21 participating hospitals and their staff who facilitated the\npatient records.\nFunding The Dutch Patient Safety Research Program has been initiated by the Dutch\nSociety of Medical Specialists (in Dutch: Orde van Medisch Specialisten) with \ufb01nancial\nsupport from the Ministry of Health, Welfare and Sport. The Program is carried out by\nEMGO Institute/VUmc and NIVEL.\nCompeting interests None.\nEthics approval The project and methods had been granted ethical approval by VU\nUniversity Medical Centre in Amsterdam, The Netherlands.\nREFERENCES\n1. Brennan TA, Leape LL, Laird NM, et al. Incidence of adverse events and negligence\nin hospitalized patients. Results of the Harvard Medical Practice Study I. N Engl J Med\n1991;324:370e6.\n2. Wilson RM, Runciman WB, Gibberd RW, et al. The quality in Australian health care\nstudy. Med J Aust 1995;163:458e71.\n3. Thomas EJ, Studdert DM, Burstin HR, et al. Incidence and types of adverse events\nand negligent care in Utah and Colorado. Med Care 2000;38:261e71.\n4. Schioler T, Lipczak H, Pedersen BL, et al. Incidence of adverse events in hospitals.\nA retrospective study of medical records (in Danish). Ugeskr Laeger\n2001;163:5370e8.\n5. Vincent C, Neale G, Woloshynowych M. Adverse events in British hospitals:\npreliminary retrospective record review. BMJ 2001;322:517e19.\n6. Davis P, Lay-Yee R, Briant R, et al. Adverse events in New Zealand public hospitals 1:\noccurrence and impact. N Z Med J 2002;115:U271.\n7. Baker GR, Norton PG, Flintoft V, et al. The Canadian Adverse Events Study: the\nincidence of adverse events among hospital patients in Canada. CMAJ\n2004;170:1678e86.\n8. Michel P, Quenon JL, De Sarasqueta AM, et al. Comparison of three methods for\nestimating rates of adverse events and rates of preventable adverse events in acute\ncare hospitals. BMJ 2004;328:199.\n9. Zegers M, Bruijne MC de, Wagner C, et al. Adverse events and potentially\npreventable deaths in Dutch hospitals. Results of a retrospective patient record review\nstudy. Qual Saf Health Care 2009;18:297e302.\n10. Zegers M, de Bruijne MC, Wagner C, et al. Design of a retrospective patient record\nstudy on the occurrence of adverse events among patients in Dutch hospitals. BMC\nHealth Serv Res 2007;7:27.\n11. Reason J. Human error. Cambridge: Cambridge University Press, 1990.\n12. van Vuuren W, Shea CE, van der Schaaf TW. The development of an incident\nanalysis tool for the medical \ufb01eld. Eindhoven: Eindhoven University of Technology,\n1997.\n13. van der Schaaf TW, Habraken MMP. PRISMA-Medical: a brief description.\nEindhoven: Eindhoven University of Technology, 2005.\nTable 4 Recommended strategies for preventing AEs in relation to causes of AEs\nPrevention strategies\nFrequency Percentage*\nHumany\n(column %*)\nOrganisationaly\n(column %*)\nPatient relatedy\n(column %*)\nOthery\n(column %*)\nn[315 n[315 n[292 n[92 n[100 n[21\nQuality assurance/peer review 199 65 68 54 78 67\nEvaluation 187 53 55 57 56 85\nTraining 136 50 53 36 48 31\nProcedures 138 40 37 67 53 39\nMotivation 74 28 28 46 37 15\nInformation and communication 83 25 24 46 40 15\nTechnology/equipment 13 7 8 3 3 0\nPersonnel 9 3 3 3 2 0\nUp-scaling 6 2 2 3 3 0\nFinancial investment 5 2 1 3 3 0\nOther 21 4 4 5 2 0\nReviewers could select more than one prevention strategy per AE. The number of preventable AEs with technical causes was too small to calculate percentages for the prevention strategy\ncategories.\n*Percentages were weighted for oversampling of deceased patients and of patients admitted to a university hospital.\nyWithin subgroups of AEs that have human, organisational, patient-related or other causes, respectively.\n6o f7 Qual Saf Health Care 2010;19:e5. doi:10.1136/qshc.2008.030726\nOriginal research\n  group.bmj.com  on July 9, 2012 - Published by  qualitysafety.bmj.com Downloaded from 14. Rasmussen J. Skills, rules and knowledge: signals, signs and symbols and other\ndistinctions in human performance models. IEEE Trans Syst Man Cybern\n1983;13:257e66.\n15. Wilson RM, Harrison BT, Gibberd RW, et al. An analysis of the causes of adverse\nevents from the Quality in Australian Health Care Study. Med J Aust\n1999;170:411e15.\n16. Neale G, Woloshynowych M, Vincent C. Exploring the causes of adverse events in\nNHS hospital practice. J R Soc Med 2001;94:322e30.\n17. Davis P, Lay-Yee R, Briant R, et al. Adverse events in New Zealand public hospitals 2:\npreventability and clinical context. N Z Med J 2003;116:U623.\n18. Neale G, Chapman EJ, Hoare J, et al. Recognising adverse events and\ncritical incidents in medical practice in a district general hospital. Clin Med\n2006;6:157e62.\n19. NVZ, Orde van medisch specialisten, LEVV et al. Patient safety program Prevent harm,\nwork safely in Dutch hospitals (in Dutch), Utrecht 2007.\n20. Sherman H, Castro G, Fletcher M, et al. Towards an international classi\ufb01cation\nfor patient safety: the conceptual framework. Int J Qual Health Care 2009;21:\n2e8.\n21. Runciman W, Hibbert P, Thomson R, et al. Towards an international classi\ufb01cation for\npatient safety: key concepts and terms. Int J Qual Health Care 2009;21:18e26.\nAPPENDIX\nExamples of adverse events (AEs) and their causes and potential prevention strategies\nDescription of AE Main causal factors Subcategories of T, H and O Prevention strategies\nLeaking undersized intravascular aortic stent,\nresulting in readmission and endovascular\nreintervention\nTechnical, human Materials (TM), intervention (HRI) Technology/equipment, training,\nprocedures\nInadequate planning operation (ankle fracture)\nresulting in extended length of stay\nOrganisational Management priorities (OM) Procedures, motivation, staf\ufb01ng\nPneumonia after thoracotomy, requiring arti\ufb01cial\nrespiration and treatment with antibiotics\nOther ee (not preventable)\n(Blood) infusion rate too high in patient known\nwith heart failure and gastrointestinal bleeding,\nresulting in respiratory insuf\ufb01ciency and\ncontributing to death\nHuman Knowledge (HKK), quali\ufb01cation (HRQ), veri\ufb01cation\n(HRV)\nEvaluation\nNot-indicated surgery of adrenal gland (lung\nmetastases) resulting in needless suffering,\nrespiratory insuf\ufb01ciency and early death\nHuman, organisational Knowledge (HKK), coordination (HRC), knowledge\ntransfer (OK)\nProcedures, information and\ncommunication, evaluation\nPersistent haemorrhage of wound feeding probe Patient related ee (not preventable)\nMissed diagnosis pulmonary embolism,\ncontributing to death\nHuman Knowledge (HKK), violation (V) Training, procedures, quality assurance/\npeer review\nLens remains left behind after lens extraction,\nrequiring resurgery\nHuman Intervention (HRI) Training, quality assurance/peer review\n*For explanation of causal factors, see table 1.\nQual Saf Health Care 2010;19:e5. doi:10.1136/qshc.2008.030726 7o f7\nOriginal research\n  group.bmj.com  on July 9, 2012 - Published by  qualitysafety.bmj.com Downloaded from doi: 10.1136/qshc.2008.030726\n8, 2010\n 2010 19: 1-7 originally published online February Qual Saf Health Care\n \nM Smits, M Zegers, P P Groenewegen, et al.\n \nstrategies\nhospitals and potential prevention \nExploring the causes of adverse events in\n  http://qualitysafety.bmj.com/content/19/5/1.11.full.html\nUpdated information and services can be found at: \nThese include:\nReferences\n  http://qualitysafety.bmj.com/content/19/5/1.11.full.html#related-urls\nArticle cited in: \n \n  http://qualitysafety.bmj.com/content/19/5/1.11.full.html#ref-list-1\nThis article cites 17 articles, 7 of which can be accessed free at:\nservice\nEmail alerting\nthe box at the top right corner of the online article.\nReceive free email alerts when new articles cite this article. Sign up in\nNotes\n  http://group.bmj.com/group/rights-licensing/permissions\nTo request permissions go to:\n  http://journals.bmj.com/cgi/reprintform\nTo order reprints go to:\n  http://group.bmj.com/subscribe/\nTo subscribe to BMJ go to:\n  group.bmj.com  on July 9, 2012 - Published by  qualitysafety.bmj.com Downloaded from ",
      "id": 5497693,
      "identifiers": [
        {
          "identifier": "1989072876",
          "type": "MAG_ID"
        },
        {
          "identifier": "oai:pure.rug.nl:publications/2f38f96e-0131-4a67-ab5f-b2778e5fc178",
          "type": "OAI_ID"
        },
        {
          "identifier": "oai:pure.eur.nl:openaire_cris_publications/edfc2377-0097-42d9-97ad-f8ca1cfb607a",
          "type": "OAI_ID"
        },
        {
          "identifier": "519194266",
          "type": "CORE_ID"
        },
        {
          "identifier": "596931456",
          "type": "CORE_ID"
        },
        {
          "identifier": "518604486",
          "type": "CORE_ID"
        },
        {
          "identifier": "561637972",
          "type": "CORE_ID"
        },
        {
          "identifier": "194920630",
          "type": "CORE_ID"
        },
        {
          "identifier": "596909749",
          "type": "CORE_ID"
        },
        {
          "identifier": "85336846",
          "type": "CORE_ID"
        },
        {
          "identifier": "190176838",
          "type": "CORE_ID"
        },
        {
          "identifier": "561315476",
          "type": "CORE_ID"
        },
        {
          "identifier": "232376971",
          "type": "CORE_ID"
        },
        {
          "identifier": "518871322",
          "type": "CORE_ID"
        },
        {
          "identifier": "561414899",
          "type": "CORE_ID"
        },
        {
          "identifier": "148192402",
          "type": "CORE_ID"
        },
        {
          "identifier": "12959759",
          "type": "CORE_ID"
        },
        {
          "identifier": "10.1136/qshc.2008.030726",
          "type": "DOI"
        },
        {
          "identifier": "92425222",
          "type": "CORE_ID"
        },
        {
          "identifier": "561337270",
          "type": "CORE_ID"
        },
        {
          "identifier": "oai:ub.rug.nl:dbi/50290f063a724",
          "type": "OAI_ID"
        },
        {
          "identifier": "oai:pure.eur.nl:publications/edfc2377-0097-42d9-97ad-f8ca1cfb607a",
          "type": "OAI_ID"
        },
        {
          "identifier": "oai:pure.rug.nl:openaire_cris_publications/2f38f96e-0131-4a67-ab5f-b2778e5fc178",
          "type": "OAI_ID"
        }
      ],
      "title": "Exploring the causes of adverse events in hospitals and potential prevention strategies",
      "language": {
        "code": "en",
        "name": "English"
      },
      "magId": null,
      "oaiIds": [
        "oai:pure.eur.nl:openaire_cris_publications/edfc2377-0097-42d9-97ad-f8ca1cfb607a",
        "oai:pure.rug.nl:openaire_cris_publications/2f38f96e-0131-4a67-ab5f-b2778e5fc178",
        "oai:ub.rug.nl:dbi/50290f063a724",
        "oai:pure.rug.nl:publications/2f38f96e-0131-4a67-ab5f-b2778e5fc178",
        "oai:pure.eur.nl:publications/edfc2377-0097-42d9-97ad-f8ca1cfb607a"
      ],
      "publishedDate": "2010-01-01T00:00:00",
      "publisher": "",
      "pubmedId": null,
      "references": [],
      "sourceFulltextUrls": [
        "http://www.loc.gov/mods/v3",
        "http://ics.uda.ub.rug.nl/FILES/root/Articles/2010/SmitsM-Exploring/2010-SmitsM-Exploring.pdf",
        "https://pure.rug.nl/ws/files/2588850/2010-SmitsM-Exploring.pdf",
        "http://www.openarchives.org/OAI/2.0/oai_dc/"
      ],
      "updatedDate": "2024-01-30T13:36:48",
      "yearPublished": 2010,
      "journals": [
        {
          "title": null,
          "identifiers": [
            "2044-5415"
          ]
        }
      ],
      "links": [
        {
          "type": "download",
          "url": "https://core.ac.uk/download/pdf/12959759.pdf"
        },
        {
          "type": "reader",
          "url": "https://core.ac.uk/reader/12959759"
        },
        {
          "type": "thumbnail_m",
          "url": "https://core.ac.uk/image/12959759/large"
        },
        {
          "type": "thumbnail_l",
          "url": "https://core.ac.uk/image/12959759/large"
        },
        {
          "type": "display",
          "url": "https://core.ac.uk/works/5497693"
        }
      ]
    },
    {
      "acceptedDate": "",
      "arxivId": null,
      "authors": [
        {
          "name": "De Turck, Filip"
        },
        {
          "name": "Develder, Chris"
        },
        {
          "name": "Wauters, Tim"
        }
      ],
      "citationCount": 0,
      "contributors": [],
      "outputs": [
        "https://api.core.ac.uk/v3/outputs/55747524"
      ],
      "createdDate": "2016-11-12T12:23:18",
      "dataProviders": [
        {
          "id": 1493,
          "name": "",
          "url": "https://api.core.ac.uk/v3/data-providers/1493",
          "logo": "https://api.core.ac.uk/data-providers/1493/logo"
        }
      ],
      "depositedDate": "",
      "abstract": null,
      "documentType": "research",
      "doi": null,
      "downloadUrl": "https://core.ac.uk/download/55747524.pdf",
      "fieldOfStudy": null,
      "fullText": "          \nChapter 8  \n \nOverlay Networks for Smart Grids \nTim Wauters, Ghent University \u2013 iMinds \nFilip De Turck, Ghent University \u2013 iMinds \nChris Develder, Ghent University \u2013 iMinds \n8.1 Abstract \nSmart Grid networks imply the extension of the power grid network with communication \ntechnologies, to enable advanced coordination mechanisms. While the main drivers for Smart Grid \nprojects may vary from region to region (e.g., increasing penetration of distributed renewable energy \nproduction in the European Union, need for enhanced reliability in the United States, etc.), the key \ndifferentiators of the next generation power grid stem from the massive amounts of data that will be \nmade available at distributed locations, which must be leveraged to optimally operate the grid. Thus, \nthe basic functions that communication networks should provide can be summarized as: 1. Data \nacquisition from a massive amount of measurement devices. 2. Sending control signals to steer \nconsumption/generation (e.g., demand-supply matching). The data acquisition part clearly involves \ngathering the \u201csmart meter\u201d data from the residential meters scattered across the distribution \nnetwork. But it also implies collecting the information of so-called synchrophasors, generally known \nas Phasor Measurement Units (PMUs), which are devices typically installed in the transmission \nnetwork that combine precise measurements of currents and voltages with accurate time recording. \nApplications that can make use of these measurements (both in distribution and transmission \nnetworks) have varying requirements for real-time communications. Clearly, there is a need for \n(distributed) control mechanisms, which also imply specific network architectures. \nGenerally speaking, an overlay network is a network that is built on top of another network and uses \nthe basic services of the underlying network to provide a new service or optimize existing services. \nSmart Grid architectures can benefit from such communication overlay networks to help facilitate \nintelligent communication (for resource and network discovery, session establishment, routing, \naddressing, etc.) and data transfer between various nodes of the heterogeneous Smart Grid network. \nConcepts similar to overlay networks for telecommunication services can be introduced in Smart \nGrids to face the problems of interoperability, reduce energy consumption, decrease cost, increase \nreliability and create new service opportunities for all participants in the value chain. Many \nchallenges can be met by introducing common, ubiquitous and interoperable network technologies. \nIn this chapter, we outline the relevant overlay networking technologies that address some of the \nneeds of Smart Grids. We will discuss two types of overlay networking: 1. Multiservice networks, \n          \nreferring to multi-layer network approaches, mainly based on (G)MPLS technology to overlay (e.g., \nIP networks over optical networks). 2. Communication overlays (typically referring to IP-based \noverlays, hence mainly over the Internet). Focus will be mainly on communication overlays, since \nthis type of overlay has the broadest applicability in practice and makes no particular assumptions on \nthe available underlay technology.  \n8.2 Introduction \n8.2.1 Smart Grid applications and requirements \nSome utility applications, particularly those devoted to protection or \u201crelaying,\u201d require fast \ninteraction among devices and systems. The requirement is for \u201csub-cycle\u201d response, that is, sensing \nand action within less than 16.67 or 20 milliseconds (for 60 Hz and 50 Hz system, respectively). \nProtection schemes are designed to open circuits rapidly in the event of current spikes; transmission \nlines carry massive amounts of energy that, if misdirected for more than these time intervals, can \nlead to severe damage to equipment, impact on the environment (e.g., fires), and extreme danger to \nutility staff and the public. Transmission protection is typically supported by low-latency \ncommunications\u2014for example, analog or digital point-to-point microwave links, fast serial link-\nlevel connections over fiber, or special-purpose power line carrier systems. The cost of \nimplementing these solutions, which can be quite high, is justified by the necessity of near-real-time \nprotection schemes. For a comprehensive overview of delay and priority requirements of these \nprotection-related (and other) Smart Grid applications, we refer to Table I of [21]. \nAnother set of requirements arises from the need to monitor grid conditions across a power control \nregion or market, and eventually across multiple regions. One approach to such \u201cWide Area \nSituational Awareness\u201d involves measurement at high resolution of the phase angle between voltage \nand current at key points in the flow of energy. These so-called phasor measurements have revealed \ninter-system, sub-Hertz oscillations (with periods of 1 to 10 seconds), and can help to identify other \npotentially destabilizing conditions. Phasor Measurement Units capable of generating 30 or 60 \nsamples per second, with timestamp accuracy below 10 microseconds, are being deployed in their \nhundreds in United States power systems. Current architectures have the data flowing to a Phasor \nData Concentrator over non-specialized routed networks, but it is conceivable that high-accuracy \ndata generated at such frequencies could be useful in fine-grained, localized control schemes that \nwould benefit from a real-time network overlay. For an in-depth discussion of the requirements and \nresulting guidelines for such (PMU-based) wide-area measurement system data delivery networks, \nwe refer to [7]. \nWhether driven by data from PMUs or other sensors, advanced distributed control will likely emerge \nas another set of applications for which real-time network overlays will be useful, or even required. \nApart from, for example, PMU-based real-time control in the transmission network, possibly less \nstringent requirements apply in distribution network scenarios, where challenges arise to collect (and \naggregate) smart meter data, as well as react upon it and perform supply-demand matching. \nNevertheless, the timescales at which such balancing will be performed are likely to decrease and \nbecome more and more \u201creal-time.\u201d Indeed, balancing authorities are already contemplating \nschedules based on intervals of minutes or even seconds (as opposed to today\u2019s common one-hour \nschedules). In this respect, it is useful to make a distinction between \u201chard\u201d and \u201csoft\u201d real-time \nnetworks. Hard real-time networks imply the requirement for stringent low latency, where the \nsystem basically fails if the time constraints cannot be met. This would be the case for \ncommunication-based closed loop control systems. However, other applications (see Section 8.4, \n\u201cVision,\u201d for some examples) have less strict needs, but still call for clear Quality of Service (QoS) \n          \nmechanisms to provide certain guarantees; see the \u201cError! Reference source not found.\u201d chapter in \nthis book for more information. \nOverlay networks, as explained in more detail in the following sections, are well suited to provide \nlevels of supervised or autonomous control over the data streaming sessions, with a virtualized view \nof the underlying network resources and independent of technology choices. Distributed components \nin the overlay topology (e.g., through agent-based control [18]) can further support the necessary \nfunctionality to provide network management, monitoring, reliable transport, and security functions. \nMore specifically for the Smart Grid, meter data collection, aggregation and processing components \ncan be supported in the overlays through adaptive, robust and distributed signaling processes, in \norder to steer control mechanisms such as supply and demand matching [7]. \n8.2.2 Convergence to multi-service networks \nFor a variety of reasons\u2014namely application isolation, performance and traffic management, \nsecurity, etc.\u2014utilities have traditionally installed and operated separate networks for operational \nand corporate IT (voice and data) purposes. This isolation has been achieved by implementing \ncompletely separate physical networks (i.e., discrete optical fibers or microwave links). Depending \non their requirements and the location of their facilities, in order to implement redundant network \ntopologies (closed SONET rings, etc.) some utilities may also need to supplement their own network \nassets by leasing network services from public telecommunication carriers [on their Frame Relay, \nAsynchronous Transfer Mode (ATM), or increasingly, carrier Ethernet, MultiProtocol Label \nSwitching (MPLS), and Generalized MultiProtocol Label Switching (GMPLS)/ Dense Wavelength \nDivision Multiplexing (DWDM) infrastructure]. This is an unwelcome cost burden, because it not \nonly involves fees to carriers, but also multiple network management domains, which further \nincreases the utilities\u2019 operational expenses. \nThese factors have led utilities to explore opportunities for supporting both corporate and operational \nnetworks on a common, managed \u201cmulti-services\u201d platform. While multi-service networks, using \nMPLS as the technology of choice, aim for high-performance networking solutions (very low delay, \nvery high bandwidth capacity), overlay networks are brought into play as low cost alternative \nsolutions on top of existing networks with a virtualized view on the lower layer network \ntechnologies used.  \n8.2.3 Communication overlays \nIn telecommunication networks, overlay networks are introduced in order to cope with stringent QoS \nrequirements from communication services and applications, on top of best effort Internet. These \nrequirements cannot be met entirely by network layer solutions such as IntServ [11] and DiffServ \n[52], which suffer from scalability issues and cannot be realized end-to-end, spanning multiple \nautonomous systems. In addition to these problems, the current routing infrastructure also exhibits \nseveral shortcomings, such as suboptimal routing in terms of delay and/or packet loss ratio, slow \nreactions to network link failures and the absence of support for multi-domain multicasting. \nGenerally speaking, an overlay network can be defined as a network that is built on top of another \nnetwork and that uses the basic services of the underlying network to provide a new service or \noptimize existing services. Using overlay network technology offers a number of advantages over \nproviding support in the equipment in the underlying networks. Because overlay technology does not \nrequire a change in core Internet routers, an overlay network can be deployed much quicker than any \nchange that would require a major infrastructure overhaul. Important benefits are the ability to span \nmultiple underlay networks, possibly with different networking technologies, and to offer generic \n          \nhigher-level services and support. A popular example of an overlay network is Skype \nCommunications\u2019 Voice over IP service (VoIP) service that allows users to make voice and video \ncalls over the internet. The Skype overlay is used to locate the IP addresses of the called parties and \nthe QoS-aware route determination of the voice calls. \nThe broad domain of overlay networks can be split into two main categories: overlay networks that \nare formed by a set of interacting peers that are collaborating in order to profit from the use of their \nshared resources; and overlay networks that are formed by a third party that, for economical or other \nreasons, places a number of proxies to enhance the traditional network service or to offer additional \nservices. Examples of the former include the use of peer-to-peer (P2P) networks to distribute and \nstore files across the network and to provide VoIP and video streaming services. Examples of the \nlatter include the usage of fixed overlay networks to provide QoS, increase resilience and offer \nmulticasting. In [14] a similar classification and taxonomy of overlay networks is presented. \nOverlay networks typically have components located in different (often hierarchical) locations of the \nnetwork, to enhance the connectivity over multiple segments of the end-to-end path, from inter-\ndomain autonomous systems to access networks. Resilient, scalable, transparent and quality-aware \n(inter- and intra-domain) routing services can be offered on overlay networks through dynamic \noverlay topology instantiation and traffic engineering. Often, monitoring components gather (cross-\nlayer) networking information in order to steer the decision making process to adapt the overlay \nnetwork characteristics on-the-fly, thus guaranteeing that service level agreements (SLAs) are \nrespected. Smart Grids could benefit from such overlay functionality to dynamically organize the \noverlay network, gather meter data efficiently and optimally balance resource usage for supply and \ndemand matching. \n8.3 Technology \n8.3.1 Introduction \nUndeniably, the Internet Protocol (IP) is one of the most predominant underlying technologies in \ntoday\u2019s telecommunication networks. Thus, we can expect it to play a crucial role also in the context \nof Smart Grids. The Internet however was conceived as a best effort network, thus lacking direct \nsupport for the QoS requirements that many Smart Grid applications require, as pointed out in the \nIntroduction. In this section, we outline the evolution of telecommunication networks\u2014and in \nparticular communication overlay technology\u2014that aims to overcome the best effort limitations. \nWhereas this evolution originated for application scenarios beyond Smart Grids, the technological \nsolutions that arose clearly can be applied to the current Smart Grid challenges posed on \ncommunication networks. \n8.3.2 Evolution of communication overlay networks \nThe Internet itself started as an overlay network on top of the public switched telephone network \n(PSTN). Today, IP packet transport has evolved into a basic transport medium for voice, video and \ndata. The success of the Internet was triggered by its strong interoperability and the decision to use a \nsimple protocol to provide best-effort connectivity. This allowed other functionality to be pushed to \nother layers and be implemented at the edge of the network. One of the driving principles behind the \noriginal Internet was the \u201cend-to-end argument in system design\u201d [65], which states that functions \nplaced at low levels of a system may be redundant and of little value when compared to the cost of \nproviding them at that low level. An example of this concept is pushing the reliability feature to the \nnetwork edge, for instance by using the TCP protocol. The Internet, while becoming very successful, \n          \nhas grown to an enormous infrastructure. However, as was discussed previously, it has become very \ndifficult to provide an answer for end-to-end support for QoS, resilience and multicasting, which \nessentially move away from the original simplicity behind the protocol. Furthermore, there are also \nproblems with end-to-end routing created by the sheer Internet size, and parts of the connection, \nsuch as the last mile, still exhibit problems that result in packet loss, delay and a decrease in quality. \nOverlay networks provide an abstract view of the network environment. They are often designed for \nspecific needs that do not require precise knowledge of the underlying infrastructure [15, 33]. In \noverlay architectures, a set of nodes (servers, services, end-user equipment etc.) and virtual links that \ndo not directly match those of the underlying topology, are often involved in specific applications. \nData in such applications is routed according to these virtual links and an overlay network can \ntherefore be viewed as a middle layer between them and the underlying topologies. Peer-to-peer \noverlays are a common implementation of overlay networks, and as such they have received a lot of \nattention over the past several years [5] (see also the \u201cError! Reference source not found.\u201d chapter \nof this book). \n8.3.2.1 Peer-to-peer networks \n \nFigure 8.1 \u2013 Peer-to-peer overlays: (a) mediated, (b) pure peer-to-peer, (c) hybrid (reproduced \nfrom [6]) \nPeer-to-peer (P2P) overlay networks represent a special type of overlay networks and have received \ngreat attention over the last decade [5]. The proposed P2P networks comprise 1. Unstructured \nnetworks, and 2. Structured overlays. To adapt to specific application requirements, proposed \nsolutions evolved to multiple coexisting overlays. \nOriginally, mainly mediated P2P architectures are introduced, where a central server is responsible \nfor registration of and traffic control between peers. Afterwards, unstructured networks exploiting \nbroadcasting as the primary means of communication are used. The popularity of P2P networks \nexperienced rapid growth due to their usage for the sharing of content. However, using unstructured \nnetworks introduces problems in terms of communication resources, and restricts the possibility for \nmanaging differentiated policies [70].  \nTo overcome these problems, a number of implementations have been proposed, including hybrid \narchitectures and structured overlay networks based on distributed hash tables (DHT) [17]. The key \nfeature of such structured networks is that they define specific network topologies that facilitate \nnavigation in the overlay. They enable the deployment of components such as content or services in \na flexible, scalable and decentralized way. Using distributed hash tables enables the efficient \n          \ndiffusion of information among all clients and results in a system in which specific queries can be \nanswered quickly. DHT-based architectures have a flexibility that has made it possible to \nsuccessfully implement them over grid computing networks, and not only Internet-like structures. \nOther problems associated with P2P network are the bad mapping between the overlay and the \nunderlying network [63]. Recent projects are addressing this problem by letting internet service \nproviders (ISP) and P2P users cooperate [1]. Another service that can be offered with P2P overlay \nnetworks is the usage of end system multicast networks in which overlay multicast trees are set up to \ndistribute the content to all interested receivers [60], or let participants engage in conferencing \napplications. Using a mesh pull approach is an alternative approach for distributing video content via \nP2P networks [39]. Video streaming services such as Tribler [62] are offered on P2P networks as \nwell, and most of them use BitTorrent-like protocols for content discovery and distribution. \nIt is now generally accepted that different applications may require different P2P overlay structures, \nand currently there are several proposals on instantiation and parameterization for specific overlays, \nas they are needed. One way to create multiple overlays is by inheritance (i.e., instances are \ngenerated from a parent virtual network by inheriting signaling protocols and communication \nservices, as proposed in Genesis [12]). Overlays based on declarative logic, defining their structure \nin a very compact and reusable manner, have been proposed in [57]. The proposed system, P2, is \ncapable of directly parsing and executing specification from this language, thus constructing and \nmaintaining overlays. However, these works only focus on the issue of defining overlays, not on \ninstantiating and integrating different overlays, and making them dynamically parameterizable.  \nFrameworks have been developed that define and instantiate parameterizable overlay networks \n(which thus could be applied also in a Smart Grid context), such as JXTA (Juxtapose) [9, 44]. The \nJXTA technology is a set of open, generalized P2P protocols that allow any connected device to \ncommunicate and collaborate. Introduced by Sun Microsystems, JXTA\u2019s high-level vision is to \nincrease interoperability among devices and networks. Overlay platforms on top of JXTA have been \npresented to support distributed and collaborative systems for a wide variety of industrial \napplications with similar requirements as smart grids.  \nThe main trend is that the peer-to-peer paradigm has shifted in the last few years towards an \napproach where the peer functionality has moved from low-capacity end-user devices to more \npowerful and more intelligent network agents that have more information and control over the \nnetwork communication. \nFor a more in-depth study of peer-to-peer networks and their applicability to the Smart Grid use \ncases, we refer to Section Error! Reference source not found., \u201cError! Reference source not \nfound.\u201d (for a P2P architecture for smart grids), and Section Error! Reference source not found., \n\u201cError! Reference source not found.\u201d (for the requirements it is based on) in the \u201cError! \nReference source not found.\u201d chapter of this book. \n          \n8.3.2.2 Infrastructure overlay networks \n \nFigure 8.2 \u2013 Infrastructure overlays (reproduced from [6]) \nThe second class of overlay networks is comprised of infrastructure overlay networks. Examples of \nservices that can be provided with fixed overlay networks include the provisioning of end-to-end \nQoS, enhanced resilience, content delivery and multicasting. The fast deployment and flexibility of \nan extra layer offers a powerful and fast way to implement and provision new services. Content \ndistribution networks (CDN) [74] are an example of infrastructure overlay networks. These networks \nconsist of distributed sites that are used to enhance the delivery of content by improving speed, cost \nefficiency and scalability. Typically, CDNs have several replicas of content that are cached at \nseveral surrogate servers. Akamai Technologies [2] also adds support for alternative routes, in order \nto avoid degraded parts of the network. \nThe rest of this sub-section discusses the three main functionalities of infrastructure overlay \nnetworks: 1. Quality-aware routing, 2. Scalable and resilient topology construction, and 3. Multicast \nsupport. We give some representative examples below, and subsequently conclude with an overview \nof additional functional features such as security, NAT traversal and service discovery. \nA representative example of quality-aware routing is the RON (Resilient Overlay Networks) project, \nwhich seeks to build an overlay network that is able to dynamically react to long path outages due to \nthe long recovery times of Border Gateway Protocol (BGP) [4]. Servers are placed at different \nlocations, allowing the selection of alternative routes at the overlay layer. These routes are explicitly \nmonitored, using active probing to assess quality of routing paths (in terms of e.g., latency, loss, and \nthroughput). The aim of the RON project is to provide extra reliability and the quick reaction to path \noutages. A similar idea is applied in [54], where paths via the overlay network are selected according \nto QoS metrics, which again are established based on active measurements. If links between overlay \nservers can be (dynamically) provisioned, the problem arises of appropriately sizing those overlay \nlinks. An example solution is presented in [24], where the authors look at an overlay network that is \nformed by a set of servers with a fixed position in the network: they determine the bandwidth that \nneeds to be reserved to satisfy certain QoS constraints (assuming that each QoS constraint can be \ntranslated to a link utilization threshold) on the paths between the overlay proxies by using a model \nthat is based on pipe and hose SLAs. \nTo improve the scalability of aforementioned approaches [4, 54], the authors of [75] note that the \ndecision to route via the overlay network would be better be made at the edge in the overlay access \n          \ncomponents, rather than by the overlay servers [75]. Deferring routing decisions to the edge provides \na more scalable solution, since the overlay servers themselves are not responsible for deciding on the \nroute via the overlay network and for changing the packets. In addition, it enables the extension of \nthe overlay routing service to clients located anywhere in the network. Additionally, instead of the \nfull mesh overlay networks that are often used, the use of appropriate topologies can further increase \nscalability. Typically, a hierarchical topology organization is proposed. An illustrative example of \nsuch a hierarchical approach is described in [54], which proposes QoS-aware routing algorithms for \noverlay networks with hierarchically organized brokers.  \nThe rigid topology of structured overlay approaches hardly fits the needs of modern networks with \nhighly dynamic usage patterns. Therefore, some recent proposals suggest the adoption of overlays \nwith adaptive topologies, in which the very structure of the network is determined at run-time, and \nbased on the patterns of activity that occur inside of it. Overlays could, for example, arrange nodes in \nways that place nodes with related patterns of data close to each other [37]. Another option, \nsuggested by [16], involves grouping reliable nodes into clusters and moving unreliable ones \ntowards the outside bounds of the network. These techniques are very interesting due to their high \nadaptability, and the fact that they allow robust and extremely scalable structures. Adaptive \nstructures, together with the possibility of adopting gossip-based [43] and probabilistic multicast \nmethods [28], have brought research focus back to unstructured overlays based on random graphs \n[3]. Even though the lack of any deterministic structure is making search operations less efficient, \nthe low diameter characteristic of such overlays could be successfully employed in the \nimplementation of multicast/broadcast systems with low message propagation latency (as required in \nmany Smart Grid applications, see Section 8.2, \u201cIntroduction\u201d). Adaptive topologies can clearly also \nbe exploited to increase overall resilience. This idea is pursued in [53], in which the authors study \nthe influence of the overlay topology on the overall resilience. A significant impact of overlay \ntopology on the routing performance has been found, and the conclusion was that in constructing the \noverlay topology, the underlying physical network information should be taken into account to \nconstruct effective overlay topologies: two topology-aware algorithms have been proposed as \npreferred solutions. \nOverlay networks can also be used to provide multicast support, which could be useful in a Smart \nGrid context where, for example, real-time pricing or other common control signals need to be \ndistributed to a large set of participants. The basic idea is to use so-called (unicast) tunnels, whereas \nthe multicast forwarding logic is implemented in the overlay server. A sample of such an approach is \n[56], in which the authors discuss how such tunneling can give end users access to network \nmulticasting services, even when they are in a domain without explicit multicasting support. The \nmulticast backbone network Mbone [27] also used a tunneling approach to give access to \nmulticasting without requiring ubiquitous deployment of IP multicasting in the network layer. It is \npossible to offer the multicast services with certain QoS guarantees: in [22] a dedicated overlay \nmulticasting infrastructure also takes QoS requirements into account when setting up the overlay \ndistribution trees; the focus is on pushing the multicasting functionality to a higher layer instead of \nproviding ubiquitous IP layer multicast access. The difference of [22], compared to other work in the \noverlay multicasting domain, is that it looks at tree construction specifically aimed at providing a \nlow cost distribution tree with a bounded delay to provide QoS. The platform they provide is focused \non more long-term sessions, and is based on the exchange of information with the network provider \nand the ability to make reservations in the underlying network. The adaptive topology idea can also \nbe adopted in a multicast scenario: the Yoid project [32] allows a group of hosts to dynamically \nauto-configure into two topologies\u2014a shared tree topology for distribution of application content, \nand a mesh topology for robust broadcast distribution of control information and, where appropriate, \napplication content. In [8], resilience is added: a probabilistic resilient multicast solution is applied \n          \nwith application layer multicasting, and achieves high delivery ratios at low latency constraints \n(hundreds of milliseconds). \nOverlay routing also allows for integration of security solutions and supports efficient connectivity \nand other higher-level functionality. One such example is the usage of intermediate peers for \nimproving firewall and Network Address Translation (NAT) traversal when establishing end-to-end \ncommunication sessions between peers. Such a technique is often used in VoIP P2P communication \nnetworks such as Skype [9]. Proxy components at the edge of the network [75] could also take both \napplication and network information into account to perform high-level services like data computing \nand bandwidth management. Service discovery is another problem that occurs in several domains, \nespecially web services. While the lookup service can be provided through a central Universal \nDescription, Discovery and Integration (UDDI) [71] server, new trends also suggest implementing it \nwith P2P networks [31].  \n8.3.3 Communication overlay technology overview \nWhile providing powerful mechanisms to handle decentralized and self-organizing networks of \nservices, P2P networks are very often designed for specific applications, and their choice of \narchitecture (e.g., structured vs. unstructured) strongly depends on the kinds of services that need to \nbe supported by the overlay. In order to aim for a P2P network as a generic substrate for general-\npurpose Telco or Smart Grid services, a more flexible approach is required, and the possibility of \ninstantiating a \u201cgeneric overlay\u201d by properly combining different solutions for different services is \nneeded. (See also the discussion in Section Error! Reference source not found., \u201cError! \nReference source not found.,\u201d in the \u201cError! Reference source not found.\u201d chapter of this book.) \nAnother promising field in the area of communication overlays involves semantic technologies\u2014\napplications that query specific resources based on attributes defining the resources. The AGORA \nproject [19] is an example of such a semantic overlay in which distance metrics based on Extensible \nMarkup Language (XML) descriptions are evaluated for dynamic neighbor selection in small world \nSmart Grid overlays. Integrating search functionality into the overlay network for optimized and \nenriched query and information handling will provide benefits for Smart Grid applications. \nProviding interoperability in communication overlays for different domains is an important research \ntopic as well. Session management, for example, is typically organized on communication overlay \nnetworks using Session Initiation Protocol (SIP) [64] or its distributed variant P2PSIP [59]. Using \nsuch standards in Smart Grid applications could provide significant benefits to the electricity \nindustry, an idea that is supported by the Smart Grid Special Interest Group [69]. While the current \nfocus is on electricity, similar concepts can be applied to other utility systems such as water and gas. \nSuch a modernization has recently become a significant focus for governments, vendor communities \n(utility companies and partners) as well as Industry/Standardization organizations (NIST, GridWise, \nIPSO Alliance, the IETF and IEEE). IEEE P2030 mainly provides a Smart Grid interoperability \nreference model (SGIRM) that identifies and defines generic interfaces between functional domains, \nfocusing on transport through application layers [41]. \n8.4 Vision \nLooking at Smart Grid applications from a high-level perspective, we see three major types of \napplications that can arise, using the overlay network technologies detailed above: \n\u2022 A wide-area measurement system, targeted for transmission network control based on, for \nexample, PMU data. \n          \n\u2022 A meter data aggregation system, to collect and aggregate meter data from the massive \namount of smart meters positioned in the distribution network. \n\u2022 A peer-to-peer oriented network for coordination and control for demand-supply \nbalancing. \nWe will outline each of these cases in the following subsections, illustrating how the overlay \nnetworking concepts introduced before can be applied in a Smart Grid context, and pointing out \nsome requirements and challenges. In a perfect world, a single generic, flexible software/middleware \nsolution should be able to offer the required communication components and interfaces for control \nand data aggregation algorithms supporting all of the following scenarios in a scalable way. \n8.4.1 Wide-area measurement system \nSynchrophasors (or phasor measurement units, PMUs) generate data that is coherent and real-time; \nthey measure characteristics of power (e.g., magnitude and phase angle of voltage) at a particular \ntime, synchronized to a common time reference (typically a GPS clock). Thus, combining \ninformation from multiple PMUs scattered across the transmission network allows an accurate \nsystem-wide view of practically the entire transmission network. Clearly, information that can be \nrecorded and accurately time-stamped may also include measures other than just voltage and current, \nsuch as breaker status, active/reactive power, etc. As outlined in [7], many applications can benefit \nfrom such measurements to provide increased reliability, efficient operation and stability of the \npower transmission system: \n\u2022 State estimation: Fast state calculation is important mainly for reliability, and the time-\nsynchronized measurements provided by PMUs enable quick response times for wide-area \nprotective measures. \n\u2022 Distributed control: The increasing contribution of renewable sources (e.g., windmills, \nsolar panels) to power generation implies greater variability and unpredictability compared \nto the familiar on-demand sources. These variations can be handled more effectively with \nalgorithms that use closed-loop feedback control exploiting real-time measurements. Given \nthe accurate clocks, control signals themselves can be synchronized. \n\u2022 Protection: After local protection offered by quasi-instantaneously responding relays, wide \narea system protection schemes can be put in place. These can be greatly facilitated by the \nPMU data, to deal with potential instabilities that may occur on a short timescale (50 to 250 \nms range) after a failure. \nThus, there are clear drivers for a wide-area measurement system for data delivery (WAMS-DD). \nThe authors of [7] have proposed a publish-subscribe system, illustrated in Figure 8.3(a). Publishers \nare the application programs or firmwares that send out a continuous stream of messages, in casu the \nPMU data. The applications subscribe to the relevant information (for protection, distributed control, \nstate estimation, etc.). Functionally, publishers need to register their published variables with the \ndata delivery system (i.e., the WAMS-DD), and subscribers need to communicate their request for \nsubscription to a particular (set of) variable(s). The WAMS-DD can be based on middleware, which \nthen would produce so-called proxies (one for each producer, and one for each subscriber) that \npackages the parameters into messages and provides the (interfaces to) delivery mechanisms. The \nactual delivery can be based on aforementioned overlay paradigms. As an example, a canonical peer-\nto-peer architecture is suggested in [7], as illustrated in Figure 8.3(b). The data delivery could be \nbased on the multicast overlay approaches discussed earlier. Following the overlay concept, the \ncommunication network for the delivery plane can be agnostic of the P2P components at its edges: \n          \ncontrollable mechanisms for affecting the traffic, and all WAMS-DD specific mechanisms residing \nin the proxies. \n \n(a)  (b)  \nFigure 8.3 \u2013 Architecture of a WAMS-DD (reproduced from [7], with permission) \nThe main (non-functional) requirements for such a WAMS-DD include the following [7]: \n\u2022 Requirement 1: End-to-end guarantees must be provided over the entire grid, given the \ncriticality of protection and control applications that depend on the data delivery. \n\u2022 Requirement 2: Multicast is the normal mode of operations, not point-to-point. \n\u2022 Requirement 3: End-to-end guarantees must be provided for a wide range of QoS \nparameters (i.e., this may depend on the application). \n\u2022 Requirement 4: Some applications require ultra-low latencies and one-way delivery (e.g., \norder of one full cycle, thus 16 to 20 ms for 60-50 Hz systems) \n\u2022 Requirement 5: High throughput is required. Currently, PMUs measure at 30-60 Hz; future \napplications may cover, for example, digital fault recorders that sample at 8 kHz and output \nat 720 Hz. \nThe multicast paradigm clearly has been addressed in current state-of-the-art overlay approaches \n(see before), and optimization for QoS to some extent is taken into account already. Nevertheless, \nthe stringent QoS requirements of some applications, in particular as expressed in Requirement 4 \nand Requirement 5, above, are major challenges using state-of-the-art approaches. To meet extreme \nlatency and throughput requirements, it is clear that lower network layers need to step in to \nguarantee such performance. Isolation of the PMU traffic by setting up tunnels using (G)MPLS \ntechnology, for instance, is one possible approach. As [7] rightly points out, the stringent \nrequirements that seem to be unique to the electric power market are achievable using state-of-the art \nembedded computing, and carefully design the core data delivery from an end-to-end perspective, \nwithout overloading it with unnecessary features. For particular implementation guidelines, we refer \nto [7]. \nA similar broker-based middleware framework, GridStat [38], provides flexible, robust, timely, and \nsecure delivery of operational status information for the electric power grid. A common service \nplatform for disseminating power grid status information within and between power utilities and \nmarketers ensures qualitative delivery to multiple participants through a publish-subscribe \narchitecture. \n8.4.2 Meter data aggregation system \nAutomatic meter reader (AMR) systems allow utility companies to aggregate meter data from \nvarious sources over a communication network to the utility servers. Currently, there are four major \n          \ntypes of AMR communication networks: power line carrier (PLC), cellular network, telephone lines, \nand short-range radio frequency [46]. In PLC technology, data is transmitted over voltage \ntransmission lines along with electrical power, and depends on parameters such as frequency, \npropagation speed, voltage level, distance and presence of transformers. Major challenges are high \nloss rates on the transmission medium, scalability issues due to limited geographical coverage, and \ntermination of deployments in several countries due to availability of lower-cost alternatives. \nSending short messages (SMS) over GSM networks allows for standardized communication over \nwidely available cellular networks. However, scalability and reliability is questionable, and possible \nhigh latencies and failure rates reduce the usability of such technologies for low-delay applications. \nReliability on bi-directional telephone lines is typically much better, and increased availability and \nlow cost make this alternative, although known for quite a while, worth investigating. Low-power \nRF facilities at the costumer site (e.g., Bluetooth, Wi-Fi and Zigbee) depend on the signal power and \nthe frequency band. Sensor network solutions are used nowadays, but often fail as connecting all \nnodes is difficult due to far nodes or parent nodes failures. For a more in-depth discussion of issues \nrelated to these lower layer technologies, please refer to the \u201cError! Reference source not found.\u201d \nand \u201cError! Reference source not found.\u201d chapters in this book.  \nThe introduction of smart meters has spurred various research and demonstration projects that try to \nsolve the problem of collecting utility meter information in real time, currently on time scales of five \nminutes or (usually) more. The main concern is scalability, given that a single utility can have \nmillions of customers. Also, apart from mere gathering information (e.g., for billing purposes), it is \ndesirable to make effective use of the meter information for coordination and control purposes. This \ninvolves synthesizing and interpreting the massive amounts of \u2018dumb\u2019 data to extract rich \ninformation supporting intelligent operational decisions. We discuss such control approaches in the \nnext subsection. \nOn a high level, we can identify the following functional requirements (Requirements 1 and 2, \nbelow) and non-functional requirements (Requirements 3, 4 and 5, below) for a meter data \naggregation system: \n\u2022 Requirement 1\u2014Meter detection and validation: The system should be fairly plug-and-\nplay (i.e., configuration of the meters at install time should be minimal). Registration of the \nmeter should be (semi-)automatic, and some basic validation should be performed. Clearly, \nauthentication will be crucial.  \n\u2022 Requirement 2\u2014Flexibility in meter reading operation: Both push and pull operations \nare likely to be required (i.e., the meter may need to actively send its data on its own \ninitiative, or readings may be explicitly requested by other system components). \n\u2022 Requirement 3\u2014Privacy and security: The data captured by the meter can reveal \ninformation about the customer\u2019s behavior, and hence is quite sensitive (cf. delayed rollout \nof smart meters in The Netherlands); (see Section 8.5.3, \u201cSecurity and privacy,\u201d for further \ninformation). If metering data will be used to, for example, enable demand side \nmanagement, third parties (energy service providers) may need access to this data. \n\u2022 Requirement 4\u2014Fault tolerance: The system should be robust against potential failures, \nespecially of the communication channel towards the meter. Depending on the time \ngranularity of measurements and how detailed this needs to be communicated to the utility, a \nvarying amount of meter data will need to be stored locally in (or near) the meter. \n\u2022 Requirement 5\u2014Scalability in space and time domain: Spatial scalability (i.e., in terms \nof number of participating meters) is of primordial importance. In addition, the time \ngranularity of meter data may vary according to the application. For example, for billing it \n          \nwill depend on the rate structure (real-time pricing versus time-of-use). Note that accurate \nmeter clock synchronization is an important concern for the meter data aggregation system. \nIn terms of Requirement 5, we may observe an evolution to finer granularity measurements, if not \nfor billing at least for (close to real-time) control mechanisms, as discussed in the next subsection. In \nthe space domain, we may note an increasing amount of measurement components (e.g., an \nevolution towards deployment of wireless sensor networks). In particular, we can expect \nsubmetering of individual or a small subset of appliances. This opens up the question on the relation \nbetween the utility metering systems (recording the whole household as a single entity) and so-called \nhome energy management systems (HEMS) deployed within the household.  \nThe latter also implies interaction and possible integration with control mechanisms. In the case of \nHEMS, this is local control to optimize energy consumption within the household locally. We also \nenvision integration of meter data aggregation with control systems of power networks (distribution \nand possibly beyond). Such evolution can already be observed in research projects [34] such as the \nEuropean FP7 project OpenNode, taking inputs from the OPENMeter project on AMI, and \nADDRESS on active demand. To support such an evolution with scalable architectures, we believe \nthe use of communication overlay technology will be crucial. \n8.4.3 P2P coordination and control \nIncreasingly, dispersed energy resources (DERs) such as wind turbines, solar panels and combined \nheat-power units (CHP) are deployed in the distribution network. Clearly, the renewable sources are \nhighly unpredictable compared to classical bulk generation using conventional sources (e.g., coal, \nnuclear and hydro). Moreover, if sufficient generation (and possibly storage) facilities are present in \npart of the grid, such a part could be operated in so-called islanding mode, as a microgrid. Hence, \ncontrol algorithms are required to deal with both the distributed and fluctuating nature of the DERs, \nas well as with potentially changing network configurations (cf. transitions to/from islanding mode). \nApart from the power engineering aspects that need to be dealt with, questions arise as to providing \nappropriate communication and control infrastructure. Giving the distributed nature of DERs, and \nthe need for a dependable solution (which is robust against defective DER units, and their associated \ncommunication components), distributed coordination is a natural choice in this scenario. \nA sample solution is discussed by the authors of [20]: they propose a peer-to-peer overlay network \n(called Agora), because its flexible nature excellently matches the distributed microgrid control \napplication they envisage. The dynamically varying properties (as well as the static ones) of the \nDER/load units in the microgrid are represented in XML. Key to their concept is to quantitatively \ndescribe semantic \u201csimilarities\u201d between units, which indicates the probability that they will interact \nfor a given microgrid application. A small world overlay network is constructed between the units \n(the nodes in network terms), such that the resulting network nodes with similar functionality \n(meters, manageable loads, generators, etc.) are clustered, while so-called pupil links connect them \nto units they will cooperate with in microgrid applications. The small world property ensures that the \nnumber of hops for a message to go from one node to another will be limited (e.g., smaller than \nfive), even if there are hundreds of nodes in total.  \n          \nIED\nIED\nDER \n(photovoltaic, \nwind, etc.) DER \n(photovoltaic, \nwind, etc.)\nPower transmission\nWired communication pathway\nWireless communication pathway \t\r \u00a0\nFigure 8.4 \u2013 Microgrids, consisting of DERs interconnected via the electricity grid and \ncorresponding IEDs interconnected via the communication network  \nThe main requirements for such a DER-control can be summarized as follows (in functional \nRequirements 1 and 2, and non-functional requirements 3 and 4, below): \n\u2022 Requirement 1\u2014Dynamic participation of components: Not all DER units and loads in \nthe distribution grid to balance will be available all of the time. Moreover, in islanding \nmodes it is not necessarily known beforehand  \n\u2022 Requirement 2\u2014Resource discovery: This is closely related with the previous \nrequirement. The dynamic properties (including presence!) of the participating DERs and \nloads call for a plug-and-play like setup. \n\u2022 Requirement 3\u2014Fault tolerance: The system should be robust against failures (both of \nDERs and their corresponding communication/control components). \n\u2022 Requirement 4\u2014Scalability in space and time domain. The control and communication \nnetwork should scale well with increasing number of DER units (hundreds of nodes). \nSimilarly, the time scales for control actions may need to be very limited (few tens of \nmilliseconds). \nCurrent state-of-the-art in overlay networking, and in particular P2P networks, is clearly able to cope \nwith most of the aforementioned requirements. Nevertheless, as [20] indicates, some differences \nwith more classical overlay networks for content sharing/distribution do arise: the audio and video \nfiles typically shared through P2P networks are static resources, which themselves do not change \nover time, whereas the DER units in microgrids clearly vary very much over time. From this \nperspective, certain P2P approaches (such as for video streaming) may be relevant areas of research \nthat may inspire the Smart Grid community, since they deal with dynamic content as well. As \n          \nbefore, mainly the possibly low latencies (Requirement 4) may be a bottleneck, if the underlying \ncommunication network over which the overlay network is provided is shared with other (non-power \ngrid) applications. For a more in-depth discussion of specific P2P solutions for smart grids, we refer \nto the \u201cError! Reference source not found.\u201d chapter of this book. \n8.4.4 Outlook \nThe aforementioned scenarios boil down to (real-time) monitoring data aggregation, and \n(distributed) control. Most power applications can be characterized as operations where a subset of \ndata (spatial locality) is consumed within a certain specified time (temporal locality); this spatial and \ntemporal locality can be leveraged as an opportunity to optimize resource usage in the \ncommunication network, and maximize reliability by adopting a decentralized data-centric \ninformation infrastructure [50]. In [50] the authors outline a generic middleware that could be used \nfor aforementioned application scenarios, exploiting an overlay network of grid hub nodes akin to a \nstructured P2P network, adopting the pub-sub system [as opposed to today\u2019s typical master-slave \narchitecture of energy management systems (EMS)] to deliver time-sensitive data to appropriate \nentities. Spatial locality can be duly exploited by a virtually distributed storage system (thus \navoiding a single point of failure and bottlenecks associated with centralized approaches). Observing \ncurrent adoption of cloud-based technologies, we can expect a shift from pure P2P solutions (mainly \nrelying on functionality in end points) to adoption of concepts borrowed from cloud services. An \nexample use case of such cloud-inspired solutions is discussed in [48]. For more details on the \narchitecture (e.g., security considerations), we refer to [50]. Very specific for smart grids are the \nstringent reliability and low latency requirements (see Table I in [21]), for which today there is no \nwell-known protocol that meets them. Additionally, most well known protocols are not lightweight \n(note that [49] proposes a candidate solution). \nFuture Smart Grids will continue to require the previously raised functionally essential system \nfunctions, and thus the cited high-level requirements will continue to hold. It is foreseeable that the \nreal-time aspect, and the scale of distribution of the components involved, will only grow in \nimportance. Miniaturization and massive deployment of measurement components, as exemplified \nby the evolution towards (wireless) sensor networks, will call for extremely scalable approaches to \nmanage the complexity of Smart Grid solutions. On the other hand, the power grid can be assumed \nto evolve to a highly dynamic environment, not just in terms of power flowing in various directions \n(cf. the evolution of customers to so-called prosumers), but also in terms of topology and \ninterconnections (cf. microgrids which will operate either on or off of the main grid at different \ntimes). To deal with such large distributed environments that are characterized by a great dynamicity \nin both time and space domains, with possibly a large amount of constrained devices (cf. sensors), \nthere will be a need for adaptive algorithms to efficiently operate in all conditions. To manage this \ncomplexity, the software architectures that will have to support data collection and control\u2014and thus \nconfigure the (overlay) communication network\u2014will need intelligent and highly flexible, modular \ndesigns. We believe that a great challenge awaits to build on ideas from the autonomic networking \ncommunity to address these issues, especially incorporating components into embedded (wireless) \nsensor devices. This also implies pure communication network challenges at lower layers (layer 1-2 \nas discussed in the \u201cError! Reference source not found.\u201d chapter, and layers 2-4, treated in the \n\u201cError! Reference source not found.\u201d chapter of this book) and possibly re-thinking the \ncommunication network layers (e.g., through cross-layer optimizations). In that respect, evolutions \nfrom Future Internet [67] activities will be interesting to follow and to adopt/tweak them with \nrespect to the aforementioned requirements for Smart Grid applications. \nThe adoption and adaptation of the overlay technologies discussed previously will certainly face \nchallenges as well. In this respect, auto-configuration and auto-adaptation of the system will be one \n          \nof the more important issues (e.g., involving automatic migration of certain components to the most \nappropriate location to run them), thus, self-learning systems should be strived for. In addition, it is \nimportant that overlay networks are not blocked or shaped by ISPs to allow transfer of critical \ninformation in the overlay network. We strongly believe Internet Neutrality should be guaranteed, \nand only malicious or unfair behavior should be prevented, detected and acted upon, thus not \nhampering overlay-based applications (e.g., in the context of Smart Grids). \n8.5 Challenges and issues \nWhile the basic ideas and even fundamental technologies are already in place to implement the \noverlay approaches outlined in the previous sections, some challenges remain in applying them in \nthe Smart Grid scenario. Apart from issues pointed out above (e.g., the dynamic content generated \nby PMUs and meters), we will briefly touch upon important challenges in the following areas: \n\u2022 Resilience \n\u2022 Quality of Service (see also Chapter 8) \n\u2022 Security and privacy \n8.5.1 Resilience \nThe power network is designed to be resilient against various failures, and has various protection \nmechanisms in place. Clearly, if its control in Smart Grid scenarios is delegated largely to \n(distributed) systems based on communication networks, the latter also should be fail-proof. In \naddition, in scenarios including the aforementioned islanding mode of operation of certain parts of \nthe power grid, the grid topology may become dynamic. The overlay networks for the scenarios \npresented in Section 8.4, \u201cVision,\u201d clearly need to be made aware of both the unplanned failure \nscenarios and the planned (or at least expected) grid topology changes. Thus, also the overlay \ntopologies may need to change over time, requiring adaptive approaches inspired by the proposals \ndiscussed before (see [3, 16, 28, 37, 43]). Results and proposals from the autonomous networks \nresearch community may clearly be relevant in designing network-based coordination and control of \nresilient power networks. \nNote that even with legacy wide-area monitoring and control systems (SCADA/EMS), some \ndisturbances require extremely rapid actions that simply cannot wait for the results of, for example, \nstate estimation based on PMU data, to become available. Hence, special protection schemes often \nare in place, which are localized, hard-wired, and complementary to wide area control. In the same \nmanner, local control mechanisms can be put in place to cater for failures in the overlay or \ncommunication network (which lead to temporary outage of distributed control). This may give rise \nto multi-layer recovery strategies, not unlike those in multi-layer communication networks (e.g., IP \nover WDM; see Chapter 6 in [73]). Note that these new (e.g., PMU-based) systems for the operation, \nmonitoring, control and protection are generally known as WAMPAC systems: Wide Area \nMonitoring, Protection, and Control.  \nWith respect to the communication network itself, certain requirements (e.g., for availability) will be \ngreater in Smart Grid networks than for more conventional communication scenarios. Especially the \nchannels that are involved in carrying signals (e.g., teleprotection of the power grid) are extremely \ncritical. Similarly, information exchanged in the overlay networks may be very critical. If the \ntelecom network incorporates packet switching technologies (e.g., Ethernet, IP etc.) rather than \nsolely guaranteed circuits (e.g., SONET/SDH), this calls for appropriate protection strategies.  \n          \n8.5.2 Quality of Service (QoS) \nGiven the aforementioned criticality of the messages exchanged within the overlays, especially \ncompared to more traditional applications carried over telecommunication networks (e.g., voice, \nvideo, internet data), there is also a clear need for that underlying telecommunication network to be \nable to offer certain guarantees. (Note that even when the communication network is a dedicated one \nfor the Smart Grid applications alone, multiple such applications may coexist. For example, the \nmeter data aggregation overlay may run over the same physical network media as the control and \ncoordination overlays, and even other less critical applications may coexist, such as video streaming \nof signals from surveillance cameras.) \nHence, for the connections between peers in P2P overlays as presented earlier, we may want to \nprovide certain reservations so that the connections adhere to certain guarantees (e.g., [24] relies on \nreserved bandwidth between overlay proxies). Realizing this, in the GridStat project [35], a general \nQoS network architecture for supporting P2P communication was proposed by Bakken et al. [7].  \nWhile bandwidth requirements may be fairly reasonable (compared to, for instance, high-resolution \nvideo streaming scenarios, or massive data transfers in scientific computing), the main issue for \nSmart Grid networks may be latency. Various critical applications are cited to have latency \nrequirements in the millisecond range (e.g., a few tens of milliseconds for PMU data) [40, 42]. \n8.5.3 Security and privacy \nAs will be discussed in more detail in the \u201cError! Reference source not found.\u201d chapter of this \nbook, privacy and security are a prime concern in a mission critical system such as the power \nnetwork. First, there is need for privacy of measurement data (such as obtained from PMUs as \noutlined in Section 8.4.1 \u201cWide-area measurement system,\u201d or smart meters described in Section \n8.4.2, \u201cMeter data aggregation system\u201d). Secondly, systems for demand response etc. that would \ncontrol energy consumption (as exemplified in Section 8.4.3, \u201cP2P coordination and control\u201d) \nrequire the control decisions to be issued by the rightful party. This calls for appropriate enforcement \nof authentication (to establish the identity of communicating/controlling instances), integrity (to \nensure messages are not tampered with) and confidentiality (preventing unwanted access to data). \nSome initial ideas are proposed in [50], where the authors propose an overlay of trusted hub nodes: \nthey advocate for the use of secure channels (based on public-key-based credentials) between the \nhubs, encrypting the data exchanged, and storing the encrypted data. One remaining issue they \nindicate is that none of the current Internet standards (TLS and derivatives) seems a perfect \ncandidate for Smart Grid use cases, mainly failing to meet the mission-critical requirements that call \nfor protocol simplicity and analysis possibility. Another essential challenge is answering whether \nemergency overrides for gaining access and control should be possible, and if so, how to allow them \n(e.g., through special key escrow mechanisms). Next to such fundamental issues, there is also the \nsheer scale of the Smart Grid system, which introduces challenges in terms of configuration and \nmaintenance: an illustrative example in [47] notes that a public-key infrastructure (PKI) system \nproviding X.509 certificates is believed to require one support staff for approximately 1000 \ncertificates (clearly implying huge challenges for a utility within the order of a few millions of \nmeters). \nAlso of concern is the privacy of the end user, whose behavior (such as daily patterns in leaving his \nor her home) may be deduced from metering information [47], and whose individual device usage \ncould be identified [51]. This constitutes one of the typical complaints by consumer organizations. \nNote that while information on consumed energy clearly is required to be unambiguously \nattributable to a particular customer identity, that is not really the case for instantaneous power \n          \ngeneration and distribution (e.g., knowledge of the substation a customer is hooked up to could \nsuffice). One way of hiding user identities could thus be to aggregate such information at the \nrequired level of visibility (e.g., the substation). Other proposals include ways to prevent third parties \nfrom relating multiple messages sent by the same appliance or even customer [13, 25]. A more \ndrastic way to mask actual consumption is to have an energy storage system in place, thus \nmodulating the net power consumption as read by the meter [45]. \nNote that in Smart Grid scenarios, more than two parties may be interrelated; in addition to the \nenergy supplier (which may or not be the same party as the distribution net operator) that bills the \ncustomer, a third party energy service provider (ESP) may deliver services to assist the customer in \nlowering their bill, while providing load shedding services to grid operators. Hence, this calls for \nmulti-party trust relationships, with the associated complexity of correctly handling permissions, and \npriorities to monitor and control possibly the same devices. Such multi-party issues seem not yet to \nbe addressed by current proposals as discussed earlier [7, 20].  \n \n8.6 Summary \nSmart grids will incontestably rely on communication networks to propagate the necessary \ninformation to realize various control mechanisms. We believe that in realizing the (distributed) \ncontrol algorithms, a self-organizing overlay network will play a crucial role. It is doubtful that the \nunderlying communication network will be deployed (and optimized) for a single grid application. \nHence, overlay network techniques will be crucial to ensure a flexible, cost effective and future-\nproof solution. Such a self-organizing network should support functions such as communications \nresource discovery, negotiation and collaboration between network nodes, connection establishment \nand maintenance, to provide the performance guarantees required by Smart Grid/metering \napplications.  \nCurrent state-of-the-art and lessons learned from the distributed computing community can be \napplied and extended to cater to the unique and challenging requirements of Smart Grids. We have \noutlined relevant research achievements in the domains of peer-to-peer networking and \ninfrastructure overlay networking. Application of such ideas have been exemplified: we have \nillustrated the possible construction of a wide-area measurement system data delivery network to \nsupport various PMU applications, as well as a more distribution-network oriented peer-to-peer \napproach for microgrid control, and a content aggregation network approach to collect meter data. \nFuture challenges will likely arise from increased dynamicity in both time and space domains, as \nwell as a proliferation of measurement sensor devices. \nFrom these examples, it is clear that fundamental concepts from the distributed computing and \ncommunication network communities can be applied in Smart Grid scenarios. Nevertheless, it is also \nobvious that Smart Grids do have their peculiar requirements, which make them substantially \ndifferent from common overlay network scenarios (e.g., the time-variability of the peers in the \nmicrogrid scenario, and the high throughput and low latency requirements). Thus, we may need to \nrevisit known concepts to cater to Smart Grid traffic (e.g., resource allocation, routing, and QoS); \ntraffic generated by Smart Grid applications will likely differ quite a bit from today\u2019s traditional \nbrowsing/downloading/streaming applications, with a mix of both real-time and non-real-time traffic \nbeing generated and distributed across different parts of a Smart Grid. In particular, the need for low \nlatency communication and stringent delivery guarantees for real-time applications seem the hardest \nto meet. Given that dedicated networks will be not cost effective, there is a need for mechanisms of \nisolation and bandwidth reservation for particular (Smart Grid) flows. For this, we need the overlay \n          \napproaches to be able to request guaranteed communication channels, such as the (G)MPLS-like \napproaches discussed in the \u201cError! Reference source not found.\u201d chapter of this book. \n8.7 Recommendations \nIn the current power network, it is not unusual for intelligent electronic devices (IEDs) to take local \ncontrol actions in real-time. Indeed, to guarantee the safe operation of the grid, robust control that \ndoes not require any communication or interaction may be an acceptable option. Nevertheless, it is \nclear that a wider view of the system could allow more optimal decisions (in terms of limited waste \nof energy, fairness to all users of the system etc.). Thus, we envision an increase of \ndistributed/decentralized control of power networks. Indeed, the evolution towards a Smart Grid will \nimply a transition to increasingly distributed generation (DG), which will be less \npredictable/controllable (cf. renewable energy sources) and no longer map a clear downstream \npower flow path from generation plants to consumers. This also will incorporate power electronics \nwith more advanced functionality, for both control and measurement, to allow for more dynamic \nconfiguration and operation. \nPower transmission\nWired communication pathway\nWireless communication pathway\nK E Y:\n\t\r \u00a0\n          \nFigure 8.5 \u2013 The evolution towards a Smart Grid \nTherefore, there is a clear opportunity and even need for distributed or at least non-centralized \ncontrol strategies that coordinate the supply and demand in real time, as well as guarantee correct \nand safe operation of the grid. The current power system\u2019s intelligence in terms of networked \ninfrastructure mainly resides in the power grid\u2019s \u201cbackbone\u201d\u2014i.e., at the transmission level, for \ninstance based on SCADA (Supervisory Control And Data Acquisition) systems\u2014where wide-area \nmonitoring, protection and control actions are taken. Given evolution to DG and hence decentralized \nenergy production, even up to the level of individual consumers (e.g., photovoltaic rooftop panels), it \nis clear that such advanced control networks could reach into the distribution networks, or even into \nconsumers\u2019 homes: \u201cthe move towards the Smart Grids has to start at the bottom of the chain.\u201d [30]  \nFirst of all, the latter could imply a costly configuration/installation burden. The obvious \nrecommendation to avoid, or at least significantly minimize, such complexity is to ensure emergence \nof plug-and-play system components with embedded intelligence that could operate transparently in \na variety of system integration and configuration scenarios. Note that such configuration not only \nneeds to occur on install-time, but also during day-to-day operation, and configuration changes may \nneed to be implemented. In particular, operation of microgrids poses quite some challenges. A \nmicrogrid is an interconnection of supply, loads and storage that could operate on its own, \ndisconnected from the grid in so-called islanded mode. Dis/reconnecting the microgrid to the main \ndistribution grid clearly calls for cautious actions, from the power network\u2019s perspective. \nA popular approach to provide the required autonomic networking solution that can deal with such \ndynamic changes effectively is using agent-based systems [18, 61]. Typically, such agent systems \nallow for (near-)optimal control with a minimum of data exchange and computational burden. Yet, \nfor some applications, solutions have been devised that even operate without any inter-unit \ncommunication, such as for microgrid control [72]. Nevertheless, to achieve optimal coordination \n(e.g., across multiple microgrids), there is a clear opportunity for communication technologies as an \nenabler of closed-loop control based on information exchanged through (hard-)real-time networks.  \nAnother area of research that can be explored more deeply is that of multi-level control strategies, \ncombining local control with distributed coordination. For example, one can think of self-learning \nadaptive approaches that alternate the control strategy between local decisions and distributed \ncoordination; this adaptation could be triggered by detected changes in either the power network, or \nthe communication network (e.g., lack of bandwidth), or both. Indeed, part of the challenge in \ndeveloping control strategies for Smart Grids implies their need to be extremely robust, given the \nhigh availability requirements posed to power networks. Given the structure of the power network, \nas well as its reliance on communication networks in Smart Grid scenarios, this gives rise to multi-\nlayer network architectures and related resilience challenges (as pointed out earlier in Section 8.5.1, \n\u201cResilience\u201d), which are largely unaddressed in the Smart Grid context to date.  \nClearly, the standardization and interoperability of such architectures is another concern. Ideally, an \nICT architecture should be proposed that considers all functions required to realize a Smart Grid, and \nhence caters to metering data collection/aggregation, power network state estimation, and intelligent \ncontrol. One could dream of a unified communication network infrastructure, for reasons of cost \nefficiency in both deployment and maintenance, which is able to carry all associated traffic (with \ndifferent requirements, such as latency and bandwidth). We believe that the development of software \narchitectures (as exemplified in Section 8.4, \u201cVision,\u201d) is a crucial step in realizing that vision, and \ncalls for further interdisciplinary research from control, communication and power network \ncommunities. Once research has pointed out a satisfactory direction, standardization is a prime \nconcern and calls for definition of a framework and the interfaces that should be adhered to. Note \n          \nthat current standardization efforts in the realm of Smart Grid communications mainly focus on data \nformats (cf. the Common Information Model, CIM, in IEC 61970 and IEC 61968) and data \ncommunication (e.g., IEC 61850 for substation automation), while main architectural ideas are also \nbeing discussed (e.g., see IEEE P2030). Discussions are ongoing in terms of communication \ntechnologies, such as for neighborhood/field area networks (NAN, FAN) communicating with smart \nmeters. Utilities might also be very much interested in standardization of software subsystems (e.g., \nmiddleware-like packages). A first step could be the adoption of software architecture conventions \nand paradigms (e.g., IEEE FIPA for agent-based systems). It will be challenging to devise an \nintegrated and flexible system that is sufficiently modular, and allows domain experts to concentrate \non their specialty, calling on lower level services offered by the ICT system. Applications to be \nsupported include both analytics (to transfer the plethora of data from meters, PMUs, etc., to useful, \nsynthesized information) and complex real-time event processing (to enable optimized control). \nTo enable the development of such standards, as well as suitable control strategies (e.g., hierarchical \nor more flat interaction of equal peers), there is a need for testing and validating the various \nproposals. While limited field trials can be an option to try out (e.g., the overlay approaches \nsuggested earlier), utilities are in critical need of a near real-world environment, with real loads, \ndistribution gear and diverse consumption profiles, to develop, test, and validate their required Smart \nGrid solutions [61]. While such centers are arising (e.g., the Experimental Power Grid Centre in \nSingapore [29]), it remains a quite expensive test environment. To foster the development of \ncommunication-based architectures, the community would benefit immensely from adequate \nsimulation tools that incorporate both the power and communication networks in adequate detail. \nThe first such endeavors often resorted to co-simulation; [36] linked the Open Distribution System \nSimulator (OpenDSS) with the ns-2 Network Simulator to simulate a deployment of distributed \nenergy resources on a model of an actual distribution circuit (feeder). Similarly, [55] uses a \ncombination of communication network simulator ns-2 and Modelica for the power network. In [58], \nthe authors focus on the communication network, adding abstracted models of power network \nelements to Omnet++ while resorting to a MatLab model for detailed power network state \ncalculations. Laudable efforts are pursued within the Simulations Workgroup within OpenSG [68] to \ndevelop a framework and requirements for modeling and simulation tools and platforms for Smart \nGrid research. We strongly believe in the development of such a modular framework, allowing \nstudies at various scales in time and space of communication-based power systems, as they evolve to \nmore distributed and hybrid architectures, with control schemes based on increasingly integrated and \npervasive information and communications technologies [68]. \n8.8 Acknowledgments \nThe authors would like to thank Craig Rodine (OpenSG Users Group, USA) for sharing his views, \nand in particular his assistance in setting the chapter context in the Introduction.  \n \n \n \n          \n8.9 Sources \n[1] Aggarwal, V., Feldmann, A., Scheideler, C. 2007. \u201cCan ISPS and P2P users cooperate for \nimproved performance?\u201d SIGCOMM Computer Communication Review 37, no. 3: 29\u201340. \n[2] Akamai Technologies. www.akamai.com. \n[3] Albert, R., Barabasi, A. 2002. \u201cStatistical Mechanics of Complex Networks.\u201d Reviews of \nModern Physics 74: 47. \n[4] Andersen, D., Balakrishnan, H., Kaashoek, F., Morris, R. 2001. \u201cResilient Overlay \nNetworks.\u201d Symposium on Operating Systems Principles: 131\u2013145. \n[5] Androutsellis-Theotokis, S., Spinellis, D. 2004. \u201cA survey of peer-to-peer content \ndistribution technologies.\u201d ACM Computing Surveys 36, no. 4: 335\u2013371. \n[6] Backx, P., Wauters, T., Dhoedt, B., Demeester, P. 2002. \u201cA comparison of peer-to-peer \narchitectures.\u201d Eurescom 2002 Powerful Networks for Profitable Services.  \n[7] Bakken, D. E. , Bose, A., Hauser, C. H., Whitehead, D. E., Zweigle, G. C. 2011. \u201cSmart \nGeneration and Transmission With Coherent, Real-Time Data.\u201d Proceedings of the IEEE 99, \nno. 6: 928\u2013951. \n[8] Banerjee, S., Lee, S., Bhattacharjee, B., Srinivasan, A. 2003. \u201cResilient multicast using \noverlays.\u201d SIGMETRICS \u201903: Proceedings of the 2003 ACM SIGMETRICS International \nConference on Measurement and Modeling of Computer Systems: 102\u2013113.  \n[9] Barolli, L., Xhafa F. 2011. \u201cJXTA-Overlay: A P2P Platform for Distributed, Collaborative, \nand Ubiquitous Computing.\u201d IEEE Transactions on Industrial Electronics 58, no 6: 2163\u2013\n2172. \n[10] Baset, S., Schulzrinne, H. 2005. \u201cAn analysis of the Skype Peer-to-Peer Internet Telephony \nProtocol.\u201d Technical Report CUCS-039-04. Department of Computer Science, Columbia \nUniversity.  \n[11] Braden, R., Clark, D., Shenker, S. 1994. \u201cIntegrated Services in the Internet Architecture: an \nOverview \u2013 RFC 1633. www.ietf.org/rfc/rfc1633.txt. \n[12] Campbell, A. T., De Meer, H. G., Kounavis, M. E., Miki, K., Vicente, J., Villela, D. A. \n1999. \u201cThe Genesis Kernel: A Virtual Network Operating System for Spawning Network \nArchitectures.\u201d Proceedings of IEEE Second Conference on Open Architectures and Network \nProgramming, 1999.  \n[13] Chim, T. W., Yiu, S. M., Hui, L. C., Li, V. O. 2011. \u201cPASS: Privacy-preserving \nauthentication scheme for Smart Grid network.\u201d Proceedings of the 2nd IEEE International \nConference on Smart Grid Communications, 2011: 208\u2013213.  \n          \n[14] Clark, D., Lehr, B., Bauer, S., Faratin, P., Sami, R., Wroclawski, J. 2006. \u201cOverlay \nNetworks and the Future of the Internet.\u201d Communications & Strategies 63, no. 3. \n[15] Clarke, I., Sandberg, O., Wiley, B., Hong, T. W. 2000. \u201cFreenet: A Distributed Anonymous \nInformation Storage and Retrieval System.\u201d Workshop on Design Issues in Anonymity and \nUnobservability: 311\u2013320. \n[16] Condie, T., Kamvar, S., Garcia-Molina, H. 2004. \u201cAdaptive P2P Topologies.\u201d Technical \nReport. \n[17] Dabek, F., Kaashoek, M. F., Karger, D., Morris, R., Stoica, I. 2001. \u201cWide-area cooperative \nstorage with CFS.\u201d Proceedings of the eighteenth ACM symposium on operating systems \nprinciples, 2001: 202\u2013215.  \n[18] Deconinck, G., Labeeuw, W., Vandael, S., Beitollahi, H., De Craemer, K., Duan, R., Qui, \nZ., Ramaswamy, P.C., Vande Meerssche, B., Vervenne, I., Belmans, R. 2010. \n\u201cCommunication overlays and agents for dependable smart power grids.\u201d 5th International \nConference on Critical Infrastructure, 2010: 1\u20137.  \n[19] Deconinck, G., Vanthournout, K. 2009. \"Agora: A semantic overlay network,\" International \nJournal of Critical Infrastructures IJCIS (Inderscience) 5: 175\u2013195. \n[20] Deconinck, G., Vanthournout, K., Beitollahi, H., Qiu Z., Duan, R., Nauwelaers, B., Van Lil, \nE., Driesen, J., Belmans, R. 2008. \u201cA Robust Semantic Overlay Network for Microgrid \nControl Applications.\u201d Architecting Dependable Systems V: 101\u2013123. Springer. \n[21] Deshpande, J. G. Kim, E., Thottan, M. 2011. \u201cDifferentiated Services QoS in Smart Grid \nCommunication Networks\u201d, Bell Labs Technical Journal 16, no. 3 : 61\u201382. \n[22] De Vleeschauwer, B., De Turck, F., Dhoedt, B., Demeester, P. 2006. \u201cOnline management \nof QoS enabled overlay multicast services.\u201d IEEE GLOBECOM 2006, the Global \nTelecommunications Conference. \n[23] De Vleeschauwer, B., De Turck, F., Dhoedt, B., Demeester, P. 2009. \u201cServer placement and \npath selection for QoS-enabled overlay networks.\u201d European Transactions on \nTelecommunications: 247\u2013263. \n[24] Duan, Z., Zhang, Z., Hou, Y. T. 2003. \u201cService overlay networks: SLAs, QoS, and \nbandwidth provisioning.\u201d IEEE/ACM Transactions on Networking 11, no. 6: 870\u2013883. \n[25] Efthymiou, C., Kalogridis, G. 2010. \u201cSmart grid privacy via anonymization of smart \nmetering data.\u201d Proceedings of the 1st IEEE International Conference on Smart Grid \nCommunications, 2010: 238\u2013243. \n[26] eMule. www.emule-project.net. \n[27] Erikson. H. 1994. \u201cMbone: the multicast backbone.\u201d Communications of the ACM 37: 54\u2013\n60. \n          \n[28] Eugster, P. T., Guerraoui, R., Handurukande, S. B., Kouznetsov, P., Kermarrec, A.-M. 2003. \n\u201cLightweight Probabilistic Broadcast.\u201d ACM Transanctions on Computer Systems 21, no. 4: \n341\u2013374. \n[29] \u201cExperimental Power Grid Centre.\u201d A*Star, Singapore. http://energy.a-star.edu.sg/. \n[30] Farhangi, H. 2010. \u201cThe path of the Smart Grid.\u201d IEEE Power Energy Magazine 8, no. 1: \n18\u201328.  \n[31] Forster, F., DeMeer, H. 2004. \u201cDiscovery of Web Services with a P2P Network.\u201d \nComputational Science \u2013 ICCS 2004, 4th International Conference.  \n[32] Francis, P. 200. \u201cYoid: Extending the Internet Multicast Architecture.\u201d Unrefereed report, \n38 pages. April 2, 2000. www.icir.org/yoid/docs/index.html. \n[33] Gao, J., Steenkiste, P. 2004. \u201cDesign and evaluation of a distributed scalable content \ndiscovery system.\u201d IEEE Journal on Selected Areas in Communications 22, no. 1: 54\u201356. \n[34] Giordano, V., Gangale, F., Fulli, G., Sanchez-Jimenez, M. 2011. \u201cSmart Grid projects in \nEurope: Lessons learned and current developments.\u201d JRC-ENER Report. EU Commission. \n[35] Gjermundr, H., Bakken, D., Hauser, C., Bose, A. 2009. \u201cGridStat: A flexible QoS-managed \ndata dissemination framework for the power grids.\u201d IEEE Transactions on Power Delivery \n24, no. 1: 136\u2013143. \n[36] Godfrey, T., Mullen, S., Dugan, R. C. , Rodine, C., Griffith, D. W., Golmie, N. 2010. \n\u201cModeling Smart Grid applications with co-simulation.\u201d Proceedings of the 1st IEEE \nInternational Conference on Smart Grid Communications, 2010: 291\u2013296. \n[37] Hales, D., Arteconi. S. 2006. \u201cSLACER: A Self-Organizing Protocol for Coordination in \nP2P Networks.\u201d IEEE Intelligent Systems 22, no. 2.  \n[38] Hauser, C. H., Bakken, D. E., Dionysiou, I., Karalrd Gjermud\u00f8d, K., Irava, V. S., Helkey, J., \nBose, A. 2008. \u201cSecurity, Trust, and QoS in Next-Generation Control and Communication \nfor Large Power Systems.\u201d International Journal of Critical Infrastructures 4(1/2): 3\u201316. \n[39] Hei, X., Liu, Y., Ross, K. W. 2008. \u201cIPTV over P2P streaming networks: the mesh-pull \napproach.\u201d Communications Magazine 46, no. 2: 86\u201392. \n[40] IEEE 1646 Standard Communication Delivery Time Performance Requirements for Electric \nPower Substation Automation. 2004. IEEE. \n[41] IEEE P2030/D5.0. Draft Guide for Smart Grid Interoperability of Energy Technology and \nInformation Technology and Information Technology Operation With the Electric Power \nSystem (EPS), and End-Use Applications and Loads. 2011. IEEE SA Standards Board. \n[42] IntelliGrid Project. 2004. The Integrated Energy and Communication Systems Architecture, \nVol. IV: Technical Analysis. www.epri.com/IntelliGrid/.  \n          \n[43] Jelasity, M., Montresor, A., Babaoglu, O. 2005. \"Gossip-based aggregation in large dynamic \nnetworks.\" ACM Transactions on Computer Systems 23: 219\u2013252. \n[44] JXTA Community Project. http://java.net/projects/jxta. \n[45] Kalogridis, G., Efthymiou, C., Denic, S. Z., Lewis, T. A., Cepeda, R. 2010. \u201cPrivacy for \nsmart meters: Towards undetectable appliance load signatures.\u201d Proceedings of the 1st IEEE \nInternational Conference on Smart Grid Communications, 2010): 232\u2013237. \n[46] Khalifa, T., Naik, K., Nayak, A. 2011. \u201cA Survey of Communication Protocols for \nAutomatic Meter Reading Applications.\u201d IEEE Communications Surveys & Tutorials 13, \nno. 2. \n[47] Khurana, H., Hadley, M., Lu, N., Frincke, D. 2010. \u201cSmart-grid security issues.\u201d IEEE \nSecurity and Privacy 8, no. 1: 81\u201385. \n[48] Kim, H., Kim, Y.-J., Yang, K., Thottan, M. 2011. \u201cCloud-based Demand Response for \nSmart Grid: Architecture and Distributed Algorithms.\u201d Proceedings of the IEEE \nInternational Conference on Smart Grid Communications (SmartGridComm 2011): 416\u2013\n421.  \n[49] Kim, Y.-J., Kolesnikov, V., Kim, H., Thottan, M. 2011. \u201cSSTP: a Scalable and Secure \nTransport Protocol for Smart Grid Data Collection.\u201d Proceeds of the IEEE International \nConference on Smart Grid Communications (SmartGridComm 2011): 173-178. \n[50] Kim, Y.-J., Thottan, M., Kolesnikov, V., Lee, W. 2010. \u201cA secure decentralized data-centric \ninformation infrastructure for Smart Grid.\u201d IEEE Communications Magazine 48, no. 11: 58\u2013\n65. \n[51] Lam, H., Fung, G., Lee, W. 2007. \u201cA novel method to construct taxonomy electrical \nappliances based on load signatures.\u201d IEEE Transactions of the Consumer Electronics \nSociety 53, no. 2: 653\u2013660. \n[52] Li, T., Rekhter, Y. 1998. \u201cA Provider Architecture for Differentiated Services and Traffic \nEngineering (PASTE) \u2013 RFC 2430.\u201d http://tools.ietf.org/html/rfc2430. \n[53] Li, Z., Mohapatra, P. 2004. \u201cImpact of Topology On Overlay Routing Service.\u201d INFOCOM: \n418. \n[54] Li, Z., Mohapatra, P. 2004. \u201cQRON: QoS-aware routing in overlay networks.\u201d IEEE \nJournal on Selected Areas in Communications 22: 29\u201340. \n[55] Liberatore, V., Al-Hammouri, A. 2011. \u201cSmart grid communication and co-simulation.\u201d \nProceeds of IEEE Energytech, 2011: 1\u20135.  \n[56] Liefooghe, P., Goossens, M., Swinnen, A., Haggdorens, B. 2004. CastGate Technical \nReport (October). \n          \n[57] Loo, B. T., Condie, T., Hellerstein, J. M., Maniatis, P., Roscoe, T., Stoica, I. 2005. \n\u201cImplementing Declarative Overlays.\u201d 20th ACM Symposium on Operating Systems \nPrinciples (SOSP).  \n[58] Mets, K., Verschueren, T., Develder, C., Vandoorn, T., Vandevelde, L. 2011. \u201cIntegrated \nsimulation of power and communication networks for Smart Grid applications.\u201d \nProceedings of the 16th IEEE International Workshop on Computer-Aided Modeling, \nAnalysis and Design of Communication Links and Networks, 2011: 61\u201365.  \n[59] Peer-to-peer Session Initiation Protocol (P2PSIP). www.p2psip.org. \n[60] Pendarakis, D., Shi, S., Verma, D., Waldvogel, M. 2001. \u201cALMI: An Application Level \nMulticast Infrastructure.\u201d 3rd USNIX Symposium on Internet Technologies and Systems, \n2001: 49\u201360.  \n[61] Pipattanasomporn, M., Feroze, H., Rahman, S. 2009. \u201cMulti-agent systems in a distributed \nSmart Grid: Design and implementation.\u201d Proceedings of the IEEE Power Systems \nConference and Exhibition, 2009: 1\u20138.   \n[62] Pouwelse, J. A., Garbacki, P., Wang, J., Bakker, A., Yang, J., Iosup, A., Epema, D. H. J., \nReinders, M., van Steen, M., Sips, H. J. 2008. \u201cTRIBLER: a social-based peer-to-peer \nsystem.\u201d Concurrency and Computation: Practice & Experience. Special Issue: Recent \nAdvances in Peer-to-Peer Systems and Security 20, no. 2. \n[63] Ripeanu, M., Foster, I., Iamnitchi, A. 2002. \u201cMapping the Gnutella network: Properties of \nlarge-scale peer-to-peer systems and implications for system design.\u201d IEEE Internet \nComputing Journal 6. \n[64] Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A., Peterson, J., Sparks, R., \nHandley, M., Schooler, E. 2002. \u201cSIP: Session Initiation Protocol \u2013 RFC 3261.\u201d \nwww.ietf.org/rfc/rfc3261.txt. \n[65] Saltzer, J. H., Reed, D. P., Clark, D. D. 1984. \u201cEnd-To-End Arguments in System Design.\u201d \nACM Transactions on Computer Systems 2, no. 4: 277\u2013288. \n[66] Santacana, E., Rackliffe, G., Tang, L., Feng, X. 2010. \u201cGetting smart.\u201d IEEE Power Energy \nMagazine 8, no. 2: 41\u201348. \n[67] Schonwalder, J., Fouquet, M., Rodosek, G., Hochstatter, I. 2009. \u201cFuture Internet = content \n+ services + management.\u201d IEEE Communications Magazine 47, no. 7: 27\u201333. \n[68] \u201cSG Simulations.\u201d Open Smart Grids Users Group. \nhttp://osgug.ucaiug.org/SG_Sim/default.aspx \n[69] Smart Grid Special Interest Group. www.sipforum.org/content/view/351/266/. \n[70] Stokes, M. 2003. Gnutella2 specification document - first draft. \n          \n[71] Universal Description Discovery and Integration. www.oasis-\nopen.org/standards#uddiv3.0.2. \n[72] Vandoorn, T., Meersman, B., Degroote, L., Renders, B., Vandevelde, L. \u201cA control strategy \nfor islanded microgrids with dc-link voltage control.\u201d IEEE Transactions on Power Delivery \n26, no. 2: 703\u2013713.  \n[73] Vasseur, J.-P., Pickavet, M., Demeester, P. 2004. Network recovery\u2014Protection and \nRestoration of Optical, SONET- SDH, IP, and MPLS. D. Clarck, Ed. Morgan Kaufmann \nPublishers.  \n[74] Verma, D. C. 2002. Content Distribution Networks: An Engineering Approach. John Wiley \n& Sons. \n[75] Wijnants, M., Cornelissen, B., Lamotte, W., De Vleeschauwer, B. 2006. \u201cAn Overlay \nNetwork Providing Application-Aware Multimedia Services.\u201d 2nd International Workshop \non Advanced Architectures and Algorithms for Internet Delivery and Applications, 2006. \n \n",
      "id": 31259394,
      "identifiers": [
        {
          "identifier": "oai:archive.ugent.be:4190748",
          "type": "OAI_ID"
        },
        {
          "identifier": "55747524",
          "type": "CORE_ID"
        }
      ],
      "title": "Overlay networks for smart grids",
      "language": {
        "code": "en",
        "name": "English"
      },
      "magId": null,
      "oaiIds": [
        "oai:archive.ugent.be:4190748"
      ],
      "publishedDate": "2013-01-01T00:00:00",
      "publisher": "'Institute of Electrical and Electronics Engineers (IEEE)'",
      "pubmedId": null,
      "references": [],
      "sourceFulltextUrls": [
        "https://biblio.ugent.be/publication/4190748/file/4190749"
      ],
      "updatedDate": "2022-03-18T23:08:55",
      "yearPublished": 2013,
      "journals": [],
      "links": [
        {
          "type": "download",
          "url": "https://core.ac.uk/download/55747524.pdf"
        },
        {
          "type": "reader",
          "url": "https://core.ac.uk/reader/55747524"
        },
        {
          "type": "thumbnail_m",
          "url": "https://core.ac.uk/image/55747524/large"
        },
        {
          "type": "thumbnail_l",
          "url": "https://core.ac.uk/image/55747524/large"
        },
        {
          "type": "display",
          "url": "https://core.ac.uk/works/31259394"
        }
      ]
    }
  ],
  "searchId": "a1b79879384be89b127f43517a1a7273"
}